/*
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TorXakisDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeDefsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefsTypeDefsParserRuleCall_0_0 = (RuleCall)cTypeDefsAssignment_0.eContents().get(0);
		private final Assignment cFuncDefsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFuncDefsFuncDefsParserRuleCall_1_0 = (RuleCall)cFuncDefsAssignment_1.eContents().get(0);
		private final Assignment cConstDefsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstDefsConstDefsParserRuleCall_2_0 = (RuleCall)cConstDefsAssignment_2.eContents().get(0);
		private final Assignment cProcDefsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cProcDefsProcDefsParserRuleCall_3_0 = (RuleCall)cProcDefsAssignment_3.eContents().get(0);
		private final Assignment cStautDefsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStautDefsStautDefsParserRuleCall_4_0 = (RuleCall)cStautDefsAssignment_4.eContents().get(0);
		private final Assignment cChannelDefsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cChannelDefsChannelDefsParserRuleCall_5_0 = (RuleCall)cChannelDefsAssignment_5.eContents().get(0);
		private final Assignment cModelDefAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cModelDefModelDefParserRuleCall_6_0 = (RuleCall)cModelDefAssignment_6.eContents().get(0);
		private final Assignment cMapperDefAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cMapperDefMapperDefParserRuleCall_7_0 = (RuleCall)cMapperDefAssignment_7.eContents().get(0);
		private final Assignment cCnectDefAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cCnectDefCnectDefParserRuleCall_8_0 = (RuleCall)cCnectDefAssignment_8.eContents().get(0);
		
		//Model:
		//	(typeDefs+=TypeDefs
		//	| funcDefs+=FuncDefs
		//	| constDefs+=ConstDefs
		//	| procDefs+=ProcDefs
		//	| stautDefs+=StautDefs
		//	| channelDefs+=ChannelDefs
		//	| modelDef+=ModelDef
		//	| mapperDef+=MapperDef
		//	| cnectDef+=CnectDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(typeDefs+=TypeDefs | funcDefs+=FuncDefs | constDefs+=ConstDefs | procDefs+=ProcDefs | stautDefs+=StautDefs |
		//channelDefs+=ChannelDefs | modelDef+=ModelDef | mapperDef+=MapperDef | cnectDef+=CnectDef)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeDefs+=TypeDefs
		public Assignment getTypeDefsAssignment_0() { return cTypeDefsAssignment_0; }
		
		//TypeDefs
		public RuleCall getTypeDefsTypeDefsParserRuleCall_0_0() { return cTypeDefsTypeDefsParserRuleCall_0_0; }
		
		//funcDefs+=FuncDefs
		public Assignment getFuncDefsAssignment_1() { return cFuncDefsAssignment_1; }
		
		//FuncDefs
		public RuleCall getFuncDefsFuncDefsParserRuleCall_1_0() { return cFuncDefsFuncDefsParserRuleCall_1_0; }
		
		//constDefs+=ConstDefs
		public Assignment getConstDefsAssignment_2() { return cConstDefsAssignment_2; }
		
		//ConstDefs
		public RuleCall getConstDefsConstDefsParserRuleCall_2_0() { return cConstDefsConstDefsParserRuleCall_2_0; }
		
		//procDefs+=ProcDefs
		public Assignment getProcDefsAssignment_3() { return cProcDefsAssignment_3; }
		
		//ProcDefs
		public RuleCall getProcDefsProcDefsParserRuleCall_3_0() { return cProcDefsProcDefsParserRuleCall_3_0; }
		
		//stautDefs+=StautDefs
		public Assignment getStautDefsAssignment_4() { return cStautDefsAssignment_4; }
		
		//StautDefs
		public RuleCall getStautDefsStautDefsParserRuleCall_4_0() { return cStautDefsStautDefsParserRuleCall_4_0; }
		
		//channelDefs+=ChannelDefs
		public Assignment getChannelDefsAssignment_5() { return cChannelDefsAssignment_5; }
		
		//ChannelDefs
		public RuleCall getChannelDefsChannelDefsParserRuleCall_5_0() { return cChannelDefsChannelDefsParserRuleCall_5_0; }
		
		//modelDef+=ModelDef
		public Assignment getModelDefAssignment_6() { return cModelDefAssignment_6; }
		
		//ModelDef
		public RuleCall getModelDefModelDefParserRuleCall_6_0() { return cModelDefModelDefParserRuleCall_6_0; }
		
		//mapperDef+=MapperDef
		public Assignment getMapperDefAssignment_7() { return cMapperDefAssignment_7; }
		
		//MapperDef
		public RuleCall getMapperDefMapperDefParserRuleCall_7_0() { return cMapperDefMapperDefParserRuleCall_7_0; }
		
		//cnectDef+=CnectDef
		public Assignment getCnectDefAssignment_8() { return cCnectDefAssignment_8; }
		
		//CnectDef
		public RuleCall getCnectDefCnectDefParserRuleCall_8_0() { return cCnectDefCnectDefParserRuleCall_8_0; }
	}
	public class TypeDefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.TypeDefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTYPEDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeDefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefsTypeDefParserRuleCall_1_0 = (RuleCall)cTypeDefsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeDefsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeDefsTypeDefParserRuleCall_2_1_0 = (RuleCall)cTypeDefsAssignment_2_1.eContents().get(0);
		private final Keyword cENDDEFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeDefs:
		//	'TYPEDEF' typeDefs+=TypeDef (';' typeDefs+=TypeDef)* 'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'TYPEDEF' typeDefs+=TypeDef (';' typeDefs+=TypeDef)* 'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'TYPEDEF'
		public Keyword getTYPEDEFKeyword_0() { return cTYPEDEFKeyword_0; }
		
		//typeDefs+=TypeDef
		public Assignment getTypeDefsAssignment_1() { return cTypeDefsAssignment_1; }
		
		//TypeDef
		public RuleCall getTypeDefsTypeDefParserRuleCall_1_0() { return cTypeDefsTypeDefParserRuleCall_1_0; }
		
		//(';' typeDefs+=TypeDef)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//typeDefs+=TypeDef
		public Assignment getTypeDefsAssignment_2_1() { return cTypeDefsAssignment_2_1; }
		
		//TypeDef
		public RuleCall getTypeDefsTypeDefParserRuleCall_2_1_0() { return cTypeDefsTypeDefParserRuleCall_2_1_0; }
		
		//'ENDDEF'
		public Keyword getENDDEFKeyword_3() { return cENDDEFKeyword_3; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTypeNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeConstructorListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeConstructorListNeConstructorListParserRuleCall_2_0 = (RuleCall)cNeConstructorListAssignment_2.eContents().get(0);
		
		//TypeDef:
		//	name=TypeName '::=' neConstructorList=NeConstructorList;
		@Override public ParserRule getRule() { return rule; }
		
		//name=TypeName '::=' neConstructorList=NeConstructorList
		public Group getGroup() { return cGroup; }
		
		//name=TypeName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//TypeName
		public RuleCall getNameTypeNameParserRuleCall_0_0() { return cNameTypeNameParserRuleCall_0_0; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_1() { return cColonColonEqualsSignKeyword_1; }
		
		//neConstructorList=NeConstructorList
		public Assignment getNeConstructorListAssignment_2() { return cNeConstructorListAssignment_2; }
		
		//NeConstructorList
		public RuleCall getNeConstructorListNeConstructorListParserRuleCall_2_0() { return cNeConstructorListNeConstructorListParserRuleCall_2_0; }
	}
	public class FuncDefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.FuncDefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFuncDefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncDefsFuncDefParserRuleCall_1_0 = (RuleCall)cFuncDefsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFuncDefsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFuncDefsFuncDefParserRuleCall_2_1_0 = (RuleCall)cFuncDefsAssignment_2_1.eContents().get(0);
		private final Keyword cENDDEFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncDefs:
		//	'FUNCDEF' funcDefs+=FuncDef (';' funcDefs+=FuncDef)* 'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'FUNCDEF' funcDefs+=FuncDef (';' funcDefs+=FuncDef)* 'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'FUNCDEF'
		public Keyword getFUNCDEFKeyword_0() { return cFUNCDEFKeyword_0; }
		
		//funcDefs+=FuncDef
		public Assignment getFuncDefsAssignment_1() { return cFuncDefsAssignment_1; }
		
		//FuncDef
		public RuleCall getFuncDefsFuncDefParserRuleCall_1_0() { return cFuncDefsFuncDefParserRuleCall_1_0; }
		
		//(';' funcDefs+=FuncDef)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//funcDefs+=FuncDef
		public Assignment getFuncDefsAssignment_2_1() { return cFuncDefsAssignment_2_1; }
		
		//FuncDef
		public RuleCall getFuncDefsFuncDefParserRuleCall_2_1_0() { return cFuncDefsFuncDefParserRuleCall_2_1_0; }
		
		//'ENDDEF'
		public Keyword getENDDEFKeyword_3() { return cENDDEFKeyword_3; }
	}
	public class FuncDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.FuncDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncNameFuncNameParserRuleCall_0_0 = (RuleCall)cFuncNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeVarsDelarationListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeVarsDelarationListNeVarsDeclarationListParserRuleCall_2_0 = (RuleCall)cNeVarsDelarationListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeNameTypeNameParserRuleCall_5_0 = (RuleCall)cTypeNameAssignment_5.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValExprAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValExprValExprParserRuleCall_7_0 = (RuleCall)cValExprAssignment_7.eContents().get(0);
		
		//FuncDef:
		//	funcName=FuncName '(' neVarsDelarationList=NeVarsDeclarationList ')' "::" typeName=TypeName "::=" valExpr=ValExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//funcName=FuncName '(' neVarsDelarationList=NeVarsDeclarationList ')' "::" typeName=TypeName "::=" valExpr=ValExpr
		public Group getGroup() { return cGroup; }
		
		//funcName=FuncName
		public Assignment getFuncNameAssignment_0() { return cFuncNameAssignment_0; }
		
		//FuncName
		public RuleCall getFuncNameFuncNameParserRuleCall_0_0() { return cFuncNameFuncNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//neVarsDelarationList=NeVarsDeclarationList
		public Assignment getNeVarsDelarationListAssignment_2() { return cNeVarsDelarationListAssignment_2; }
		
		//NeVarsDeclarationList
		public RuleCall getNeVarsDelarationListNeVarsDeclarationListParserRuleCall_2_0() { return cNeVarsDelarationListNeVarsDeclarationListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"::"
		public Keyword getColonColonKeyword_4() { return cColonColonKeyword_4; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_5() { return cTypeNameAssignment_5; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_5_0() { return cTypeNameTypeNameParserRuleCall_5_0; }
		
		//"::="
		public Keyword getColonColonEqualsSignKeyword_6() { return cColonColonEqualsSignKeyword_6; }
		
		//valExpr=ValExpr
		public Assignment getValExprAssignment_7() { return cValExprAssignment_7; }
		
		//ValExpr
		public RuleCall getValExprValExprParserRuleCall_7_0() { return cValExprValExprParserRuleCall_7_0; }
	}
	public class ConstDefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ConstDefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstDefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstDefsConstDefParserRuleCall_1_0 = (RuleCall)cConstDefsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstDefsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstDefsConstDefParserRuleCall_2_1_0 = (RuleCall)cConstDefsAssignment_2_1.eContents().get(0);
		private final Keyword cENDDEFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstDefs:
		//	'CONSTDEF' constDefs+=ConstDef (';' constDefs+=ConstDef)* 'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'CONSTDEF' constDefs+=ConstDef (';' constDefs+=ConstDef)* 'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'CONSTDEF'
		public Keyword getCONSTDEFKeyword_0() { return cCONSTDEFKeyword_0; }
		
		//constDefs+=ConstDef
		public Assignment getConstDefsAssignment_1() { return cConstDefsAssignment_1; }
		
		//ConstDef
		public RuleCall getConstDefsConstDefParserRuleCall_1_0() { return cConstDefsConstDefParserRuleCall_1_0; }
		
		//(';' constDefs+=ConstDef)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//constDefs+=ConstDef
		public Assignment getConstDefsAssignment_2_1() { return cConstDefsAssignment_2_1; }
		
		//ConstDef
		public RuleCall getConstDefsConstDefParserRuleCall_2_1_0() { return cConstDefsConstDefParserRuleCall_2_1_0; }
		
		//'ENDDEF'
		public Keyword getENDDEFKeyword_3() { return cENDDEFKeyword_3; }
	}
	public class ConstDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ConstDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameConstNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValExprValExprParserRuleCall_4_0 = (RuleCall)cValExprAssignment_4.eContents().get(0);
		
		//ConstDef:
		//	name=ConstName "::" typeName=TypeName "::=" valExpr=ValExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ConstName "::" typeName=TypeName "::=" valExpr=ValExpr
		public Group getGroup() { return cGroup; }
		
		//name=ConstName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ConstName
		public RuleCall getNameConstNameParserRuleCall_0_0() { return cNameConstNameParserRuleCall_0_0; }
		
		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_2_0() { return cTypeNameTypeNameParserRuleCall_2_0; }
		
		//"::="
		public Keyword getColonColonEqualsSignKeyword_3() { return cColonColonEqualsSignKeyword_3; }
		
		//valExpr=ValExpr
		public Assignment getValExprAssignment_4() { return cValExprAssignment_4; }
		
		//ValExpr
		public RuleCall getValExprValExprParserRuleCall_4_0() { return cValExprValExprParserRuleCall_4_0; }
	}
	public class ProcDefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcDefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcDefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcDefsProcDefParserRuleCall_1_0 = (RuleCall)cProcDefsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProcDefsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cProcDefsProcDefParserRuleCall_2_1_0 = (RuleCall)cProcDefsAssignment_2_1.eContents().get(0);
		private final Keyword cENDDEFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcDefs:
		//	'PROCDEF' procDefs+=ProcDef (';' procDefs+=ProcDef)* 'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'PROCDEF' procDefs+=ProcDef (';' procDefs+=ProcDef)* 'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'PROCDEF'
		public Keyword getPROCDEFKeyword_0() { return cPROCDEFKeyword_0; }
		
		//procDefs+=ProcDef
		public Assignment getProcDefsAssignment_1() { return cProcDefsAssignment_1; }
		
		//ProcDef
		public RuleCall getProcDefsProcDefParserRuleCall_1_0() { return cProcDefsProcDefParserRuleCall_1_0; }
		
		//(';' procDefs+=ProcDef)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//procDefs+=ProcDef
		public Assignment getProcDefsAssignment_2_1() { return cProcDefsAssignment_2_1; }
		
		//ProcDef
		public RuleCall getProcDefsProcDefParserRuleCall_2_1_0() { return cProcDefsProcDefParserRuleCall_2_1_0; }
		
		//'ENDDEF'
		public Keyword getENDDEFKeyword_3() { return cENDDEFKeyword_3; }
	}
	public class ProcDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameProcNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeChannelDeclListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0 = (RuleCall)cNeChannelDeclListAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNeVarDeclListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNeVarDeclListNeVarDeclListParserRuleCall_5_0 = (RuleCall)cNeVarDeclListAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExitDeclAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExitDeclExitDeclParserRuleCall_7_0 = (RuleCall)cExitDeclAssignment_7.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cProcessBehaviourAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cProcessBehaviourProcessBehaviourParserRuleCall_9_0 = (RuleCall)cProcessBehaviourAssignment_9.eContents().get(0);
		
		//ProcDef:
		//	name=ProcName '[' neChannelDeclList=NeChannelsDeclList? ']' '(' neVarDeclList=NeVarDeclList? ')' exitDecl=ExitDecl?
		//	'::=' processBehaviour=ProcessBehaviour;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ProcName '[' neChannelDeclList=NeChannelsDeclList? ']' '(' neVarDeclList=NeVarDeclList? ')' exitDecl=ExitDecl?
		//'::=' processBehaviour=ProcessBehaviour
		public Group getGroup() { return cGroup; }
		
		//name=ProcName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ProcName
		public RuleCall getNameProcNameParserRuleCall_0_0() { return cNameProcNameParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//neChannelDeclList=NeChannelsDeclList?
		public Assignment getNeChannelDeclListAssignment_2() { return cNeChannelDeclListAssignment_2; }
		
		//NeChannelsDeclList
		public RuleCall getNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0() { return cNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//neVarDeclList=NeVarDeclList?
		public Assignment getNeVarDeclListAssignment_5() { return cNeVarDeclListAssignment_5; }
		
		//NeVarDeclList
		public RuleCall getNeVarDeclListNeVarDeclListParserRuleCall_5_0() { return cNeVarDeclListNeVarDeclListParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//exitDecl=ExitDecl?
		public Assignment getExitDeclAssignment_7() { return cExitDeclAssignment_7; }
		
		//ExitDecl
		public RuleCall getExitDeclExitDeclParserRuleCall_7_0() { return cExitDeclExitDeclParserRuleCall_7_0; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_8() { return cColonColonEqualsSignKeyword_8; }
		
		//processBehaviour=ProcessBehaviour
		public Assignment getProcessBehaviourAssignment_9() { return cProcessBehaviourAssignment_9; }
		
		//ProcessBehaviour
		public RuleCall getProcessBehaviourProcessBehaviourParserRuleCall_9_0() { return cProcessBehaviourProcessBehaviourParserRuleCall_9_0; }
	}
	public class StautDefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.StautDefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTAUTDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStautDefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStautDefsStautDefParserRuleCall_1_0 = (RuleCall)cStautDefsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStautDefsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStautDefsStautDefParserRuleCall_2_1_0 = (RuleCall)cStautDefsAssignment_2_1.eContents().get(0);
		private final Keyword cENDDEFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StautDefs:
		//	'STAUTDEF' stautDefs+=StautDef (';' stautDefs+=StautDef)* 'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'STAUTDEF' stautDefs+=StautDef (';' stautDefs+=StautDef)* 'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'STAUTDEF'
		public Keyword getSTAUTDEFKeyword_0() { return cSTAUTDEFKeyword_0; }
		
		//stautDefs+=StautDef
		public Assignment getStautDefsAssignment_1() { return cStautDefsAssignment_1; }
		
		//StautDef
		public RuleCall getStautDefsStautDefParserRuleCall_1_0() { return cStautDefsStautDefParserRuleCall_1_0; }
		
		//(';' stautDefs+=StautDef)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//stautDefs+=StautDef
		public Assignment getStautDefsAssignment_2_1() { return cStautDefsAssignment_2_1; }
		
		//StautDef
		public RuleCall getStautDefsStautDefParserRuleCall_2_1_0() { return cStautDefsStautDefParserRuleCall_2_1_0; }
		
		//'ENDDEF'
		public Keyword getENDDEFKeyword_3() { return cENDDEFKeyword_3; }
	}
	public class StautDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.StautDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStautNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeChannelDeclListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0 = (RuleCall)cNeChannelDeclListAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNeVarDeclListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNeVarDeclListNeVarDeclListParserRuleCall_5_0 = (RuleCall)cNeVarDeclListAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExitDeclAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExitDeclExitDeclParserRuleCall_7_0 = (RuleCall)cExitDeclAssignment_7.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStautItemsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStautItemsStautItemsParserRuleCall_9_0 = (RuleCall)cStautItemsAssignment_9.eContents().get(0);
		
		//StautDef:
		//	name=StautName '[' neChannelDeclList=NeChannelsDeclList? ']' '(' neVarDeclList=NeVarDeclList? ')' exitDecl=ExitDecl?
		//	'::=' stautItems=StautItems;
		@Override public ParserRule getRule() { return rule; }
		
		//name=StautName '[' neChannelDeclList=NeChannelsDeclList? ']' '(' neVarDeclList=NeVarDeclList? ')' exitDecl=ExitDecl?
		//'::=' stautItems=StautItems
		public Group getGroup() { return cGroup; }
		
		//name=StautName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//StautName
		public RuleCall getNameStautNameParserRuleCall_0_0() { return cNameStautNameParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//neChannelDeclList=NeChannelsDeclList?
		public Assignment getNeChannelDeclListAssignment_2() { return cNeChannelDeclListAssignment_2; }
		
		//NeChannelsDeclList
		public RuleCall getNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0() { return cNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//neVarDeclList=NeVarDeclList?
		public Assignment getNeVarDeclListAssignment_5() { return cNeVarDeclListAssignment_5; }
		
		//NeVarDeclList
		public RuleCall getNeVarDeclListNeVarDeclListParserRuleCall_5_0() { return cNeVarDeclListNeVarDeclListParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//exitDecl=ExitDecl?
		public Assignment getExitDeclAssignment_7() { return cExitDeclAssignment_7; }
		
		//ExitDecl
		public RuleCall getExitDeclExitDeclParserRuleCall_7_0() { return cExitDeclExitDeclParserRuleCall_7_0; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_8() { return cColonColonEqualsSignKeyword_8; }
		
		//stautItems=StautItems
		public Assignment getStautItemsAssignment_9() { return cStautItemsAssignment_9; }
		
		//StautItems
		public RuleCall getStautItemsStautItemsParserRuleCall_9_0() { return cStautItemsStautItemsParserRuleCall_9_0; }
	}
	public class ChannelDefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ChannelDefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHANDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChannelDefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChannelDefsChannelDefParserRuleCall_1_0 = (RuleCall)cChannelDefsAssignment_1.eContents().get(0);
		private final Keyword cENDDEFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ChannelDefs:
		//	'CHANDEF' ChannelDefs+=ChannelDef
		//	// (';' ChannelDefs+=ChannelDef )* 
		//	'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'CHANDEF' ChannelDefs+=ChannelDef // (';' ChannelDefs+=ChannelDef )* 
		//'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'CHANDEF'
		public Keyword getCHANDEFKeyword_0() { return cCHANDEFKeyword_0; }
		
		//ChannelDefs+=ChannelDef
		public Assignment getChannelDefsAssignment_1() { return cChannelDefsAssignment_1; }
		
		//ChannelDef
		public RuleCall getChannelDefsChannelDefParserRuleCall_1_0() { return cChannelDefsChannelDefParserRuleCall_1_0; }
		
		//// (';' ChannelDefs+=ChannelDef )* 
		//'ENDDEF'
		public Keyword getENDDEFKeyword_2() { return cENDDEFKeyword_2; }
	}
	public class ChannelDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ChannelDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameChannelDefNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeChannelDeclListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0 = (RuleCall)cNeChannelDeclListAssignment_2.eContents().get(0);
		
		//ChannelDef:
		//	name=ChannelDefName '::=' neChannelDeclList=NeChannelsDeclList;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ChannelDefName '::=' neChannelDeclList=NeChannelsDeclList
		public Group getGroup() { return cGroup; }
		
		//name=ChannelDefName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ChannelDefName
		public RuleCall getNameChannelDefNameParserRuleCall_0_0() { return cNameChannelDefNameParserRuleCall_0_0; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_1() { return cColonColonEqualsSignKeyword_1; }
		
		//neChannelDeclList=NeChannelsDeclList
		public Assignment getNeChannelDeclListAssignment_2() { return cNeChannelDeclListAssignment_2; }
		
		//NeChannelsDeclList
		public RuleCall getNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0() { return cNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0; }
	}
	public class ModelDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ModelDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMODELDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelNameModelNameParserRuleCall_1_0 = (RuleCall)cModelNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCHANKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNeInputChannelNameListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNeInputChannelNameListNeChannelNameListParserRuleCall_5_0 = (RuleCall)cNeInputChannelNameListAssignment_5.eContents().get(0);
		private final Keyword cCHANKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cOUTKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNeOutputChannelNameListAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNeOutputChannelNameListNeChannelNameListParserRuleCall_8_0 = (RuleCall)cNeOutputChannelNameListAssignment_8.eContents().get(0);
		private final Keyword cBEHAVIOURKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cProcessBehaviourAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cProcessBehaviourProcessBehaviourParserRuleCall_10_0 = (RuleCall)cProcessBehaviourAssignment_10.eContents().get(0);
		private final Keyword cENDDEFKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ModelDef:
		//	'MODELDEF' modelName=ModelName '::='
		//	'CHAN' 'IN' neInputChannelNameList=NeChannelNameList?
		//	'CHAN' 'OUT' neOutputChannelNameList=NeChannelNameList?
		//	'BEHAVIOUR' processBehaviour=ProcessBehaviour
		//	'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'MODELDEF' modelName=ModelName '::=' 'CHAN' 'IN' neInputChannelNameList=NeChannelNameList? 'CHAN' 'OUT'
		//neOutputChannelNameList=NeChannelNameList? 'BEHAVIOUR' processBehaviour=ProcessBehaviour 'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'MODELDEF'
		public Keyword getMODELDEFKeyword_0() { return cMODELDEFKeyword_0; }
		
		//modelName=ModelName
		public Assignment getModelNameAssignment_1() { return cModelNameAssignment_1; }
		
		//ModelName
		public RuleCall getModelNameModelNameParserRuleCall_1_0() { return cModelNameModelNameParserRuleCall_1_0; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_2() { return cColonColonEqualsSignKeyword_2; }
		
		//'CHAN'
		public Keyword getCHANKeyword_3() { return cCHANKeyword_3; }
		
		//'IN'
		public Keyword getINKeyword_4() { return cINKeyword_4; }
		
		//neInputChannelNameList=NeChannelNameList?
		public Assignment getNeInputChannelNameListAssignment_5() { return cNeInputChannelNameListAssignment_5; }
		
		//NeChannelNameList
		public RuleCall getNeInputChannelNameListNeChannelNameListParserRuleCall_5_0() { return cNeInputChannelNameListNeChannelNameListParserRuleCall_5_0; }
		
		//'CHAN'
		public Keyword getCHANKeyword_6() { return cCHANKeyword_6; }
		
		//'OUT'
		public Keyword getOUTKeyword_7() { return cOUTKeyword_7; }
		
		//neOutputChannelNameList=NeChannelNameList?
		public Assignment getNeOutputChannelNameListAssignment_8() { return cNeOutputChannelNameListAssignment_8; }
		
		//NeChannelNameList
		public RuleCall getNeOutputChannelNameListNeChannelNameListParserRuleCall_8_0() { return cNeOutputChannelNameListNeChannelNameListParserRuleCall_8_0; }
		
		//'BEHAVIOUR'
		public Keyword getBEHAVIOURKeyword_9() { return cBEHAVIOURKeyword_9; }
		
		//processBehaviour=ProcessBehaviour
		public Assignment getProcessBehaviourAssignment_10() { return cProcessBehaviourAssignment_10; }
		
		//ProcessBehaviour
		public RuleCall getProcessBehaviourProcessBehaviourParserRuleCall_10_0() { return cProcessBehaviourProcessBehaviourParserRuleCall_10_0; }
		
		//'ENDDEF'
		public Keyword getENDDEFKeyword_11() { return cENDDEFKeyword_11; }
	}
	public class MapperDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.MapperDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMAPPERDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMapperNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMapperNameMapperNameParserRuleCall_1_0 = (RuleCall)cMapperNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCHANKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChanInNeChannelsDeclListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChanInNeChannelsDeclListNeChannelsDeclListParserRuleCall_5_0 = (RuleCall)cChanInNeChannelsDeclListAssignment_5.eContents().get(0);
		private final Keyword cCHANKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cOUTKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cChanOutNeChannelsDeclListAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cChanOutNeChannelsDeclListNeChannelsDeclListParserRuleCall_8_0 = (RuleCall)cChanOutNeChannelsDeclListAssignment_8.eContents().get(0);
		private final Keyword cBEHAVIOURKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cProcessBehaviourAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cProcessBehaviourProcessBehaviourParserRuleCall_10_0 = (RuleCall)cProcessBehaviourAssignment_10.eContents().get(0);
		private final Keyword cENDDEFKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//MapperDef:
		//	'MAPPERDEF' mapperName=MapperName '::='
		//	'CHAN' 'IN' chanInNeChannelsDeclList=NeChannelsDeclList?
		//	'CHAN' 'OUT' chanOutNeChannelsDeclList=NeChannelsDeclList?
		//	'BEHAVIOUR' processBehaviour=ProcessBehaviour
		//	'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'MAPPERDEF' mapperName=MapperName '::=' 'CHAN' 'IN' chanInNeChannelsDeclList=NeChannelsDeclList? 'CHAN' 'OUT'
		//chanOutNeChannelsDeclList=NeChannelsDeclList? 'BEHAVIOUR' processBehaviour=ProcessBehaviour 'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'MAPPERDEF'
		public Keyword getMAPPERDEFKeyword_0() { return cMAPPERDEFKeyword_0; }
		
		//mapperName=MapperName
		public Assignment getMapperNameAssignment_1() { return cMapperNameAssignment_1; }
		
		//MapperName
		public RuleCall getMapperNameMapperNameParserRuleCall_1_0() { return cMapperNameMapperNameParserRuleCall_1_0; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_2() { return cColonColonEqualsSignKeyword_2; }
		
		//'CHAN'
		public Keyword getCHANKeyword_3() { return cCHANKeyword_3; }
		
		//'IN'
		public Keyword getINKeyword_4() { return cINKeyword_4; }
		
		//chanInNeChannelsDeclList=NeChannelsDeclList?
		public Assignment getChanInNeChannelsDeclListAssignment_5() { return cChanInNeChannelsDeclListAssignment_5; }
		
		//NeChannelsDeclList
		public RuleCall getChanInNeChannelsDeclListNeChannelsDeclListParserRuleCall_5_0() { return cChanInNeChannelsDeclListNeChannelsDeclListParserRuleCall_5_0; }
		
		//'CHAN'
		public Keyword getCHANKeyword_6() { return cCHANKeyword_6; }
		
		//'OUT'
		public Keyword getOUTKeyword_7() { return cOUTKeyword_7; }
		
		//chanOutNeChannelsDeclList=NeChannelsDeclList?
		public Assignment getChanOutNeChannelsDeclListAssignment_8() { return cChanOutNeChannelsDeclListAssignment_8; }
		
		//NeChannelsDeclList
		public RuleCall getChanOutNeChannelsDeclListNeChannelsDeclListParserRuleCall_8_0() { return cChanOutNeChannelsDeclListNeChannelsDeclListParserRuleCall_8_0; }
		
		//'BEHAVIOUR'
		public Keyword getBEHAVIOURKeyword_9() { return cBEHAVIOURKeyword_9; }
		
		//processBehaviour=ProcessBehaviour
		public Assignment getProcessBehaviourAssignment_10() { return cProcessBehaviourAssignment_10; }
		
		//ProcessBehaviour
		public RuleCall getProcessBehaviourProcessBehaviourParserRuleCall_10_0() { return cProcessBehaviourProcessBehaviourParserRuleCall_10_0; }
		
		//'ENDDEF'
		public Keyword getENDDEFKeyword_11() { return cENDDEFKeyword_11; }
	}
	public class CnectDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.CnectDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCNECTDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCnectNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCnectNameCnectNameParserRuleCall_1_0 = (RuleCall)cCnectNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCnectTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cCnectTypeAlternatives_3_0 = (Alternatives)cCnectTypeAssignment_3.eContents().get(0);
		private final Keyword cCnectTypeCLIENTSOCKKeyword_3_0_0 = (Keyword)cCnectTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cCnectTypeSERVERSOCKKeyword_3_0_1 = (Keyword)cCnectTypeAlternatives_3_0.eContents().get(1);
		private final Assignment cConnectionItemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectionItemsConnectionItemParserRuleCall_4_0 = (RuleCall)cConnectionItemsAssignment_4.eContents().get(0);
		private final Keyword cENDDEFKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CnectDef:
		//	'CNECTDEF' cnectName=CnectName '::='
		//	cnectType=('CLIENTSOCK' | 'SERVERSOCK') connectionItems+=ConnectionItem*
		//	'ENDDEF';
		@Override public ParserRule getRule() { return rule; }
		
		//'CNECTDEF' cnectName=CnectName '::=' cnectType=('CLIENTSOCK' | 'SERVERSOCK') connectionItems+=ConnectionItem* 'ENDDEF'
		public Group getGroup() { return cGroup; }
		
		//'CNECTDEF'
		public Keyword getCNECTDEFKeyword_0() { return cCNECTDEFKeyword_0; }
		
		//cnectName=CnectName
		public Assignment getCnectNameAssignment_1() { return cCnectNameAssignment_1; }
		
		//CnectName
		public RuleCall getCnectNameCnectNameParserRuleCall_1_0() { return cCnectNameCnectNameParserRuleCall_1_0; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_2() { return cColonColonEqualsSignKeyword_2; }
		
		//cnectType=('CLIENTSOCK' | 'SERVERSOCK')
		public Assignment getCnectTypeAssignment_3() { return cCnectTypeAssignment_3; }
		
		//('CLIENTSOCK' | 'SERVERSOCK')
		public Alternatives getCnectTypeAlternatives_3_0() { return cCnectTypeAlternatives_3_0; }
		
		//'CLIENTSOCK'
		public Keyword getCnectTypeCLIENTSOCKKeyword_3_0_0() { return cCnectTypeCLIENTSOCKKeyword_3_0_0; }
		
		//'SERVERSOCK'
		public Keyword getCnectTypeSERVERSOCKKeyword_3_0_1() { return cCnectTypeSERVERSOCKKeyword_3_0_1; }
		
		//connectionItems+=ConnectionItem*
		public Assignment getConnectionItemsAssignment_4() { return cConnectionItemsAssignment_4; }
		
		//ConnectionItem
		public RuleCall getConnectionItemsConnectionItemParserRuleCall_4_0() { return cConnectionItemsConnectionItemParserRuleCall_4_0; }
		
		//'ENDDEF'
		public Keyword getENDDEFKeyword_5() { return cENDDEFKeyword_5; }
	}
	public class StautItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.StautItems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStautItemsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStateItemsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStateItemsStateItemParserRuleCall_1_0_0 = (RuleCall)cStateItemsAssignment_1_0.eContents().get(0);
		private final Assignment cVarItemsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVarItemsVarItemParserRuleCall_1_1_0 = (RuleCall)cVarItemsAssignment_1_1.eContents().get(0);
		private final Assignment cInitItemsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cInitItemsInitItemParserRuleCall_1_2_0 = (RuleCall)cInitItemsAssignment_1_2.eContents().get(0);
		private final Assignment cTransItemsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cTransItemsTransItemParserRuleCall_1_3_0 = (RuleCall)cTransItemsAssignment_1_3.eContents().get(0);
		
		//StautItems:
		//	{StautItems} (stateItems+=StateItem
		//	| varItems+=VarItem
		//	| initItems+=InitItem
		//	| transItems+=TransItem)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StautItems} (stateItems+=StateItem | varItems+=VarItem | initItems+=InitItem | transItems+=TransItem)*
		public Group getGroup() { return cGroup; }
		
		//{StautItems}
		public Action getStautItemsAction_0() { return cStautItemsAction_0; }
		
		//(stateItems+=StateItem | varItems+=VarItem | initItems+=InitItem | transItems+=TransItem)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//stateItems+=StateItem
		public Assignment getStateItemsAssignment_1_0() { return cStateItemsAssignment_1_0; }
		
		//StateItem
		public RuleCall getStateItemsStateItemParserRuleCall_1_0_0() { return cStateItemsStateItemParserRuleCall_1_0_0; }
		
		//varItems+=VarItem
		public Assignment getVarItemsAssignment_1_1() { return cVarItemsAssignment_1_1; }
		
		//VarItem
		public RuleCall getVarItemsVarItemParserRuleCall_1_1_0() { return cVarItemsVarItemParserRuleCall_1_1_0; }
		
		//initItems+=InitItem
		public Assignment getInitItemsAssignment_1_2() { return cInitItemsAssignment_1_2; }
		
		//InitItem
		public RuleCall getInitItemsInitItemParserRuleCall_1_2_0() { return cInitItemsInitItemParserRuleCall_1_2_0; }
		
		//transItems+=TransItem
		public Assignment getTransItemsAssignment_1_3() { return cTransItemsAssignment_1_3; }
		
		//TransItem
		public RuleCall getTransItemsTransItemParserRuleCall_1_3_0() { return cTransItemsTransItemParserRuleCall_1_3_0; }
	}
	public class StateItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.StateItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListNeIdNameListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//StateItem:
		//	'STATE' list=NeIdNameList;
		@Override public ParserRule getRule() { return rule; }
		
		//'STATE' list=NeIdNameList
		public Group getGroup() { return cGroup; }
		
		//'STATE'
		public Keyword getSTATEKeyword_0() { return cSTATEKeyword_0; }
		
		//list=NeIdNameList
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//NeIdNameList
		public RuleCall getListNeIdNameListParserRuleCall_1_0() { return cListNeIdNameListParserRuleCall_1_0; }
	}
	public class VarItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.VarItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarItemAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVARKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeVarsDelarationListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeVarsDelarationListNeVarsDeclarationListParserRuleCall_2_0 = (RuleCall)cNeVarsDelarationListAssignment_2.eContents().get(0);
		
		//VarItem:
		//	{VarItem}
		//	'VAR' neVarsDelarationList=NeVarsDeclarationList?;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarItem} 'VAR' neVarsDelarationList=NeVarsDeclarationList?
		public Group getGroup() { return cGroup; }
		
		//{VarItem}
		public Action getVarItemAction_0() { return cVarItemAction_0; }
		
		//'VAR'
		public Keyword getVARKeyword_1() { return cVARKeyword_1; }
		
		//neVarsDelarationList=NeVarsDeclarationList?
		public Assignment getNeVarsDelarationListAssignment_2() { return cNeVarsDelarationListAssignment_2; }
		
		//NeVarsDeclarationList
		public RuleCall getNeVarsDelarationListNeVarsDeclarationListParserRuleCall_2_0() { return cNeVarsDelarationListNeVarsDeclarationListParserRuleCall_2_0; }
	}
	public class InitItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.InitItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdNameIdNameParserRuleCall_1_0 = (RuleCall)cIdNameAssignment_1.eContents().get(0);
		private final Assignment cUpdateListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpdateListUpdateListParserRuleCall_2_0 = (RuleCall)cUpdateListAssignment_2.eContents().get(0);
		
		//InitItem:
		//	'INIT' idName=IdName updateList=UpdateList?;
		@Override public ParserRule getRule() { return rule; }
		
		//'INIT' idName=IdName updateList=UpdateList?
		public Group getGroup() { return cGroup; }
		
		//'INIT'
		public Keyword getINITKeyword_0() { return cINITKeyword_0; }
		
		//idName=IdName
		public Assignment getIdNameAssignment_1() { return cIdNameAssignment_1; }
		
		//IdName
		public RuleCall getIdNameIdNameParserRuleCall_1_0() { return cIdNameIdNameParserRuleCall_1_0; }
		
		//updateList=UpdateList?
		public Assignment getUpdateListAssignment_2() { return cUpdateListAssignment_2; }
		
		//UpdateList
		public RuleCall getUpdateListUpdateListParserRuleCall_2_0() { return cUpdateListUpdateListParserRuleCall_2_0; }
	}
	public class TransItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.TransItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRANSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_1_0 = (RuleCall)cTransitionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTransitionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_2_1_0 = (RuleCall)cTransitionsAssignment_2_1.eContents().get(0);
		
		//TransItem:
		//	'TRANS' transitions+=Transition (';' transitions+=Transition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'TRANS' transitions+=Transition (';' transitions+=Transition)*
		public Group getGroup() { return cGroup; }
		
		//'TRANS'
		public Keyword getTRANSKeyword_0() { return cTRANSKeyword_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_1() { return cTransitionsAssignment_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_1_0() { return cTransitionsTransitionParserRuleCall_1_0; }
		
		//(';' transitions+=Transition)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_2_1() { return cTransitionsAssignment_2_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_2_1_0() { return cTransitionsTransitionParserRuleCall_2_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromNameIdNameParserRuleCall_0_0 = (RuleCall)cFromNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionalCommunicationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionalCommunicationsConditionalCommunicationsParserRuleCall_2_0 = (RuleCall)cConditionalCommunicationsAssignment_2.eContents().get(0);
		private final Assignment cUpdateListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpdateListUpdateListParserRuleCall_3_0 = (RuleCall)cUpdateListAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToNameIdNameParserRuleCall_5_0 = (RuleCall)cToNameAssignment_5.eContents().get(0);
		
		//Transition:
		//	fromName=IdName '->' conditionalCommunications=ConditionalCommunications updateList=UpdateList? '->' toName=IdName;
		@Override public ParserRule getRule() { return rule; }
		
		//fromName=IdName '->' conditionalCommunications=ConditionalCommunications updateList=UpdateList? '->' toName=IdName
		public Group getGroup() { return cGroup; }
		
		//fromName=IdName
		public Assignment getFromNameAssignment_0() { return cFromNameAssignment_0; }
		
		//IdName
		public RuleCall getFromNameIdNameParserRuleCall_0_0() { return cFromNameIdNameParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//conditionalCommunications=ConditionalCommunications
		public Assignment getConditionalCommunicationsAssignment_2() { return cConditionalCommunicationsAssignment_2; }
		
		//ConditionalCommunications
		public RuleCall getConditionalCommunicationsConditionalCommunicationsParserRuleCall_2_0() { return cConditionalCommunicationsConditionalCommunicationsParserRuleCall_2_0; }
		
		//updateList=UpdateList?
		public Assignment getUpdateListAssignment_3() { return cUpdateListAssignment_3; }
		
		//UpdateList
		public RuleCall getUpdateListUpdateListParserRuleCall_3_0() { return cUpdateListUpdateListParserRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//toName=IdName
		public Assignment getToNameAssignment_5() { return cToNameAssignment_5; }
		
		//IdName
		public RuleCall getToNameIdNameParserRuleCall_5_0() { return cToNameIdNameParserRuleCall_5_0; }
	}
	public class UpdateListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.UpdateList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUpdatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUpdatesUpdateParserRuleCall_1_0 = (RuleCall)cUpdatesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUpdatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUpdatesUpdateParserRuleCall_2_1_0 = (RuleCall)cUpdatesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UpdateList:
		//	'{' updates+=Update (';' updates+=Update)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' updates+=Update (';' updates+=Update)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//updates+=Update
		public Assignment getUpdatesAssignment_1() { return cUpdatesAssignment_1; }
		
		//Update
		public RuleCall getUpdatesUpdateParserRuleCall_1_0() { return cUpdatesUpdateParserRuleCall_1_0; }
		
		//(';' updates+=Update)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//updates+=Update
		public Assignment getUpdatesAssignment_2_1() { return cUpdatesAssignment_2_1; }
		
		//Update
		public RuleCall getUpdatesUpdateParserRuleCall_2_1_0() { return cUpdatesUpdateParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameVarNameParserRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValExprValExprParserRuleCall_2_0 = (RuleCall)cValExprAssignment_2.eContents().get(0);
		
		//Update:
		//	varName+=VarName ':=' valExpr+=ValExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//varName+=VarName ':=' valExpr+=ValExpr
		public Group getGroup() { return cGroup; }
		
		//varName+=VarName
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//VarName
		public RuleCall getVarNameVarNameParserRuleCall_0_0() { return cVarNameVarNameParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//valExpr+=ValExpr
		public Assignment getValExprAssignment_2() { return cValExprAssignment_2; }
		
		//ValExpr
		public RuleCall getValExprValExprParserRuleCall_2_0() { return cValExprValExprParserRuleCall_2_0; }
	}
	public class MapperNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.MapperName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MapperName:
		//	name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAPSID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_0() { return cNameCAPSIDTerminalRuleCall_0; }
	}
	public class NeConstructorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeConstructorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstructorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstructorsConstructorParserRuleCall_0_0 = (RuleCall)cConstructorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstructorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstructorConstructorParserRuleCall_1_1_0 = (RuleCall)cConstructorAssignment_1_1.eContents().get(0);
		
		//NeConstructorList:
		//	constructors+=Constructor ('|' constructor+=Constructor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//constructors+=Constructor ('|' constructor+=Constructor)*
		public Group getGroup() { return cGroup; }
		
		//constructors+=Constructor
		public Assignment getConstructorsAssignment_0() { return cConstructorsAssignment_0; }
		
		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_0_0() { return cConstructorsConstructorParserRuleCall_0_0; }
		
		//('|' constructor+=Constructor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//constructor+=Constructor
		public Assignment getConstructorAssignment_1_1() { return cConstructorAssignment_1_1; }
		
		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_1_1_0() { return cConstructorConstructorParserRuleCall_1_1_0; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameConstructorNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNeFieldsListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNeFieldsListNeFieldListParserRuleCall_1_1_0 = (RuleCall)cNeFieldsListAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Constructor:
		//	name=ConstructorName ('{' neFieldsList=NeFieldList '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ConstructorName ('{' neFieldsList=NeFieldList '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ConstructorName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ConstructorName
		public RuleCall getNameConstructorNameParserRuleCall_0_0() { return cNameConstructorNameParserRuleCall_0_0; }
		
		//('{' neFieldsList=NeFieldList '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//neFieldsList=NeFieldList
		public Assignment getNeFieldsListAssignment_1_1() { return cNeFieldsListAssignment_1_1; }
		
		//NeFieldList
		public RuleCall getNeFieldsListNeFieldListParserRuleCall_1_1_0() { return cNeFieldsListNeFieldListParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class NeFieldListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeFieldList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldsFieldsParserRuleCall_0_0 = (RuleCall)cFieldsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsFieldsParserRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//NeFieldList:
		//	fields+=Fields (';' fields+=Fields)*;
		@Override public ParserRule getRule() { return rule; }
		
		//fields+=Fields (';' fields+=Fields)*
		public Group getGroup() { return cGroup; }
		
		//fields+=Fields
		public Assignment getFieldsAssignment_0() { return cFieldsAssignment_0; }
		
		//Fields
		public RuleCall getFieldsFieldsParserRuleCall_0_0() { return cFieldsFieldsParserRuleCall_0_0; }
		
		//(';' fields+=Fields)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//fields+=Fields
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }
		
		//Fields
		public RuleCall getFieldsFieldsParserRuleCall_1_1_0() { return cFieldsFieldsParserRuleCall_1_1_0; }
	}
	public class FieldsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Fields");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNeFieldNameListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNeFieldNameListNeFieldNameListParserRuleCall_0_0 = (RuleCall)cNeFieldNameListAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		
		//Fields:
		//	neFieldNameList=NeFieldNameList '::' typeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//neFieldNameList=NeFieldNameList '::' typeName=TypeName
		public Group getGroup() { return cGroup; }
		
		//neFieldNameList=NeFieldNameList
		public Assignment getNeFieldNameListAssignment_0() { return cNeFieldNameListAssignment_0; }
		
		//NeFieldNameList
		public RuleCall getNeFieldNameListNeFieldNameListParserRuleCall_0_0() { return cNeFieldNameListNeFieldNameListParserRuleCall_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_2_0() { return cTypeNameTypeNameParserRuleCall_2_0; }
	}
	public class NeFieldNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeFieldNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldNamesFieldNameParserRuleCall_0_0 = (RuleCall)cFieldNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldNamesFieldNameParserRuleCall_1_1_0 = (RuleCall)cFieldNamesAssignment_1_1.eContents().get(0);
		
		//NeFieldNameList:
		//	fieldNames+=FieldName (',' fieldNames+=FieldName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//fieldNames+=FieldName (',' fieldNames+=FieldName)*
		public Group getGroup() { return cGroup; }
		
		//fieldNames+=FieldName
		public Assignment getFieldNamesAssignment_0() { return cFieldNamesAssignment_0; }
		
		//FieldName
		public RuleCall getFieldNamesFieldNameParserRuleCall_0_0() { return cFieldNamesFieldNameParserRuleCall_0_0; }
		
		//(',' fieldNames+=FieldName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//fieldNames+=FieldName
		public Assignment getFieldNamesAssignment_1_1() { return cFieldNamesAssignment_1_1; }
		
		//FieldName
		public RuleCall getFieldNamesFieldNameParserRuleCall_1_1_0() { return cFieldNamesFieldNameParserRuleCall_1_1_0; }
	}
	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.FieldName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSMALLIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FieldName:
		//	name=SMALLID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SMALLID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SMALLID
		public RuleCall getNameSMALLIDTerminalRuleCall_0() { return cNameSMALLIDTerminalRuleCall_0; }
	}
	public class ExitDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ExitDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExitEXITKeyword_0_0 = (Keyword)cExitAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNeTypeNameListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNeTypeNameListNeTypeNameListParserRuleCall_1_1_0 = (RuleCall)cNeTypeNameListAssignment_1_1.eContents().get(0);
		
		//ExitDecl:
		//	exit='EXIT' ('::' neTypeNameList=NeTypeNameList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//exit='EXIT' ('::' neTypeNameList=NeTypeNameList)?
		public Group getGroup() { return cGroup; }
		
		//exit='EXIT'
		public Assignment getExitAssignment_0() { return cExitAssignment_0; }
		
		//'EXIT'
		public Keyword getExitEXITKeyword_0_0() { return cExitEXITKeyword_0_0; }
		
		//('::' neTypeNameList=NeTypeNameList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//neTypeNameList=NeTypeNameList
		public Assignment getNeTypeNameListAssignment_1_1() { return cNeTypeNameListAssignment_1_1; }
		
		//NeTypeNameList
		public RuleCall getNeTypeNameListNeTypeNameListParserRuleCall_1_1_0() { return cNeTypeNameListNeTypeNameListParserRuleCall_1_1_0; }
	}
	public class ModelNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ModelName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ModelName:
		//	name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAPSID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_0() { return cNameCAPSIDTerminalRuleCall_0; }
	}
	public class ConnectionItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ConnectionItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectionOutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectionInParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEncodingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDecodingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ConnectionItem:
		//	ConnectionOut
		//	| ConnectionIn
		//	| Encoding
		//	| Decoding;
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectionOut | ConnectionIn | Encoding | Decoding
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConnectionOut
		public RuleCall getConnectionOutParserRuleCall_0() { return cConnectionOutParserRuleCall_0; }
		
		//ConnectionIn
		public RuleCall getConnectionInParserRuleCall_1() { return cConnectionInParserRuleCall_1; }
		
		//Encoding
		public RuleCall getEncodingParserRuleCall_2() { return cEncodingParserRuleCall_2; }
		
		//Decoding
		public RuleCall getDecodingParserRuleCall_3() { return cDecodingParserRuleCall_3; }
	}
	public class ConnectionOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ConnectionOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHANKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cChannelsDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChannelsDeclChannelsDeclParserRuleCall_2_0 = (RuleCall)cChannelsDeclAssignment_2.eContents().get(0);
		private final Keyword cHOSTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHostNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHostNameHostNameParserRuleCall_4_0 = (RuleCall)cHostNameAssignment_4.eContents().get(0);
		private final Keyword cPORTKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortNumberAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortNumberPortNumberParserRuleCall_6_0 = (RuleCall)cPortNumberAssignment_6.eContents().get(0);
		
		//ConnectionOut:
		//	'CHAN' 'OUT' channelsDecl=ChannelsDecl 'HOST' hostName=HostName 'PORT' portNumber=PortNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//'CHAN' 'OUT' channelsDecl=ChannelsDecl 'HOST' hostName=HostName 'PORT' portNumber=PortNumber
		public Group getGroup() { return cGroup; }
		
		//'CHAN'
		public Keyword getCHANKeyword_0() { return cCHANKeyword_0; }
		
		//'OUT'
		public Keyword getOUTKeyword_1() { return cOUTKeyword_1; }
		
		//channelsDecl=ChannelsDecl
		public Assignment getChannelsDeclAssignment_2() { return cChannelsDeclAssignment_2; }
		
		//ChannelsDecl
		public RuleCall getChannelsDeclChannelsDeclParserRuleCall_2_0() { return cChannelsDeclChannelsDeclParserRuleCall_2_0; }
		
		//'HOST'
		public Keyword getHOSTKeyword_3() { return cHOSTKeyword_3; }
		
		//hostName=HostName
		public Assignment getHostNameAssignment_4() { return cHostNameAssignment_4; }
		
		//HostName
		public RuleCall getHostNameHostNameParserRuleCall_4_0() { return cHostNameHostNameParserRuleCall_4_0; }
		
		//'PORT'
		public Keyword getPORTKeyword_5() { return cPORTKeyword_5; }
		
		//portNumber=PortNumber
		public Assignment getPortNumberAssignment_6() { return cPortNumberAssignment_6; }
		
		//PortNumber
		public RuleCall getPortNumberPortNumberParserRuleCall_6_0() { return cPortNumberPortNumberParserRuleCall_6_0; }
	}
	public class ConnectionInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ConnectionIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHANKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cChannelsDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChannelsDeclChannelsDeclParserRuleCall_2_0 = (RuleCall)cChannelsDeclAssignment_2.eContents().get(0);
		private final Keyword cHOSTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHostNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHostNameHostNameParserRuleCall_4_0 = (RuleCall)cHostNameAssignment_4.eContents().get(0);
		private final Keyword cPORTKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortNumberAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortNumberPortNumberParserRuleCall_6_0 = (RuleCall)cPortNumberAssignment_6.eContents().get(0);
		
		//ConnectionIn:
		//	'CHAN' 'IN' channelsDecl=ChannelsDecl 'HOST' hostName=HostName 'PORT' portNumber=PortNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//'CHAN' 'IN' channelsDecl=ChannelsDecl 'HOST' hostName=HostName 'PORT' portNumber=PortNumber
		public Group getGroup() { return cGroup; }
		
		//'CHAN'
		public Keyword getCHANKeyword_0() { return cCHANKeyword_0; }
		
		//'IN'
		public Keyword getINKeyword_1() { return cINKeyword_1; }
		
		//channelsDecl=ChannelsDecl
		public Assignment getChannelsDeclAssignment_2() { return cChannelsDeclAssignment_2; }
		
		//ChannelsDecl
		public RuleCall getChannelsDeclChannelsDeclParserRuleCall_2_0() { return cChannelsDeclChannelsDeclParserRuleCall_2_0; }
		
		//'HOST'
		public Keyword getHOSTKeyword_3() { return cHOSTKeyword_3; }
		
		//hostName=HostName
		public Assignment getHostNameAssignment_4() { return cHostNameAssignment_4; }
		
		//HostName
		public RuleCall getHostNameHostNameParserRuleCall_4_0() { return cHostNameHostNameParserRuleCall_4_0; }
		
		//'PORT'
		public Keyword getPORTKeyword_5() { return cPORTKeyword_5; }
		
		//portNumber=PortNumber
		public Assignment getPortNumberAssignment_6() { return cPortNumberAssignment_6; }
		
		//PortNumber
		public RuleCall getPortNumberPortNumberParserRuleCall_6_0() { return cPortNumberPortNumberParserRuleCall_6_0; }
	}
	public class EncodingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Encoding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cENCODEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommunicationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommunicationCommunicationParserRuleCall_1_0 = (RuleCall)cCommunicationAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChannelOfferAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChannelOfferChannelOfferParserRuleCall_3_0 = (RuleCall)cChannelOfferAssignment_3.eContents().get(0);
		
		//Encoding:
		//	'ENCODE' communication=Communication '->' channelOffer=ChannelOffer;
		@Override public ParserRule getRule() { return rule; }
		
		//'ENCODE' communication=Communication '->' channelOffer=ChannelOffer
		public Group getGroup() { return cGroup; }
		
		//'ENCODE'
		public Keyword getENCODEKeyword_0() { return cENCODEKeyword_0; }
		
		//communication=Communication
		public Assignment getCommunicationAssignment_1() { return cCommunicationAssignment_1; }
		
		//Communication
		public RuleCall getCommunicationCommunicationParserRuleCall_1_0() { return cCommunicationCommunicationParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//channelOffer=ChannelOffer
		public Assignment getChannelOfferAssignment_3() { return cChannelOfferAssignment_3; }
		
		//ChannelOffer
		public RuleCall getChannelOfferChannelOfferParserRuleCall_3_0() { return cChannelOfferChannelOfferParserRuleCall_3_0; }
	}
	public class DecodingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Decoding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDECODEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommunicationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommunicationCommunicationParserRuleCall_1_0 = (RuleCall)cCommunicationAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChannelOfferAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChannelOfferChannelOfferParserRuleCall_3_0 = (RuleCall)cChannelOfferAssignment_3.eContents().get(0);
		
		//Decoding:
		//	'DECODE' communication=Communication '<-' channelOffer=ChannelOffer;
		@Override public ParserRule getRule() { return rule; }
		
		//'DECODE' communication=Communication '<-' channelOffer=ChannelOffer
		public Group getGroup() { return cGroup; }
		
		//'DECODE'
		public Keyword getDECODEKeyword_0() { return cDECODEKeyword_0; }
		
		//communication=Communication
		public Assignment getCommunicationAssignment_1() { return cCommunicationAssignment_1; }
		
		//Communication
		public RuleCall getCommunicationCommunicationParserRuleCall_1_0() { return cCommunicationCommunicationParserRuleCall_1_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_2() { return cLessThanSignHyphenMinusKeyword_2; }
		
		//channelOffer=ChannelOffer
		public Assignment getChannelOfferAssignment_3() { return cChannelOfferAssignment_3; }
		
		//ChannelOffer
		public RuleCall getChannelOfferChannelOfferParserRuleCall_3_0() { return cChannelOfferChannelOfferParserRuleCall_3_0; }
	}
	public class PortNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.PortNumber");
		private final Assignment cPortNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPortNumberINTTerminalRuleCall_0 = (RuleCall)cPortNumberAssignment.eContents().get(0);
		
		//PortNumber:
		//	portNumber=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//portNumber=INT
		public Assignment getPortNumberAssignment() { return cPortNumberAssignment; }
		
		//INT
		public RuleCall getPortNumberINTTerminalRuleCall_0() { return cPortNumberINTTerminalRuleCall_0; }
	}
	public class HostNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.HostName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//HostName:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class StautNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.StautName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StautName:
		//	name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAPSID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_0() { return cNameCAPSIDTerminalRuleCall_0; }
	}
	public class ChannelDefNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ChannelDefName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ChannelDefName:
		//	name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAPSID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_0() { return cNameCAPSIDTerminalRuleCall_0; }
	}
	public class ProcNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSMALLIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ProcName:
		//	name=SMALLID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SMALLID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SMALLID
		public RuleCall getNameSMALLIDTerminalRuleCall_0() { return cNameSMALLIDTerminalRuleCall_0; }
	}
	public class CnectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.CnectName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CnectName:
		//	name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAPSID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_0() { return cNameCAPSIDTerminalRuleCall_0; }
	}
	public class NeVarsDeclarationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeVarsDeclarationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsDeclarationsVarsDeclarationParserRuleCall_0_0 = (RuleCall)cVarsDeclarationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsDeclarationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsDeclarationsVarsDeclarationParserRuleCall_1_1_0 = (RuleCall)cVarsDeclarationsAssignment_1_1.eContents().get(0);
		
		//NeVarsDeclarationList:
		//	varsDeclarations+=VarsDeclaration (";" varsDeclarations+=VarsDeclaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//varsDeclarations+=VarsDeclaration (";" varsDeclarations+=VarsDeclaration)*
		public Group getGroup() { return cGroup; }
		
		//varsDeclarations+=VarsDeclaration
		public Assignment getVarsDeclarationsAssignment_0() { return cVarsDeclarationsAssignment_0; }
		
		//VarsDeclaration
		public RuleCall getVarsDeclarationsVarsDeclarationParserRuleCall_0_0() { return cVarsDeclarationsVarsDeclarationParserRuleCall_0_0; }
		
		//(";" varsDeclarations+=VarsDeclaration)*
		public Group getGroup_1() { return cGroup_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//varsDeclarations+=VarsDeclaration
		public Assignment getVarsDeclarationsAssignment_1_1() { return cVarsDeclarationsAssignment_1_1; }
		
		//VarsDeclaration
		public RuleCall getVarsDeclarationsVarsDeclarationParserRuleCall_1_1_0() { return cVarsDeclarationsVarsDeclarationParserRuleCall_1_1_0; }
	}
	public class VarsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.VarsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNeVarNameListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNeVarNameListNeVarNameListParserRuleCall_0_0 = (RuleCall)cNeVarNameListAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		
		//VarsDeclaration:
		//	neVarNameList=NeVarNameList "::" typeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//neVarNameList=NeVarNameList "::" typeName=TypeName
		public Group getGroup() { return cGroup; }
		
		//neVarNameList=NeVarNameList
		public Assignment getNeVarNameListAssignment_0() { return cNeVarNameListAssignment_0; }
		
		//NeVarNameList
		public RuleCall getNeVarNameListNeVarNameListParserRuleCall_0_0() { return cNeVarNameListNeVarNameListParserRuleCall_0_0; }
		
		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_2_0() { return cTypeNameTypeNameParserRuleCall_2_0; }
	}
	public class NeVarDeclListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeVarDeclList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsDeclsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsDeclsVarsDeclParserRuleCall_0_0 = (RuleCall)cVarsDeclsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsDeclsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsDeclsVarsDeclParserRuleCall_1_1_0 = (RuleCall)cVarsDeclsAssignment_1_1.eContents().get(0);
		
		//NeVarDeclList:
		//	varsDecls+=VarsDecl (";" varsDecls+=VarsDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//varsDecls+=VarsDecl (";" varsDecls+=VarsDecl)*
		public Group getGroup() { return cGroup; }
		
		//varsDecls+=VarsDecl
		public Assignment getVarsDeclsAssignment_0() { return cVarsDeclsAssignment_0; }
		
		//VarsDecl
		public RuleCall getVarsDeclsVarsDeclParserRuleCall_0_0() { return cVarsDeclsVarsDeclParserRuleCall_0_0; }
		
		//(";" varsDecls+=VarsDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//varsDecls+=VarsDecl
		public Assignment getVarsDeclsAssignment_1_1() { return cVarsDeclsAssignment_1_1; }
		
		//VarsDecl
		public RuleCall getVarsDeclsVarsDeclParserRuleCall_1_1_0() { return cVarsDeclsVarsDeclParserRuleCall_1_1_0; }
	}
	public class VarsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.VarsDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNeVarNameListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNeVarNameListNeVarNameListParserRuleCall_0_0 = (RuleCall)cNeVarNameListAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		
		//VarsDecl:
		//	neVarNameList=NeVarNameList "::" typeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//neVarNameList=NeVarNameList "::" typeName=TypeName
		public Group getGroup() { return cGroup; }
		
		//neVarNameList=NeVarNameList
		public Assignment getNeVarNameListAssignment_0() { return cNeVarNameListAssignment_0; }
		
		//NeVarNameList
		public RuleCall getNeVarNameListNeVarNameListParserRuleCall_0_0() { return cNeVarNameListNeVarNameListParserRuleCall_0_0; }
		
		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_2_0() { return cTypeNameTypeNameParserRuleCall_2_0; }
	}
	public class NeChannelsDeclListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeChannelsDeclList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChannelsDeclsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChannelsDeclsChannelsDeclParserRuleCall_0_0 = (RuleCall)cChannelsDeclsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cChannelsDeclsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChannelsDeclsChannelsDeclParserRuleCall_1_1_0 = (RuleCall)cChannelsDeclsAssignment_1_1.eContents().get(0);
		
		//NeChannelsDeclList:
		//	channelsDecls+=ChannelsDecl (';' channelsDecls+=ChannelsDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//channelsDecls+=ChannelsDecl (';' channelsDecls+=ChannelsDecl)*
		public Group getGroup() { return cGroup; }
		
		//channelsDecls+=ChannelsDecl
		public Assignment getChannelsDeclsAssignment_0() { return cChannelsDeclsAssignment_0; }
		
		//ChannelsDecl
		public RuleCall getChannelsDeclsChannelsDeclParserRuleCall_0_0() { return cChannelsDeclsChannelsDeclParserRuleCall_0_0; }
		
		//(';' channelsDecls+=ChannelsDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//channelsDecls+=ChannelsDecl
		public Assignment getChannelsDeclsAssignment_1_1() { return cChannelsDeclsAssignment_1_1; }
		
		//ChannelsDecl
		public RuleCall getChannelsDeclsChannelsDeclParserRuleCall_1_1_0() { return cChannelsDeclsChannelsDeclParserRuleCall_1_1_0; }
	}
	public class ChannelsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ChannelsDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNeChannelNameListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNeChannelNameListNeChannelNameListParserRuleCall_0_0 = (RuleCall)cNeChannelNameListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNeTypeNameListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNeTypeNameListNeTypeNameListParserRuleCall_1_1_0 = (RuleCall)cNeTypeNameListAssignment_1_1.eContents().get(0);
		
		//ChannelsDecl:
		//	neChannelNameList=NeChannelNameList ('::' neTypeNameList=NeTypeNameList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//neChannelNameList=NeChannelNameList ('::' neTypeNameList=NeTypeNameList)?
		public Group getGroup() { return cGroup; }
		
		//neChannelNameList=NeChannelNameList
		public Assignment getNeChannelNameListAssignment_0() { return cNeChannelNameListAssignment_0; }
		
		//NeChannelNameList
		public RuleCall getNeChannelNameListNeChannelNameListParserRuleCall_0_0() { return cNeChannelNameListNeChannelNameListParserRuleCall_0_0; }
		
		//('::' neTypeNameList=NeTypeNameList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//neTypeNameList=NeTypeNameList
		public Assignment getNeTypeNameListAssignment_1_1() { return cNeTypeNameListAssignment_1_1; }
		
		//NeTypeNameList
		public RuleCall getNeTypeNameListNeTypeNameListParserRuleCall_1_1_0() { return cNeTypeNameListNeTypeNameListParserRuleCall_1_1_0; }
	}
	public class NeTypeNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeTypeNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeNamesTypeNameParserRuleCall_0_0 = (RuleCall)cTypeNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeNamesTypeNameParserRuleCall_1_1_0 = (RuleCall)cTypeNamesAssignment_1_1.eContents().get(0);
		
		//NeTypeNameList:
		//	typeNames+=TypeName ("#" typeNames+=TypeName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//typeNames+=TypeName ("#" typeNames+=TypeName)*
		public Group getGroup() { return cGroup; }
		
		//typeNames+=TypeName
		public Assignment getTypeNamesAssignment_0() { return cTypeNamesAssignment_0; }
		
		//TypeName
		public RuleCall getTypeNamesTypeNameParserRuleCall_0_0() { return cTypeNamesTypeNameParserRuleCall_0_0; }
		
		//("#" typeNames+=TypeName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"#"
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//typeNames+=TypeName
		public Assignment getTypeNamesAssignment_1_1() { return cTypeNamesAssignment_1_1; }
		
		//TypeName
		public RuleCall getTypeNamesTypeNameParserRuleCall_1_1_0() { return cTypeNamesTypeNameParserRuleCall_1_1_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.TypeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TypeName:
		//	name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAPSID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_0() { return cNameCAPSIDTerminalRuleCall_0; }
	}
	public class NeChannelNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeChannelNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChannelNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChannelNamesChannelNameParserRuleCall_0_0 = (RuleCall)cChannelNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cChannelNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChannelNamesChannelNameParserRuleCall_1_1_0 = (RuleCall)cChannelNamesAssignment_1_1.eContents().get(0);
		
		//NeChannelNameList:
		//	channelNames+=ChannelName ("," channelNames+=ChannelName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//channelNames+=ChannelName ("," channelNames+=ChannelName)*
		public Group getGroup() { return cGroup; }
		
		//channelNames+=ChannelName
		public Assignment getChannelNamesAssignment_0() { return cChannelNamesAssignment_0; }
		
		//ChannelName
		public RuleCall getChannelNamesChannelNameParserRuleCall_0_0() { return cChannelNamesChannelNameParserRuleCall_0_0; }
		
		//("," channelNames+=ChannelName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//channelNames+=ChannelName
		public Assignment getChannelNamesAssignment_1_1() { return cChannelNamesAssignment_1_1; }
		
		//ChannelName
		public RuleCall getChannelNamesChannelNameParserRuleCall_1_1_0() { return cChannelNamesChannelNameParserRuleCall_1_1_0; }
	}
	public class NeIdNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeIdNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdNamesIdNameParserRuleCall_0_0 = (RuleCall)cIdNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdNamesIdNameParserRuleCall_1_1_0 = (RuleCall)cIdNamesAssignment_1_1.eContents().get(0);
		
		//NeIdNameList:
		//	idNames+=IdName ("," idNames+=IdName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//idNames+=IdName ("," idNames+=IdName)*
		public Group getGroup() { return cGroup; }
		
		//idNames+=IdName
		public Assignment getIdNamesAssignment_0() { return cIdNamesAssignment_0; }
		
		//IdName
		public RuleCall getIdNamesIdNameParserRuleCall_0_0() { return cIdNamesIdNameParserRuleCall_0_0; }
		
		//("," idNames+=IdName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//idNames+=IdName
		public Assignment getIdNamesAssignment_1_1() { return cIdNamesAssignment_1_1; }
		
		//IdName
		public RuleCall getIdNamesIdNameParserRuleCall_1_1_0() { return cIdNamesIdNameParserRuleCall_1_1_0; }
	}
	public class IdNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.IdName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameSMALLIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IdName:
		//	name=SMALLID
		//	| name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SMALLID | name=CAPSID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=SMALLID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SMALLID
		public RuleCall getNameSMALLIDTerminalRuleCall_0_0() { return cNameSMALLIDTerminalRuleCall_0_0; }
		
		//name=CAPSID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_1_0() { return cNameCAPSIDTerminalRuleCall_1_0; }
	}
	public class ChannelNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ChannelName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ChannelName:
		//	name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAPSID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_0() { return cNameCAPSIDTerminalRuleCall_0; }
	}
	public class NeVarNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeVarNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNamesVarNameParserRuleCall_0_0 = (RuleCall)cVarNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarNamesVarNameParserRuleCall_1_1_0 = (RuleCall)cVarNamesAssignment_1_1.eContents().get(0);
		
		//NeVarNameList:
		//	varNames+=VarName ("," varNames+=VarName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//varNames+=VarName ("," varNames+=VarName)*
		public Group getGroup() { return cGroup; }
		
		//varNames+=VarName
		public Assignment getVarNamesAssignment_0() { return cVarNamesAssignment_0; }
		
		//VarName
		public RuleCall getVarNamesVarNameParserRuleCall_0_0() { return cVarNamesVarNameParserRuleCall_0_0; }
		
		//("," varNames+=VarName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//varNames+=VarName
		public Assignment getVarNamesAssignment_1_1() { return cVarNamesAssignment_1_1; }
		
		//VarName
		public RuleCall getVarNamesVarNameParserRuleCall_1_1_0() { return cVarNamesVarNameParserRuleCall_1_1_0; }
	}
	public class VarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.VarName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSMALLIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VarName:
		//	name=SMALLID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SMALLID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SMALLID
		public RuleCall getNameSMALLIDTerminalRuleCall_0() { return cNameSMALLIDTerminalRuleCall_0; }
	}
	public class ProcessBehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviour");
		private final RuleCall cProcessBehaviourLevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ProcessBehaviour:
		//	ProcessBehaviourLevel1;
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessBehaviourLevel1
		public RuleCall getProcessBehaviourLevel1ParserRuleCall() { return cProcessBehaviourLevel1ParserRuleCall; }
	}
	public class ProcessBehaviourLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProcessBehaviourLevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cProcessBehaviourEnableLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightProcessBehaviourLevel2ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cProcessBehaviourEnableAcceptLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cACCEPTKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1_3 = (Alternatives)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_1_3_0 = (Group)cAlternatives_1_1_3.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1_3_0_0 = (Keyword)cGroup_1_1_3_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_3_0_1 = (Alternatives)cGroup_1_1_3_0.eContents().get(1);
		private final Assignment cVarDeclsAssignment_1_1_3_0_1_0 = (Assignment)cAlternatives_1_1_3_0_1.eContents().get(0);
		private final RuleCall cVarDeclsVarDeclParserRuleCall_1_1_3_0_1_0_0 = (RuleCall)cVarDeclsAssignment_1_1_3_0_1_0.eContents().get(0);
		private final Assignment cVarNamesAssignment_1_1_3_0_1_1 = (Assignment)cAlternatives_1_1_3_0_1.eContents().get(1);
		private final RuleCall cVarNamesVarNameParserRuleCall_1_1_3_0_1_1_0 = (RuleCall)cVarNamesAssignment_1_1_3_0_1_1.eContents().get(0);
		private final Group cGroup_1_1_3_1 = (Group)cAlternatives_1_1_3.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_1_3_1_0 = (Keyword)cGroup_1_1_3_1.eContents().get(0);
		private final Assignment cValExprsAssignment_1_1_3_1_1 = (Assignment)cGroup_1_1_3_1.eContents().get(1);
		private final RuleCall cValExprsValExprParserRuleCall_1_1_3_1_1_0 = (RuleCall)cValExprsAssignment_1_1_3_1_1.eContents().get(0);
		private final Keyword cINKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cRightAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final RuleCall cRightProcessBehaviourLevel2ParserRuleCall_1_1_5_0 = (RuleCall)cRightAssignment_1_1_5.eContents().get(0);
		private final Keyword cNIKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cProcessBehaviourDisableLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftSquareBracketGreaterThanSignGreaterThanSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightProcessBehaviourLevel2ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cProcessBehaviourInterruptLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftSquareBracketGreaterThanSignLessThanSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightProcessBehaviourLevel2ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//ProcessBehaviourLevel1 ProcessBehaviour:
		//	ProcessBehaviourLevel2 ({ProcessBehaviourEnable.left=current} '>>>' right=ProcessBehaviourLevel2 |
		//	{ProcessBehaviourEnableAccept.left=current} '>>>' 'ACCEPT' ('?' (varDecls+=VarDecl | varNames+=VarName) | '!'
		//	valExprs+=ValExpr)* 'IN' right=ProcessBehaviourLevel2 'NI' | {ProcessBehaviourDisable.left=current} '[>>'
		//	right=ProcessBehaviourLevel2 | {ProcessBehaviourInterrupt.left=current} '[><' right=ProcessBehaviourLevel2)*
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessBehaviourLevel2 ({ProcessBehaviourEnable.left=current} '>>>' right=ProcessBehaviourLevel2 |
		//{ProcessBehaviourEnableAccept.left=current} '>>>' 'ACCEPT' ('?' (varDecls+=VarDecl | varNames+=VarName) | '!'
		//valExprs+=ValExpr)* 'IN' right=ProcessBehaviourLevel2 'NI' | {ProcessBehaviourDisable.left=current} '[>>'
		//right=ProcessBehaviourLevel2 | {ProcessBehaviourInterrupt.left=current} '[><' right=ProcessBehaviourLevel2)*
		public Group getGroup() { return cGroup; }
		
		//ProcessBehaviourLevel2
		public RuleCall getProcessBehaviourLevel2ParserRuleCall_0() { return cProcessBehaviourLevel2ParserRuleCall_0; }
		
		//({ProcessBehaviourEnable.left=current} '>>>' right=ProcessBehaviourLevel2 | {ProcessBehaviourEnableAccept.left=current}
		//'>>>' 'ACCEPT' ('?' (varDecls+=VarDecl | varNames+=VarName) | '!' valExprs+=ValExpr)* 'IN'
		//right=ProcessBehaviourLevel2 'NI' | {ProcessBehaviourDisable.left=current} '[>>' right=ProcessBehaviourLevel2 |
		//{ProcessBehaviourInterrupt.left=current} '[><' right=ProcessBehaviourLevel2)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ProcessBehaviourEnable.left=current} '>>>' right=ProcessBehaviourLevel2
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ProcessBehaviourEnable.left=current}
		public Action getProcessBehaviourEnableLeftAction_1_0_0() { return cProcessBehaviourEnableLeftAction_1_0_0; }
		
		//'>>>'
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_1() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_1; }
		
		//right=ProcessBehaviourLevel2
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ProcessBehaviourLevel2
		public RuleCall getRightProcessBehaviourLevel2ParserRuleCall_1_0_2_0() { return cRightProcessBehaviourLevel2ParserRuleCall_1_0_2_0; }
		
		//{ProcessBehaviourEnableAccept.left=current} '>>>' 'ACCEPT' ('?' (varDecls+=VarDecl | varNames+=VarName) | '!'
		//valExprs+=ValExpr)* 'IN' right=ProcessBehaviourLevel2 'NI'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ProcessBehaviourEnableAccept.left=current}
		public Action getProcessBehaviourEnableAcceptLeftAction_1_1_0() { return cProcessBehaviourEnableAcceptLeftAction_1_1_0; }
		
		//'>>>'
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1; }
		
		//'ACCEPT'
		public Keyword getACCEPTKeyword_1_1_2() { return cACCEPTKeyword_1_1_2; }
		
		//('?' (varDecls+=VarDecl | varNames+=VarName) | '!' valExprs+=ValExpr)*
		public Alternatives getAlternatives_1_1_3() { return cAlternatives_1_1_3; }
		
		//'?' (varDecls+=VarDecl | varNames+=VarName)
		public Group getGroup_1_1_3_0() { return cGroup_1_1_3_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1_3_0_0() { return cQuestionMarkKeyword_1_1_3_0_0; }
		
		//(varDecls+=VarDecl | varNames+=VarName)
		public Alternatives getAlternatives_1_1_3_0_1() { return cAlternatives_1_1_3_0_1; }
		
		//varDecls+=VarDecl
		public Assignment getVarDeclsAssignment_1_1_3_0_1_0() { return cVarDeclsAssignment_1_1_3_0_1_0; }
		
		//VarDecl
		public RuleCall getVarDeclsVarDeclParserRuleCall_1_1_3_0_1_0_0() { return cVarDeclsVarDeclParserRuleCall_1_1_3_0_1_0_0; }
		
		//varNames+=VarName
		public Assignment getVarNamesAssignment_1_1_3_0_1_1() { return cVarNamesAssignment_1_1_3_0_1_1; }
		
		//VarName
		public RuleCall getVarNamesVarNameParserRuleCall_1_1_3_0_1_1_0() { return cVarNamesVarNameParserRuleCall_1_1_3_0_1_1_0; }
		
		//'!' valExprs+=ValExpr
		public Group getGroup_1_1_3_1() { return cGroup_1_1_3_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1_3_1_0() { return cExclamationMarkKeyword_1_1_3_1_0; }
		
		//valExprs+=ValExpr
		public Assignment getValExprsAssignment_1_1_3_1_1() { return cValExprsAssignment_1_1_3_1_1; }
		
		//ValExpr
		public RuleCall getValExprsValExprParserRuleCall_1_1_3_1_1_0() { return cValExprsValExprParserRuleCall_1_1_3_1_1_0; }
		
		//'IN'
		public Keyword getINKeyword_1_1_4() { return cINKeyword_1_1_4; }
		
		//right=ProcessBehaviourLevel2
		public Assignment getRightAssignment_1_1_5() { return cRightAssignment_1_1_5; }
		
		//ProcessBehaviourLevel2
		public RuleCall getRightProcessBehaviourLevel2ParserRuleCall_1_1_5_0() { return cRightProcessBehaviourLevel2ParserRuleCall_1_1_5_0; }
		
		//'NI'
		public Keyword getNIKeyword_1_1_6() { return cNIKeyword_1_1_6; }
		
		//{ProcessBehaviourDisable.left=current} '[>>' right=ProcessBehaviourLevel2
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ProcessBehaviourDisable.left=current}
		public Action getProcessBehaviourDisableLeftAction_1_2_0() { return cProcessBehaviourDisableLeftAction_1_2_0; }
		
		//'[>>'
		public Keyword getLeftSquareBracketGreaterThanSignGreaterThanSignKeyword_1_2_1() { return cLeftSquareBracketGreaterThanSignGreaterThanSignKeyword_1_2_1; }
		
		//right=ProcessBehaviourLevel2
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ProcessBehaviourLevel2
		public RuleCall getRightProcessBehaviourLevel2ParserRuleCall_1_2_2_0() { return cRightProcessBehaviourLevel2ParserRuleCall_1_2_2_0; }
		
		//{ProcessBehaviourInterrupt.left=current} '[><' right=ProcessBehaviourLevel2
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{ProcessBehaviourInterrupt.left=current}
		public Action getProcessBehaviourInterruptLeftAction_1_3_0() { return cProcessBehaviourInterruptLeftAction_1_3_0; }
		
		//'[><'
		public Keyword getLeftSquareBracketGreaterThanSignLessThanSignKeyword_1_3_1() { return cLeftSquareBracketGreaterThanSignLessThanSignKeyword_1_3_1; }
		
		//right=ProcessBehaviourLevel2
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ProcessBehaviourLevel2
		public RuleCall getRightProcessBehaviourLevel2ParserRuleCall_1_3_2_0() { return cRightProcessBehaviourLevel2ParserRuleCall_1_3_2_0; }
	}
	public class ProcessBehaviourLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourLevel2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProcessBehaviourLevel3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cProcessBehaviourSynchronizedLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightProcessBehaviourLevel3ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cProcessBehaviourParallelLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineVerticalLineKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightProcessBehaviourLevel3ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cProcessBehaviourSynchronizeChannelsLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cSynchronizedChannelsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSynchronizedChannelsSynchronizedChannelsParserRuleCall_1_2_1_0 = (RuleCall)cSynchronizedChannelsAssignment_1_2_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightProcessBehaviourLevel3ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		//ProcessBehaviourLevel2 ProcessBehaviour:
		//	ProcessBehaviourLevel3 ({ProcessBehaviourSynchronized.left=current} '||' right=ProcessBehaviourLevel3 |
		//	{ProcessBehaviourParallel.left=current} '|||' right=ProcessBehaviourLevel3 |
		//	{ProcessBehaviourSynchronizeChannels.left=current} synchronizedChannels=SynchronizedChannels
		//	right=ProcessBehaviourLevel3)*
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessBehaviourLevel3 ({ProcessBehaviourSynchronized.left=current} '||' right=ProcessBehaviourLevel3 |
		//{ProcessBehaviourParallel.left=current} '|||' right=ProcessBehaviourLevel3 |
		//{ProcessBehaviourSynchronizeChannels.left=current} synchronizedChannels=SynchronizedChannels
		//right=ProcessBehaviourLevel3)*
		public Group getGroup() { return cGroup; }
		
		//ProcessBehaviourLevel3
		public RuleCall getProcessBehaviourLevel3ParserRuleCall_0() { return cProcessBehaviourLevel3ParserRuleCall_0; }
		
		//({ProcessBehaviourSynchronized.left=current} '||' right=ProcessBehaviourLevel3 | {ProcessBehaviourParallel.left=current}
		//'|||' right=ProcessBehaviourLevel3 | {ProcessBehaviourSynchronizeChannels.left=current}
		//synchronizedChannels=SynchronizedChannels right=ProcessBehaviourLevel3)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ProcessBehaviourSynchronized.left=current} '||' right=ProcessBehaviourLevel3
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ProcessBehaviourSynchronized.left=current}
		public Action getProcessBehaviourSynchronizedLeftAction_1_0_0() { return cProcessBehaviourSynchronizedLeftAction_1_0_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1() { return cVerticalLineVerticalLineKeyword_1_0_1; }
		
		//right=ProcessBehaviourLevel3
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ProcessBehaviourLevel3
		public RuleCall getRightProcessBehaviourLevel3ParserRuleCall_1_0_2_0() { return cRightProcessBehaviourLevel3ParserRuleCall_1_0_2_0; }
		
		//{ProcessBehaviourParallel.left=current} '|||' right=ProcessBehaviourLevel3
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ProcessBehaviourParallel.left=current}
		public Action getProcessBehaviourParallelLeftAction_1_1_0() { return cProcessBehaviourParallelLeftAction_1_1_0; }
		
		//'|||'
		public Keyword getVerticalLineVerticalLineVerticalLineKeyword_1_1_1() { return cVerticalLineVerticalLineVerticalLineKeyword_1_1_1; }
		
		//right=ProcessBehaviourLevel3
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ProcessBehaviourLevel3
		public RuleCall getRightProcessBehaviourLevel3ParserRuleCall_1_1_2_0() { return cRightProcessBehaviourLevel3ParserRuleCall_1_1_2_0; }
		
		//{ProcessBehaviourSynchronizeChannels.left=current} synchronizedChannels=SynchronizedChannels
		//right=ProcessBehaviourLevel3
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ProcessBehaviourSynchronizeChannels.left=current}
		public Action getProcessBehaviourSynchronizeChannelsLeftAction_1_2_0() { return cProcessBehaviourSynchronizeChannelsLeftAction_1_2_0; }
		
		//synchronizedChannels=SynchronizedChannels
		public Assignment getSynchronizedChannelsAssignment_1_2_1() { return cSynchronizedChannelsAssignment_1_2_1; }
		
		//SynchronizedChannels
		public RuleCall getSynchronizedChannelsSynchronizedChannelsParserRuleCall_1_2_1_0() { return cSynchronizedChannelsSynchronizedChannelsParserRuleCall_1_2_1_0; }
		
		//right=ProcessBehaviourLevel3
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ProcessBehaviourLevel3
		public RuleCall getRightProcessBehaviourLevel3ParserRuleCall_1_2_2_0() { return cRightProcessBehaviourLevel3ParserRuleCall_1_2_2_0; }
	}
	public class ProcessBehaviourLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourLevel3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProcessBehaviourLevel4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cProcessBehaviourChoiceLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNumberSignNumberSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightProcessBehaviourLevel4ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ProcessBehaviourLevel3 ProcessBehaviour:
		//	ProcessBehaviourLevel4 ({ProcessBehaviourChoice.left=current} '##' right=ProcessBehaviourLevel4)*
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessBehaviourLevel4 ({ProcessBehaviourChoice.left=current} '##' right=ProcessBehaviourLevel4)*
		public Group getGroup() { return cGroup; }
		
		//ProcessBehaviourLevel4
		public RuleCall getProcessBehaviourLevel4ParserRuleCall_0() { return cProcessBehaviourLevel4ParserRuleCall_0; }
		
		//({ProcessBehaviourChoice.left=current} '##' right=ProcessBehaviourLevel4)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ProcessBehaviourChoice.left=current}
		public Action getProcessBehaviourChoiceLeftAction_1_0() { return cProcessBehaviourChoiceLeftAction_1_0; }
		
		//'##'
		public Keyword getNumberSignNumberSignKeyword_1_1() { return cNumberSignNumberSignKeyword_1_1; }
		
		//right=ProcessBehaviourLevel4
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ProcessBehaviourLevel4
		public RuleCall getRightProcessBehaviourLevel4ParserRuleCall_1_2_0() { return cRightProcessBehaviourLevel4ParserRuleCall_1_2_0; }
	}
	public class ProcessBehaviourLevel4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourLevel4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessBehaviourGuardedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessBehaviourStopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProcessBehaviourSequenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProcCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProcessBehaviourLetParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProcessBehaviourHideParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProcessBehaviourBracketParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ProcessBehaviourLevel4 ProcessBehaviour:
		//	ProcessBehaviourGuarded
		//	| ProcessBehaviourStop
		//	| ProcessBehaviourSequence
		//	| ProcCall
		//	| ProcessBehaviourLet
		//	| ProcessBehaviourHide
		//	| ProcessBehaviourBracket
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessBehaviourGuarded | ProcessBehaviourStop | ProcessBehaviourSequence | ProcCall | ProcessBehaviourLet |
		//ProcessBehaviourHide | ProcessBehaviourBracket
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProcessBehaviourGuarded
		public RuleCall getProcessBehaviourGuardedParserRuleCall_0() { return cProcessBehaviourGuardedParserRuleCall_0; }
		
		//ProcessBehaviourStop
		public RuleCall getProcessBehaviourStopParserRuleCall_1() { return cProcessBehaviourStopParserRuleCall_1; }
		
		//ProcessBehaviourSequence
		public RuleCall getProcessBehaviourSequenceParserRuleCall_2() { return cProcessBehaviourSequenceParserRuleCall_2; }
		
		//ProcCall
		public RuleCall getProcCallParserRuleCall_3() { return cProcCallParserRuleCall_3; }
		
		//ProcessBehaviourLet
		public RuleCall getProcessBehaviourLetParserRuleCall_4() { return cProcessBehaviourLetParserRuleCall_4; }
		
		//ProcessBehaviourHide
		public RuleCall getProcessBehaviourHideParserRuleCall_5() { return cProcessBehaviourHideParserRuleCall_5; }
		
		//ProcessBehaviourBracket
		public RuleCall getProcessBehaviourBracketParserRuleCall_6() { return cProcessBehaviourBracketParserRuleCall_6; }
	}
	public class ProcCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameProcNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeChannelNameListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeChannelNameListNeChannelNameListParserRuleCall_2_0 = (RuleCall)cNeChannelNameListAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNeValExprListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNeValExprListNeValExprListParserRuleCall_5_0 = (RuleCall)cNeValExprListAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProcCall:
		//	name=ProcName '[' neChannelNameList=NeChannelNameList? ']' '(' neValExprList=NeValExprList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ProcName '[' neChannelNameList=NeChannelNameList? ']' '(' neValExprList=NeValExprList? ')'
		public Group getGroup() { return cGroup; }
		
		//name=ProcName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ProcName
		public RuleCall getNameProcNameParserRuleCall_0_0() { return cNameProcNameParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//neChannelNameList=NeChannelNameList?
		public Assignment getNeChannelNameListAssignment_2() { return cNeChannelNameListAssignment_2; }
		
		//NeChannelNameList
		public RuleCall getNeChannelNameListNeChannelNameListParserRuleCall_2_0() { return cNeChannelNameListNeChannelNameListParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//neValExprList=NeValExprList?
		public Assignment getNeValExprListAssignment_5() { return cNeValExprListAssignment_5; }
		
		//NeValExprList
		public RuleCall getNeValExprListNeValExprListParserRuleCall_5_0() { return cNeValExprListNeValExprListParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class NeValExprListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.NeValExprList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValExprsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValExprsValExprParserRuleCall_0_0 = (RuleCall)cValExprsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValExprsValExprParserRuleCall_1_1_0 = (RuleCall)cValExprsAssignment_1_1.eContents().get(0);
		
		//NeValExprList:
		//	valExprs+=ValExpr (',' valExprs+=ValExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//valExprs+=ValExpr (',' valExprs+=ValExpr)*
		public Group getGroup() { return cGroup; }
		
		//valExprs+=ValExpr
		public Assignment getValExprsAssignment_0() { return cValExprsAssignment_0; }
		
		//ValExpr
		public RuleCall getValExprsValExprParserRuleCall_0_0() { return cValExprsValExprParserRuleCall_0_0; }
		
		//(',' valExprs+=ValExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//valExprs+=ValExpr
		public Assignment getValExprsAssignment_1_1() { return cValExprsAssignment_1_1; }
		
		//ValExpr
		public RuleCall getValExprsValExprParserRuleCall_1_1_0() { return cValExprsValExprParserRuleCall_1_1_0; }
	}
	public class ProcessBehaviourBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubProcessBehaviourLevel1ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ProcessBehaviourBracket:
		//	'(' sub=ProcessBehaviourLevel1 ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' sub=ProcessBehaviourLevel1 ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=ProcessBehaviourLevel1
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ProcessBehaviourLevel1
		public RuleCall getSubProcessBehaviourLevel1ParserRuleCall_1_0() { return cSubProcessBehaviourLevel1ParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ProcessBehaviourHideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourHide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHIDEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeChannelsDeclListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeChannelsDeclListNeChannelsDeclListParserRuleCall_2_0 = (RuleCall)cNeChannelsDeclListAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSubAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubProcessBehaviourLevel1ParserRuleCall_5_0 = (RuleCall)cSubAssignment_5.eContents().get(0);
		private final Keyword cNIKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProcessBehaviourHide:
		//	'HIDE' '[' neChannelsDeclList=NeChannelsDeclList? ']' 'IN' sub=ProcessBehaviourLevel1 'NI';
		@Override public ParserRule getRule() { return rule; }
		
		//'HIDE' '[' neChannelsDeclList=NeChannelsDeclList? ']' 'IN' sub=ProcessBehaviourLevel1 'NI'
		public Group getGroup() { return cGroup; }
		
		//'HIDE'
		public Keyword getHIDEKeyword_0() { return cHIDEKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//neChannelsDeclList=NeChannelsDeclList?
		public Assignment getNeChannelsDeclListAssignment_2() { return cNeChannelsDeclListAssignment_2; }
		
		//NeChannelsDeclList
		public RuleCall getNeChannelsDeclListNeChannelsDeclListParserRuleCall_2_0() { return cNeChannelsDeclListNeChannelsDeclListParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'IN'
		public Keyword getINKeyword_4() { return cINKeyword_4; }
		
		//sub=ProcessBehaviourLevel1
		public Assignment getSubAssignment_5() { return cSubAssignment_5; }
		
		//ProcessBehaviourLevel1
		public RuleCall getSubProcessBehaviourLevel1ParserRuleCall_5_0() { return cSubProcessBehaviourLevel1ParserRuleCall_5_0; }
		
		//'NI'
		public Keyword getNIKeyword_6() { return cNIKeyword_6; }
	}
	public class ProcessBehaviourLetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourLet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_1_0 = (RuleCall)cAssignmentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_2_1_0 = (RuleCall)cAssignmentsAssignment_2_1.eContents().get(0);
		private final Keyword cINKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSubAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubProcessBehaviourLevel1ParserRuleCall_4_0 = (RuleCall)cSubAssignment_4.eContents().get(0);
		private final Keyword cNIKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ProcessBehaviourLet:
		//	'LET' assignments+=Assignment (';' assignments+=Assignment)* 'IN' sub=ProcessBehaviourLevel1 'NI';
		@Override public ParserRule getRule() { return rule; }
		
		//'LET' assignments+=Assignment (';' assignments+=Assignment)* 'IN' sub=ProcessBehaviourLevel1 'NI'
		public Group getGroup() { return cGroup; }
		
		//'LET'
		public Keyword getLETKeyword_0() { return cLETKeyword_0; }
		
		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_1() { return cAssignmentsAssignment_1; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_1_0() { return cAssignmentsAssignmentParserRuleCall_1_0; }
		
		//(';' assignments+=Assignment)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_2_1() { return cAssignmentsAssignment_2_1; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_2_1_0() { return cAssignmentsAssignmentParserRuleCall_2_1_0; }
		
		//'IN'
		public Keyword getINKeyword_3() { return cINKeyword_3; }
		
		//sub=ProcessBehaviourLevel1
		public Assignment getSubAssignment_4() { return cSubAssignment_4; }
		
		//ProcessBehaviourLevel1
		public RuleCall getSubProcessBehaviourLevel1ParserRuleCall_4_0() { return cSubProcessBehaviourLevel1ParserRuleCall_4_0; }
		
		//'NI'
		public Keyword getNIKeyword_5() { return cNIKeyword_5; }
	}
	public class ProcessBehaviourSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionalCommunicationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionalCommunicationsConditionalCommunicationsParserRuleCall_0_0 = (RuleCall)cConditionalCommunicationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubProcessBehaviourLevel4ParserRuleCall_1_1_0 = (RuleCall)cSubAssignment_1_1.eContents().get(0);
		
		//ProcessBehaviourSequence:
		//	conditionalCommunications=ConditionalCommunications ('>->' sub=ProcessBehaviourLevel4)?;
		@Override public ParserRule getRule() { return rule; }
		
		//conditionalCommunications=ConditionalCommunications ('>->' sub=ProcessBehaviourLevel4)?
		public Group getGroup() { return cGroup; }
		
		//conditionalCommunications=ConditionalCommunications
		public Assignment getConditionalCommunicationsAssignment_0() { return cConditionalCommunicationsAssignment_0; }
		
		//ConditionalCommunications
		public RuleCall getConditionalCommunicationsConditionalCommunicationsParserRuleCall_0_0() { return cConditionalCommunicationsConditionalCommunicationsParserRuleCall_0_0; }
		
		//('>->' sub=ProcessBehaviourLevel4)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'>->'
		public Keyword getGreaterThanSignHyphenMinusGreaterThanSignKeyword_1_0() { return cGreaterThanSignHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//sub=ProcessBehaviourLevel4
		public Assignment getSubAssignment_1_1() { return cSubAssignment_1_1; }
		
		//ProcessBehaviourLevel4
		public RuleCall getSubProcessBehaviourLevel4ParserRuleCall_1_1_0() { return cSubProcessBehaviourLevel4ParserRuleCall_1_1_0; }
	}
	public class ProcessBehaviourGuardedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourGuarded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubProcessBehaviourLevel4ParserRuleCall_2_0 = (RuleCall)cSubAssignment_2.eContents().get(0);
		
		//ProcessBehaviourGuarded:
		//	condition=Condition '=>>' sub=ProcessBehaviourLevel4;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Condition '=>>' sub=ProcessBehaviourLevel4
		public Group getGroup() { return cGroup; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//'=>>'
		public Keyword getEqualsSignGreaterThanSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignGreaterThanSignKeyword_1; }
		
		//sub=ProcessBehaviourLevel4
		public Assignment getSubAssignment_2() { return cSubAssignment_2; }
		
		//ProcessBehaviourLevel4
		public RuleCall getSubProcessBehaviourLevel4ParserRuleCall_2_0() { return cSubProcessBehaviourLevel4ParserRuleCall_2_0; }
	}
	public class ProcessBehaviourStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ProcessBehaviourStop");
		private final Assignment cStopAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cStopSTOPKeyword_0 = (Keyword)cStopAssignment.eContents().get(0);
		
		//ProcessBehaviourStop:
		//	stop='STOP';
		@Override public ParserRule getRule() { return rule; }
		
		//stop='STOP'
		public Assignment getStopAssignment() { return cStopAssignment; }
		
		//'STOP'
		public Keyword getStopSTOPKeyword_0() { return cStopSTOPKeyword_0; }
	}
	public class SynchronizedChannelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.SynchronizedChannels");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNeChannelNameListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNeChannelNameListNeChannelNameListParserRuleCall_1_0 = (RuleCall)cNeChannelNameListAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SynchronizedChannels:
		//	'|[' neChannelNameList=NeChannelNameList ']|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|[' neChannelNameList=NeChannelNameList ']|'
		public Group getGroup() { return cGroup; }
		
		//'|['
		public Keyword getVerticalLineLeftSquareBracketKeyword_0() { return cVerticalLineLeftSquareBracketKeyword_0; }
		
		//neChannelNameList=NeChannelNameList
		public Assignment getNeChannelNameListAssignment_1() { return cNeChannelNameListAssignment_1; }
		
		//NeChannelNameList
		public RuleCall getNeChannelNameListNeChannelNameListParserRuleCall_1_0() { return cNeChannelNameListNeChannelNameListParserRuleCall_1_0; }
		
		//']|'
		public Keyword getRightSquareBracketVerticalLineKeyword_2() { return cRightSquareBracketVerticalLineKeyword_2; }
	}
	public class ConditionalCommunicationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ConditionalCommunications");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionalCommunicationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommunicationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommunicationsCommunicationsParserRuleCall_1_0 = (RuleCall)cCommunicationsAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//ConditionalCommunications:
		//	{ConditionalCommunications} communications+=Communications condition=Condition?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionalCommunications} communications+=Communications condition=Condition?
		public Group getGroup() { return cGroup; }
		
		//{ConditionalCommunications}
		public Action getConditionalCommunicationsAction_0() { return cConditionalCommunicationsAction_0; }
		
		//communications+=Communications
		public Assignment getCommunicationsAssignment_1() { return cCommunicationsAssignment_1; }
		
		//Communications
		public RuleCall getCommunicationsCommunicationsParserRuleCall_1_0() { return cCommunicationsCommunicationsParserRuleCall_1_0; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
	}
	public class CommunicationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Communications");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommunicationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommunicationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommunicationsCommunicationParserRuleCall_1_0 = (RuleCall)cCommunicationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCommunicationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCommunicationsCommunicationParserRuleCall_2_1_0 = (RuleCall)cCommunicationsAssignment_2_1.eContents().get(0);
		
		//Communications:
		//	{Communications} communications+=Communication ('|' communications+=Communication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Communications} communications+=Communication ('|' communications+=Communication)*
		public Group getGroup() { return cGroup; }
		
		//{Communications}
		public Action getCommunicationsAction_0() { return cCommunicationsAction_0; }
		
		//communications+=Communication
		public Assignment getCommunicationsAssignment_1() { return cCommunicationsAssignment_1; }
		
		//Communication
		public RuleCall getCommunicationsCommunicationParserRuleCall_1_0() { return cCommunicationsCommunicationParserRuleCall_1_0; }
		
		//('|' communications+=Communication)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//communications+=Communication
		public Assignment getCommunicationsAssignment_2_1() { return cCommunicationsAssignment_2_1; }
		
		//Communication
		public RuleCall getCommunicationsCommunicationParserRuleCall_2_1_0() { return cCommunicationsCommunicationParserRuleCall_2_1_0; }
	}
	public class CommunicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Communication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommunicationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cChannelNameAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cChannelNameChannelNameParserRuleCall_1_0_0_0 = (RuleCall)cChannelNameAssignment_1_0_0.eContents().get(0);
		private final Assignment cExitAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cExitEXITKeyword_1_0_1_0 = (Keyword)cExitAssignment_1_0_1.eContents().get(0);
		private final Assignment cChannelOffersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChannelOffersChannelOfferParserRuleCall_1_1_0 = (RuleCall)cChannelOffersAssignment_1_1.eContents().get(0);
		
		//Communication:
		//	{Communication} ((channelName=ChannelName | exit='EXIT') channelOffers+=ChannelOffer*);
		@Override public ParserRule getRule() { return rule; }
		
		//{Communication} ((channelName=ChannelName | exit='EXIT') channelOffers+=ChannelOffer*)
		public Group getGroup() { return cGroup; }
		
		//{Communication}
		public Action getCommunicationAction_0() { return cCommunicationAction_0; }
		
		//((channelName=ChannelName | exit='EXIT') channelOffers+=ChannelOffer*)
		public Group getGroup_1() { return cGroup_1; }
		
		//(channelName=ChannelName | exit='EXIT')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//channelName=ChannelName
		public Assignment getChannelNameAssignment_1_0_0() { return cChannelNameAssignment_1_0_0; }
		
		//ChannelName
		public RuleCall getChannelNameChannelNameParserRuleCall_1_0_0_0() { return cChannelNameChannelNameParserRuleCall_1_0_0_0; }
		
		//exit='EXIT'
		public Assignment getExitAssignment_1_0_1() { return cExitAssignment_1_0_1; }
		
		//'EXIT'
		public Keyword getExitEXITKeyword_1_0_1_0() { return cExitEXITKeyword_1_0_1_0; }
		
		//channelOffers+=ChannelOffer*
		public Assignment getChannelOffersAssignment_1_1() { return cChannelOffersAssignment_1_1; }
		
		//ChannelOffer
		public RuleCall getChannelOffersChannelOfferParserRuleCall_1_1_0() { return cChannelOffersChannelOfferParserRuleCall_1_1_0; }
	}
	public class ChannelOfferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ChannelOffer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValExprsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValExprsValExprParserRuleCall_0_1_0 = (RuleCall)cValExprsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cVarDeclsAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cVarDeclsVarDeclParserRuleCall_1_1_0_0 = (RuleCall)cVarDeclsAssignment_1_1_0.eContents().get(0);
		private final Assignment cVarNamesAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cVarNamesVarNameParserRuleCall_1_1_1_0 = (RuleCall)cVarNamesAssignment_1_1_1.eContents().get(0);
		
		//ChannelOffer:
		//	'!' valExprs+=ValExpr | '?' (varDecls+=VarDecl | varNames+=VarName);
		@Override public ParserRule getRule() { return rule; }
		
		//'!' valExprs+=ValExpr | '?' (varDecls+=VarDecl | varNames+=VarName)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'!' valExprs+=ValExpr
		public Group getGroup_0() { return cGroup_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }
		
		//valExprs+=ValExpr
		public Assignment getValExprsAssignment_0_1() { return cValExprsAssignment_0_1; }
		
		//ValExpr
		public RuleCall getValExprsValExprParserRuleCall_0_1_0() { return cValExprsValExprParserRuleCall_0_1_0; }
		
		//'?' (varDecls+=VarDecl | varNames+=VarName)
		public Group getGroup_1() { return cGroup_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }
		
		//(varDecls+=VarDecl | varNames+=VarName)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//varDecls+=VarDecl
		public Assignment getVarDeclsAssignment_1_1_0() { return cVarDeclsAssignment_1_1_0; }
		
		//VarDecl
		public RuleCall getVarDeclsVarDeclParserRuleCall_1_1_0_0() { return cVarDeclsVarDeclParserRuleCall_1_1_0_0; }
		
		//varNames+=VarName
		public Assignment getVarNamesAssignment_1_1_1() { return cVarNamesAssignment_1_1_1; }
		
		//VarName
		public RuleCall getVarNamesVarNameParserRuleCall_1_1_1_0() { return cVarNamesVarNameParserRuleCall_1_1_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValExprValExprParserRuleCall_2_0 = (RuleCall)cValExprAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Condition:
		//	{Condition}
		//	'[[' valExpr=ValExpr ']]';
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} '[[' valExpr=ValExpr ']]'
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_1() { return cLeftSquareBracketLeftSquareBracketKeyword_1; }
		
		//valExpr=ValExpr
		public Assignment getValExprAssignment_2() { return cValExprAssignment_2; }
		
		//ValExpr
		public RuleCall getValExprValExprParserRuleCall_2_0() { return cValExprValExprParserRuleCall_2_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cVarDeclAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cVarDeclVarDeclParserRuleCall_0_0_0 = (RuleCall)cVarDeclAssignment_0_0.eContents().get(0);
		private final Assignment cVarNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cVarNameVarNameParserRuleCall_0_1_0 = (RuleCall)cVarNameAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValExprValExprParserRuleCall_2_0 = (RuleCall)cValExprAssignment_2.eContents().get(0);
		
		//Assignment:
		//	(varDecl=VarDecl | varName=VarName) '=' valExpr=ValExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//(varDecl=VarDecl | varName=VarName) '=' valExpr=ValExpr
		public Group getGroup() { return cGroup; }
		
		//(varDecl=VarDecl | varName=VarName)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//varDecl=VarDecl
		public Assignment getVarDeclAssignment_0_0() { return cVarDeclAssignment_0_0; }
		
		//VarDecl
		public RuleCall getVarDeclVarDeclParserRuleCall_0_0_0() { return cVarDeclVarDeclParserRuleCall_0_0_0; }
		
		//varName=VarName
		public Assignment getVarNameAssignment_0_1() { return cVarNameAssignment_0_1; }
		
		//VarName
		public RuleCall getVarNameVarNameParserRuleCall_0_1_0() { return cVarNameVarNameParserRuleCall_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//valExpr=ValExpr
		public Assignment getValExprAssignment_2() { return cValExprAssignment_2; }
		
		//ValExpr
		public RuleCall getValExprValExprParserRuleCall_2_0() { return cValExprValExprParserRuleCall_2_0; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameVarNameParserRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		
		//VarDecl:
		//	varName=VarName '::' typeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=VarName '::' typeName=TypeName
		public Group getGroup() { return cGroup; }
		
		//varName=VarName
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//VarName
		public RuleCall getVarNameVarNameParserRuleCall_0_0() { return cVarNameVarNameParserRuleCall_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_2_0() { return cTypeNameTypeNameParserRuleCall_2_0; }
	}
	public class ValExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExpr");
		private final RuleCall cValExpr1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValExpr:
		//	ValExpr1;
		@Override public ParserRule getRule() { return rule; }
		
		//ValExpr1
		public RuleCall getValExpr1ParserRuleCall() { return cValExpr1ParserRuleCall; }
	}
	public class ValExpr1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExpr1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cValExpr2ParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Action cValExprOperatorLeftAction_0_1_0_0 = (Action)cGroup_0_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cOperatorOPERATORTerminalRuleCall_0_1_0_1_0 = (RuleCall)cOperatorAssignment_0_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_0_1_0_2 = (Assignment)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cRightValExpr2ParserRuleCall_0_1_0_2_0 = (RuleCall)cRightAssignment_0_1_0_2.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Action cValExprTestLeftAction_0_1_1_0 = (Action)cGroup_0_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1_1_1 = (Keyword)cGroup_0_1_1.eContents().get(1);
		private final Assignment cTypeNameAssignment_0_1_1_2 = (Assignment)cGroup_0_1_1.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_0_1_1_2_0 = (RuleCall)cTypeNameAssignment_0_1_1_2.eContents().get(0);
		private final RuleCall cValExprLetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValExprIteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValExpr1 ValExpr:
		//	ValExpr2 ({ValExprOperator.left=current} operator=OPERATOR right=ValExpr2 | {ValExprTest.left=current} '::'
		//	typeName=TypeName)*
		//	| ValExprLet
		//	| ValExprIte
		@Override public ParserRule getRule() { return rule; }
		
		//ValExpr2 ({ValExprOperator.left=current} operator=OPERATOR right=ValExpr2 | {ValExprTest.left=current} '::'
		//typeName=TypeName)* | ValExprLet | ValExprIte
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValExpr2 ({ValExprOperator.left=current} operator=OPERATOR right=ValExpr2 | {ValExprTest.left=current} '::'
		//typeName=TypeName)*
		public Group getGroup_0() { return cGroup_0; }
		
		//ValExpr2
		public RuleCall getValExpr2ParserRuleCall_0_0() { return cValExpr2ParserRuleCall_0_0; }
		
		//({ValExprOperator.left=current} operator=OPERATOR right=ValExpr2 | {ValExprTest.left=current} '::' typeName=TypeName)*
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//{ValExprOperator.left=current} operator=OPERATOR right=ValExpr2
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//{ValExprOperator.left=current}
		public Action getValExprOperatorLeftAction_0_1_0_0() { return cValExprOperatorLeftAction_0_1_0_0; }
		
		//operator=OPERATOR
		public Assignment getOperatorAssignment_0_1_0_1() { return cOperatorAssignment_0_1_0_1; }
		
		//OPERATOR
		public RuleCall getOperatorOPERATORTerminalRuleCall_0_1_0_1_0() { return cOperatorOPERATORTerminalRuleCall_0_1_0_1_0; }
		
		//right=ValExpr2
		public Assignment getRightAssignment_0_1_0_2() { return cRightAssignment_0_1_0_2; }
		
		//ValExpr2
		public RuleCall getRightValExpr2ParserRuleCall_0_1_0_2_0() { return cRightValExpr2ParserRuleCall_0_1_0_2_0; }
		
		//{ValExprTest.left=current} '::' typeName=TypeName
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//{ValExprTest.left=current}
		public Action getValExprTestLeftAction_0_1_1_0() { return cValExprTestLeftAction_0_1_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1_1_1() { return cColonColonKeyword_0_1_1_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_0_1_1_2() { return cTypeNameAssignment_0_1_1_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_0_1_1_2_0() { return cTypeNameTypeNameParserRuleCall_0_1_1_2_0; }
		
		//ValExprLet
		public RuleCall getValExprLetParserRuleCall_1() { return cValExprLetParserRuleCall_1; }
		
		//ValExprIte
		public RuleCall getValExprIteParserRuleCall_2() { return cValExprIteParserRuleCall_2; }
	}
	public class ValExpr2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExpr2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSmallIdNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValExprUnaryOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValExprFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValExprContructorCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cValExprIntegerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cValExprStringParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cValExprRegexParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cValExprBracketParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cValExprErrorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//ValExpr2:
		//	SmallIdName // Temporarily solution for the conflict in the next two
		//	//		ValExprConst
		//	//	|	ValExprVar
		//	| ValExprUnaryOperator
		//	| ValExprFunctionCall
		//	| ValExprContructorCall
		//	| ValExprInteger
		//	| ValExprString
		//	| ValExprRegex
		//	| ValExprBracket
		//	| ValExprError;
		@Override public ParserRule getRule() { return rule; }
		
		//SmallIdName // Temporarily solution for the conflict in the next two
		////		ValExprConst
		////	|	ValExprVar
		//| ValExprUnaryOperator | ValExprFunctionCall | ValExprContructorCall | ValExprInteger | ValExprString | ValExprRegex |
		//ValExprBracket | ValExprError
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SmallIdName
		public RuleCall getSmallIdNameParserRuleCall_0() { return cSmallIdNameParserRuleCall_0; }
		
		//ValExprUnaryOperator
		public RuleCall getValExprUnaryOperatorParserRuleCall_1() { return cValExprUnaryOperatorParserRuleCall_1; }
		
		//ValExprFunctionCall
		public RuleCall getValExprFunctionCallParserRuleCall_2() { return cValExprFunctionCallParserRuleCall_2; }
		
		//ValExprContructorCall
		public RuleCall getValExprContructorCallParserRuleCall_3() { return cValExprContructorCallParserRuleCall_3; }
		
		//ValExprInteger
		public RuleCall getValExprIntegerParserRuleCall_4() { return cValExprIntegerParserRuleCall_4; }
		
		//ValExprString
		public RuleCall getValExprStringParserRuleCall_5() { return cValExprStringParserRuleCall_5; }
		
		//ValExprRegex
		public RuleCall getValExprRegexParserRuleCall_6() { return cValExprRegexParserRuleCall_6; }
		
		//ValExprBracket
		public RuleCall getValExprBracketParserRuleCall_7() { return cValExprBracketParserRuleCall_7; }
		
		//ValExprError
		public RuleCall getValExprErrorParserRuleCall_8() { return cValExprErrorParserRuleCall_8; }
	}
	public class ValExprUnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprUnaryOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOPERATORTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValExprValExpr2ParserRuleCall_1_0 = (RuleCall)cValExprAssignment_1.eContents().get(0);
		
		//ValExprUnaryOperator:
		//	operator=OPERATOR valExpr=ValExpr2;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=OPERATOR valExpr=ValExpr2
		public Group getGroup() { return cGroup; }
		
		//operator=OPERATOR
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//OPERATOR
		public RuleCall getOperatorOPERATORTerminalRuleCall_0_0() { return cOperatorOPERATORTerminalRuleCall_0_0; }
		
		//valExpr=ValExpr2
		public Assignment getValExprAssignment_1() { return cValExprAssignment_1; }
		
		//ValExpr2
		public RuleCall getValExprValExpr2ParserRuleCall_1_0() { return cValExprValExpr2ParserRuleCall_1_0; }
	}
	public class SmallIdNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.SmallIdName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSMALLIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SmallIdName:
		//	name=SMALLID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SMALLID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SMALLID
		public RuleCall getNameSMALLIDTerminalRuleCall_0() { return cNameSMALLIDTerminalRuleCall_0; }
	}
	public class ValExprErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprError");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cERRORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cErrorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cErrorSTRINGTerminalRuleCall_1_0 = (RuleCall)cErrorAssignment_1.eContents().get(0);
		
		//ValExprError:
		//	'ERROR' error=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'ERROR' error=STRING
		public Group getGroup() { return cGroup; }
		
		//'ERROR'
		public Keyword getERRORKeyword_0() { return cERRORKeyword_0; }
		
		//error=STRING
		public Assignment getErrorAssignment_1() { return cErrorAssignment_1; }
		
		//STRING
		public RuleCall getErrorSTRINGTerminalRuleCall_1_0() { return cErrorSTRINGTerminalRuleCall_1_0; }
	}
	public class ValExprIteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprIte");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionValExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionValExprValExpr1ParserRuleCall_1_0 = (RuleCall)cConditionValExprAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenValExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenValExprValExpr1ParserRuleCall_3_0 = (RuleCall)cThenValExprAssignment_3.eContents().get(0);
		private final Keyword cELSEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseValExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseValExprValExpr1ParserRuleCall_5_0 = (RuleCall)cElseValExprAssignment_5.eContents().get(0);
		private final Keyword cFIKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ValExprIte:
		//	'IF' conditionValExpr=ValExpr1 'THEN' thenValExpr=ValExpr1 'ELSE' elseValExpr=ValExpr1 'FI';
		@Override public ParserRule getRule() { return rule; }
		
		//'IF' conditionValExpr=ValExpr1 'THEN' thenValExpr=ValExpr1 'ELSE' elseValExpr=ValExpr1 'FI'
		public Group getGroup() { return cGroup; }
		
		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }
		
		//conditionValExpr=ValExpr1
		public Assignment getConditionValExprAssignment_1() { return cConditionValExprAssignment_1; }
		
		//ValExpr1
		public RuleCall getConditionValExprValExpr1ParserRuleCall_1_0() { return cConditionValExprValExpr1ParserRuleCall_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//thenValExpr=ValExpr1
		public Assignment getThenValExprAssignment_3() { return cThenValExprAssignment_3; }
		
		//ValExpr1
		public RuleCall getThenValExprValExpr1ParserRuleCall_3_0() { return cThenValExprValExpr1ParserRuleCall_3_0; }
		
		//'ELSE'
		public Keyword getELSEKeyword_4() { return cELSEKeyword_4; }
		
		//elseValExpr=ValExpr1
		public Assignment getElseValExprAssignment_5() { return cElseValExprAssignment_5; }
		
		//ValExpr1
		public RuleCall getElseValExprValExpr1ParserRuleCall_5_0() { return cElseValExprValExpr1ParserRuleCall_5_0; }
		
		//'FI'
		public Keyword getFIKeyword_6() { return cFIKeyword_6; }
	}
	public class ValExprLetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprLet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_1_0 = (RuleCall)cAssignmentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_2_1_0 = (RuleCall)cAssignmentsAssignment_2_1.eContents().get(0);
		private final Keyword cINKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValExprValExpr1ParserRuleCall_4_0 = (RuleCall)cValExprAssignment_4.eContents().get(0);
		private final Keyword cNIKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ValExprLet:
		//	'LET' assignments+=Assignment (';' assignments+=Assignment)* 'IN' valExpr=ValExpr1 'NI';
		@Override public ParserRule getRule() { return rule; }
		
		//'LET' assignments+=Assignment (';' assignments+=Assignment)* 'IN' valExpr=ValExpr1 'NI'
		public Group getGroup() { return cGroup; }
		
		//'LET'
		public Keyword getLETKeyword_0() { return cLETKeyword_0; }
		
		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_1() { return cAssignmentsAssignment_1; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_1_0() { return cAssignmentsAssignmentParserRuleCall_1_0; }
		
		//(';' assignments+=Assignment)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_2_1() { return cAssignmentsAssignment_2_1; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_2_1_0() { return cAssignmentsAssignmentParserRuleCall_2_1_0; }
		
		//'IN'
		public Keyword getINKeyword_3() { return cINKeyword_3; }
		
		//valExpr=ValExpr1
		public Assignment getValExprAssignment_4() { return cValExprAssignment_4; }
		
		//ValExpr1
		public RuleCall getValExprValExpr1ParserRuleCall_4_0() { return cValExprValExpr1ParserRuleCall_4_0; }
		
		//'NI'
		public Keyword getNIKeyword_5() { return cNIKeyword_5; }
	}
	public class ValExprBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValExprValExprParserRuleCall_1_0 = (RuleCall)cValExprAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ValExprBracket:
		//	'(' valExpr=ValExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' valExpr=ValExpr ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//valExpr=ValExpr
		public Assignment getValExprAssignment_1() { return cValExprAssignment_1; }
		
		//ValExpr
		public RuleCall getValExprValExprParserRuleCall_1_0() { return cValExprValExprParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ValExprRegexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprRegex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREGEXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegexSTRINGTerminalRuleCall_2_0 = (RuleCall)cRegexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ValExprRegex:
		//	'REGEX' '(' regex=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'REGEX' '(' regex=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'REGEX'
		public Keyword getREGEXKeyword_0() { return cREGEXKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//regex=STRING
		public Assignment getRegexAssignment_2() { return cRegexAssignment_2; }
		
		//STRING
		public RuleCall getRegexSTRINGTerminalRuleCall_2_0() { return cRegexSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ValExprStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprString");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ValExprString:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class ValExprIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprInteger");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameBIG_INTParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ValExprInteger:
		//	name=BIG_INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BIG_INT
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//BIG_INT
		public RuleCall getNameBIG_INTParserRuleCall_0() { return cNameBIG_INTParserRuleCall_0; }
	}
	public class ValExprContructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprContructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameConstructorNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNeValExprListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNeValExprListNeValExprListParserRuleCall_1_1_0 = (RuleCall)cNeValExprListAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ValExprContructorCall:
		//	name=ConstructorName ('(' neValExprList=NeValExprList ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ConstructorName ('(' neValExprList=NeValExprList ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ConstructorName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ConstructorName
		public RuleCall getNameConstructorNameParserRuleCall_0_0() { return cNameConstructorNameParserRuleCall_0_0; }
		
		//('(' neValExprList=NeValExprList ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//neValExprList=NeValExprList
		public Assignment getNeValExprListAssignment_1_1() { return cNeValExprListAssignment_1_1; }
		
		//NeValExprList
		public RuleCall getNeValExprListNeValExprListParserRuleCall_1_1_0() { return cNeValExprListNeValExprListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ValExprFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFuncNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeValExprListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeValExprListNeValExprListParserRuleCall_2_0 = (RuleCall)cNeValExprListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ValExprFunctionCall:
		//	name=FuncName '(' neValExprList=NeValExprList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=FuncName '(' neValExprList=NeValExprList? ')'
		public Group getGroup() { return cGroup; }
		
		//name=FuncName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//FuncName
		public RuleCall getNameFuncNameParserRuleCall_0_0() { return cNameFuncNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//neValExprList=NeValExprList?
		public Assignment getNeValExprListAssignment_2() { return cNeValExprListAssignment_2; }
		
		//NeValExprList
		public RuleCall getNeValExprListNeValExprListParserRuleCall_2_0() { return cNeValExprListNeValExprListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ValExprVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprVar");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarVarNameParserRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//ValExprVar:
		//	var=VarName;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VarName
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//VarName
		public RuleCall getVarVarNameParserRuleCall_0() { return cVarVarNameParserRuleCall_0; }
	}
	public class ValExprConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ValExprConst");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstConstNameParserRuleCall_0 = (RuleCall)cConstAssignment.eContents().get(0);
		
		//ValExprConst:
		//	const=ConstName;
		@Override public ParserRule getRule() { return rule; }
		
		//const=ConstName
		public Assignment getConstAssignment() { return cConstAssignment; }
		
		//ConstName
		public RuleCall getConstConstNameParserRuleCall_0() { return cConstConstNameParserRuleCall_0; }
	}
	public class ConstructorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ConstructorName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameCAPSIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ConstructorName:
		//	name=CAPSID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAPSID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//CAPSID
		public RuleCall getNameCAPSIDTerminalRuleCall_0() { return cNameCAPSIDTerminalRuleCall_0; }
	}
	public class FuncNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.FuncName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSMALLIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FuncName:
		//	name=SMALLID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SMALLID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SMALLID
		public RuleCall getNameSMALLIDTerminalRuleCall_0() { return cNameSMALLIDTerminalRuleCall_0; }
	}
	public class ConstNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ConstName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSMALLIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ConstName:
		//	name=SMALLID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SMALLID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SMALLID
		public RuleCall getNameSMALLIDTerminalRuleCall_0() { return cNameSMALLIDTerminalRuleCall_0; }
	}
	public class BIG_INTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.BIG_INT");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////
		//BIG_INT ecore::EBigInteger:
		//	INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final TypeDefsElements pTypeDefs;
	private final TypeDefElements pTypeDef;
	private final FuncDefsElements pFuncDefs;
	private final FuncDefElements pFuncDef;
	private final ConstDefsElements pConstDefs;
	private final ConstDefElements pConstDef;
	private final ProcDefsElements pProcDefs;
	private final ProcDefElements pProcDef;
	private final StautDefsElements pStautDefs;
	private final StautDefElements pStautDef;
	private final ChannelDefsElements pChannelDefs;
	private final ChannelDefElements pChannelDef;
	private final ModelDefElements pModelDef;
	private final MapperDefElements pMapperDef;
	private final CnectDefElements pCnectDef;
	private final StautItemsElements pStautItems;
	private final StateItemElements pStateItem;
	private final VarItemElements pVarItem;
	private final InitItemElements pInitItem;
	private final TransItemElements pTransItem;
	private final TransitionElements pTransition;
	private final UpdateListElements pUpdateList;
	private final UpdateElements pUpdate;
	private final MapperNameElements pMapperName;
	private final NeConstructorListElements pNeConstructorList;
	private final ConstructorElements pConstructor;
	private final NeFieldListElements pNeFieldList;
	private final FieldsElements pFields;
	private final NeFieldNameListElements pNeFieldNameList;
	private final FieldNameElements pFieldName;
	private final ExitDeclElements pExitDecl;
	private final ModelNameElements pModelName;
	private final ConnectionItemElements pConnectionItem;
	private final ConnectionOutElements pConnectionOut;
	private final ConnectionInElements pConnectionIn;
	private final EncodingElements pEncoding;
	private final DecodingElements pDecoding;
	private final PortNumberElements pPortNumber;
	private final HostNameElements pHostName;
	private final StautNameElements pStautName;
	private final ChannelDefNameElements pChannelDefName;
	private final ProcNameElements pProcName;
	private final CnectNameElements pCnectName;
	private final NeVarsDeclarationListElements pNeVarsDeclarationList;
	private final VarsDeclarationElements pVarsDeclaration;
	private final NeVarDeclListElements pNeVarDeclList;
	private final VarsDeclElements pVarsDecl;
	private final NeChannelsDeclListElements pNeChannelsDeclList;
	private final ChannelsDeclElements pChannelsDecl;
	private final NeTypeNameListElements pNeTypeNameList;
	private final TypeNameElements pTypeName;
	private final NeChannelNameListElements pNeChannelNameList;
	private final NeIdNameListElements pNeIdNameList;
	private final IdNameElements pIdName;
	private final ChannelNameElements pChannelName;
	private final NeVarNameListElements pNeVarNameList;
	private final VarNameElements pVarName;
	private final ProcessBehaviourElements pProcessBehaviour;
	private final ProcessBehaviourLevel1Elements pProcessBehaviourLevel1;
	private final ProcessBehaviourLevel2Elements pProcessBehaviourLevel2;
	private final ProcessBehaviourLevel3Elements pProcessBehaviourLevel3;
	private final ProcessBehaviourLevel4Elements pProcessBehaviourLevel4;
	private final ProcCallElements pProcCall;
	private final NeValExprListElements pNeValExprList;
	private final ProcessBehaviourBracketElements pProcessBehaviourBracket;
	private final ProcessBehaviourHideElements pProcessBehaviourHide;
	private final ProcessBehaviourLetElements pProcessBehaviourLet;
	private final ProcessBehaviourSequenceElements pProcessBehaviourSequence;
	private final ProcessBehaviourGuardedElements pProcessBehaviourGuarded;
	private final ProcessBehaviourStopElements pProcessBehaviourStop;
	private final SynchronizedChannelsElements pSynchronizedChannels;
	private final ConditionalCommunicationsElements pConditionalCommunications;
	private final CommunicationsElements pCommunications;
	private final CommunicationElements pCommunication;
	private final ChannelOfferElements pChannelOffer;
	private final ConditionElements pCondition;
	private final AssignmentElements pAssignment;
	private final VarDeclElements pVarDecl;
	private final ValExprElements pValExpr;
	private final ValExpr1Elements pValExpr1;
	private final ValExpr2Elements pValExpr2;
	private final ValExprUnaryOperatorElements pValExprUnaryOperator;
	private final SmallIdNameElements pSmallIdName;
	private final ValExprErrorElements pValExprError;
	private final ValExprIteElements pValExprIte;
	private final ValExprLetElements pValExprLet;
	private final ValExprBracketElements pValExprBracket;
	private final ValExprRegexElements pValExprRegex;
	private final ValExprStringElements pValExprString;
	private final ValExprIntegerElements pValExprInteger;
	private final ValExprContructorCallElements pValExprContructorCall;
	private final ValExprFunctionCallElements pValExprFunctionCall;
	private final ValExprVarElements pValExprVar;
	private final ValExprConstElements pValExprConst;
	private final ConstructorNameElements pConstructorName;
	private final FuncNameElements pFuncName;
	private final ConstNameElements pConstName;
	private final TerminalRule tOPERATOR;
	private final TerminalRule tCAPSID;
	private final TerminalRule tSMALLID;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tML_COMMENT;
	private final BIG_INTElements pBIG_INT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TorXakisDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTypeDefs = new TypeDefsElements();
		this.pTypeDef = new TypeDefElements();
		this.pFuncDefs = new FuncDefsElements();
		this.pFuncDef = new FuncDefElements();
		this.pConstDefs = new ConstDefsElements();
		this.pConstDef = new ConstDefElements();
		this.pProcDefs = new ProcDefsElements();
		this.pProcDef = new ProcDefElements();
		this.pStautDefs = new StautDefsElements();
		this.pStautDef = new StautDefElements();
		this.pChannelDefs = new ChannelDefsElements();
		this.pChannelDef = new ChannelDefElements();
		this.pModelDef = new ModelDefElements();
		this.pMapperDef = new MapperDefElements();
		this.pCnectDef = new CnectDefElements();
		this.pStautItems = new StautItemsElements();
		this.pStateItem = new StateItemElements();
		this.pVarItem = new VarItemElements();
		this.pInitItem = new InitItemElements();
		this.pTransItem = new TransItemElements();
		this.pTransition = new TransitionElements();
		this.pUpdateList = new UpdateListElements();
		this.pUpdate = new UpdateElements();
		this.pMapperName = new MapperNameElements();
		this.pNeConstructorList = new NeConstructorListElements();
		this.pConstructor = new ConstructorElements();
		this.pNeFieldList = new NeFieldListElements();
		this.pFields = new FieldsElements();
		this.pNeFieldNameList = new NeFieldNameListElements();
		this.pFieldName = new FieldNameElements();
		this.pExitDecl = new ExitDeclElements();
		this.pModelName = new ModelNameElements();
		this.pConnectionItem = new ConnectionItemElements();
		this.pConnectionOut = new ConnectionOutElements();
		this.pConnectionIn = new ConnectionInElements();
		this.pEncoding = new EncodingElements();
		this.pDecoding = new DecodingElements();
		this.pPortNumber = new PortNumberElements();
		this.pHostName = new HostNameElements();
		this.pStautName = new StautNameElements();
		this.pChannelDefName = new ChannelDefNameElements();
		this.pProcName = new ProcNameElements();
		this.pCnectName = new CnectNameElements();
		this.pNeVarsDeclarationList = new NeVarsDeclarationListElements();
		this.pVarsDeclaration = new VarsDeclarationElements();
		this.pNeVarDeclList = new NeVarDeclListElements();
		this.pVarsDecl = new VarsDeclElements();
		this.pNeChannelsDeclList = new NeChannelsDeclListElements();
		this.pChannelsDecl = new ChannelsDeclElements();
		this.pNeTypeNameList = new NeTypeNameListElements();
		this.pTypeName = new TypeNameElements();
		this.pNeChannelNameList = new NeChannelNameListElements();
		this.pNeIdNameList = new NeIdNameListElements();
		this.pIdName = new IdNameElements();
		this.pChannelName = new ChannelNameElements();
		this.pNeVarNameList = new NeVarNameListElements();
		this.pVarName = new VarNameElements();
		this.pProcessBehaviour = new ProcessBehaviourElements();
		this.pProcessBehaviourLevel1 = new ProcessBehaviourLevel1Elements();
		this.pProcessBehaviourLevel2 = new ProcessBehaviourLevel2Elements();
		this.pProcessBehaviourLevel3 = new ProcessBehaviourLevel3Elements();
		this.pProcessBehaviourLevel4 = new ProcessBehaviourLevel4Elements();
		this.pProcCall = new ProcCallElements();
		this.pNeValExprList = new NeValExprListElements();
		this.pProcessBehaviourBracket = new ProcessBehaviourBracketElements();
		this.pProcessBehaviourHide = new ProcessBehaviourHideElements();
		this.pProcessBehaviourLet = new ProcessBehaviourLetElements();
		this.pProcessBehaviourSequence = new ProcessBehaviourSequenceElements();
		this.pProcessBehaviourGuarded = new ProcessBehaviourGuardedElements();
		this.pProcessBehaviourStop = new ProcessBehaviourStopElements();
		this.pSynchronizedChannels = new SynchronizedChannelsElements();
		this.pConditionalCommunications = new ConditionalCommunicationsElements();
		this.pCommunications = new CommunicationsElements();
		this.pCommunication = new CommunicationElements();
		this.pChannelOffer = new ChannelOfferElements();
		this.pCondition = new ConditionElements();
		this.pAssignment = new AssignmentElements();
		this.pVarDecl = new VarDeclElements();
		this.pValExpr = new ValExprElements();
		this.pValExpr1 = new ValExpr1Elements();
		this.pValExpr2 = new ValExpr2Elements();
		this.pValExprUnaryOperator = new ValExprUnaryOperatorElements();
		this.pSmallIdName = new SmallIdNameElements();
		this.pValExprError = new ValExprErrorElements();
		this.pValExprIte = new ValExprIteElements();
		this.pValExprLet = new ValExprLetElements();
		this.pValExprBracket = new ValExprBracketElements();
		this.pValExprRegex = new ValExprRegexElements();
		this.pValExprString = new ValExprStringElements();
		this.pValExprInteger = new ValExprIntegerElements();
		this.pValExprContructorCall = new ValExprContructorCallElements();
		this.pValExprFunctionCall = new ValExprFunctionCallElements();
		this.pValExprVar = new ValExprVarElements();
		this.pValExprConst = new ValExprConstElements();
		this.pConstructorName = new ConstructorNameElements();
		this.pFuncName = new FuncNameElements();
		this.pConstName = new ConstNameElements();
		this.tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.OPERATOR");
		this.tCAPSID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.CAPSID");
		this.tSMALLID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.SMALLID");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.SL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tno.torxakis.language.TorXakisDsl.ML_COMMENT");
		this.pBIG_INT = new BIG_INTElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.tno.torxakis.language.TorXakisDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(typeDefs+=TypeDefs
	//	| funcDefs+=FuncDefs
	//	| constDefs+=ConstDefs
	//	| procDefs+=ProcDefs
	//	| stautDefs+=StautDefs
	//	| channelDefs+=ChannelDefs
	//	| modelDef+=ModelDef
	//	| mapperDef+=MapperDef
	//	| cnectDef+=CnectDef)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TypeDefs:
	//	'TYPEDEF' typeDefs+=TypeDef (';' typeDefs+=TypeDef)* 'ENDDEF';
	public TypeDefsElements getTypeDefsAccess() {
		return pTypeDefs;
	}
	
	public ParserRule getTypeDefsRule() {
		return getTypeDefsAccess().getRule();
	}
	
	//TypeDef:
	//	name=TypeName '::=' neConstructorList=NeConstructorList;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//FuncDefs:
	//	'FUNCDEF' funcDefs+=FuncDef (';' funcDefs+=FuncDef)* 'ENDDEF';
	public FuncDefsElements getFuncDefsAccess() {
		return pFuncDefs;
	}
	
	public ParserRule getFuncDefsRule() {
		return getFuncDefsAccess().getRule();
	}
	
	//FuncDef:
	//	funcName=FuncName '(' neVarsDelarationList=NeVarsDeclarationList ')' "::" typeName=TypeName "::=" valExpr=ValExpr;
	public FuncDefElements getFuncDefAccess() {
		return pFuncDef;
	}
	
	public ParserRule getFuncDefRule() {
		return getFuncDefAccess().getRule();
	}
	
	//ConstDefs:
	//	'CONSTDEF' constDefs+=ConstDef (';' constDefs+=ConstDef)* 'ENDDEF';
	public ConstDefsElements getConstDefsAccess() {
		return pConstDefs;
	}
	
	public ParserRule getConstDefsRule() {
		return getConstDefsAccess().getRule();
	}
	
	//ConstDef:
	//	name=ConstName "::" typeName=TypeName "::=" valExpr=ValExpr;
	public ConstDefElements getConstDefAccess() {
		return pConstDef;
	}
	
	public ParserRule getConstDefRule() {
		return getConstDefAccess().getRule();
	}
	
	//ProcDefs:
	//	'PROCDEF' procDefs+=ProcDef (';' procDefs+=ProcDef)* 'ENDDEF';
	public ProcDefsElements getProcDefsAccess() {
		return pProcDefs;
	}
	
	public ParserRule getProcDefsRule() {
		return getProcDefsAccess().getRule();
	}
	
	//ProcDef:
	//	name=ProcName '[' neChannelDeclList=NeChannelsDeclList? ']' '(' neVarDeclList=NeVarDeclList? ')' exitDecl=ExitDecl?
	//	'::=' processBehaviour=ProcessBehaviour;
	public ProcDefElements getProcDefAccess() {
		return pProcDef;
	}
	
	public ParserRule getProcDefRule() {
		return getProcDefAccess().getRule();
	}
	
	//StautDefs:
	//	'STAUTDEF' stautDefs+=StautDef (';' stautDefs+=StautDef)* 'ENDDEF';
	public StautDefsElements getStautDefsAccess() {
		return pStautDefs;
	}
	
	public ParserRule getStautDefsRule() {
		return getStautDefsAccess().getRule();
	}
	
	//StautDef:
	//	name=StautName '[' neChannelDeclList=NeChannelsDeclList? ']' '(' neVarDeclList=NeVarDeclList? ')' exitDecl=ExitDecl?
	//	'::=' stautItems=StautItems;
	public StautDefElements getStautDefAccess() {
		return pStautDef;
	}
	
	public ParserRule getStautDefRule() {
		return getStautDefAccess().getRule();
	}
	
	//ChannelDefs:
	//	'CHANDEF' ChannelDefs+=ChannelDef
	//	// (';' ChannelDefs+=ChannelDef )* 
	//	'ENDDEF';
	public ChannelDefsElements getChannelDefsAccess() {
		return pChannelDefs;
	}
	
	public ParserRule getChannelDefsRule() {
		return getChannelDefsAccess().getRule();
	}
	
	//ChannelDef:
	//	name=ChannelDefName '::=' neChannelDeclList=NeChannelsDeclList;
	public ChannelDefElements getChannelDefAccess() {
		return pChannelDef;
	}
	
	public ParserRule getChannelDefRule() {
		return getChannelDefAccess().getRule();
	}
	
	//ModelDef:
	//	'MODELDEF' modelName=ModelName '::='
	//	'CHAN' 'IN' neInputChannelNameList=NeChannelNameList?
	//	'CHAN' 'OUT' neOutputChannelNameList=NeChannelNameList?
	//	'BEHAVIOUR' processBehaviour=ProcessBehaviour
	//	'ENDDEF';
	public ModelDefElements getModelDefAccess() {
		return pModelDef;
	}
	
	public ParserRule getModelDefRule() {
		return getModelDefAccess().getRule();
	}
	
	//MapperDef:
	//	'MAPPERDEF' mapperName=MapperName '::='
	//	'CHAN' 'IN' chanInNeChannelsDeclList=NeChannelsDeclList?
	//	'CHAN' 'OUT' chanOutNeChannelsDeclList=NeChannelsDeclList?
	//	'BEHAVIOUR' processBehaviour=ProcessBehaviour
	//	'ENDDEF';
	public MapperDefElements getMapperDefAccess() {
		return pMapperDef;
	}
	
	public ParserRule getMapperDefRule() {
		return getMapperDefAccess().getRule();
	}
	
	//CnectDef:
	//	'CNECTDEF' cnectName=CnectName '::='
	//	cnectType=('CLIENTSOCK' | 'SERVERSOCK') connectionItems+=ConnectionItem*
	//	'ENDDEF';
	public CnectDefElements getCnectDefAccess() {
		return pCnectDef;
	}
	
	public ParserRule getCnectDefRule() {
		return getCnectDefAccess().getRule();
	}
	
	//StautItems:
	//	{StautItems} (stateItems+=StateItem
	//	| varItems+=VarItem
	//	| initItems+=InitItem
	//	| transItems+=TransItem)*;
	public StautItemsElements getStautItemsAccess() {
		return pStautItems;
	}
	
	public ParserRule getStautItemsRule() {
		return getStautItemsAccess().getRule();
	}
	
	//StateItem:
	//	'STATE' list=NeIdNameList;
	public StateItemElements getStateItemAccess() {
		return pStateItem;
	}
	
	public ParserRule getStateItemRule() {
		return getStateItemAccess().getRule();
	}
	
	//VarItem:
	//	{VarItem}
	//	'VAR' neVarsDelarationList=NeVarsDeclarationList?;
	public VarItemElements getVarItemAccess() {
		return pVarItem;
	}
	
	public ParserRule getVarItemRule() {
		return getVarItemAccess().getRule();
	}
	
	//InitItem:
	//	'INIT' idName=IdName updateList=UpdateList?;
	public InitItemElements getInitItemAccess() {
		return pInitItem;
	}
	
	public ParserRule getInitItemRule() {
		return getInitItemAccess().getRule();
	}
	
	//TransItem:
	//	'TRANS' transitions+=Transition (';' transitions+=Transition)*;
	public TransItemElements getTransItemAccess() {
		return pTransItem;
	}
	
	public ParserRule getTransItemRule() {
		return getTransItemAccess().getRule();
	}
	
	//Transition:
	//	fromName=IdName '->' conditionalCommunications=ConditionalCommunications updateList=UpdateList? '->' toName=IdName;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//UpdateList:
	//	'{' updates+=Update (';' updates+=Update)* '}';
	public UpdateListElements getUpdateListAccess() {
		return pUpdateList;
	}
	
	public ParserRule getUpdateListRule() {
		return getUpdateListAccess().getRule();
	}
	
	//Update:
	//	varName+=VarName ':=' valExpr+=ValExpr;
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//MapperName:
	//	name=CAPSID;
	public MapperNameElements getMapperNameAccess() {
		return pMapperName;
	}
	
	public ParserRule getMapperNameRule() {
		return getMapperNameAccess().getRule();
	}
	
	//NeConstructorList:
	//	constructors+=Constructor ('|' constructor+=Constructor)*;
	public NeConstructorListElements getNeConstructorListAccess() {
		return pNeConstructorList;
	}
	
	public ParserRule getNeConstructorListRule() {
		return getNeConstructorListAccess().getRule();
	}
	
	//Constructor:
	//	name=ConstructorName ('{' neFieldsList=NeFieldList '}')?;
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//NeFieldList:
	//	fields+=Fields (';' fields+=Fields)*;
	public NeFieldListElements getNeFieldListAccess() {
		return pNeFieldList;
	}
	
	public ParserRule getNeFieldListRule() {
		return getNeFieldListAccess().getRule();
	}
	
	//Fields:
	//	neFieldNameList=NeFieldNameList '::' typeName=TypeName;
	public FieldsElements getFieldsAccess() {
		return pFields;
	}
	
	public ParserRule getFieldsRule() {
		return getFieldsAccess().getRule();
	}
	
	//NeFieldNameList:
	//	fieldNames+=FieldName (',' fieldNames+=FieldName)*;
	public NeFieldNameListElements getNeFieldNameListAccess() {
		return pNeFieldNameList;
	}
	
	public ParserRule getNeFieldNameListRule() {
		return getNeFieldNameListAccess().getRule();
	}
	
	//FieldName:
	//	name=SMALLID;
	public FieldNameElements getFieldNameAccess() {
		return pFieldName;
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}
	
	//ExitDecl:
	//	exit='EXIT' ('::' neTypeNameList=NeTypeNameList)?;
	public ExitDeclElements getExitDeclAccess() {
		return pExitDecl;
	}
	
	public ParserRule getExitDeclRule() {
		return getExitDeclAccess().getRule();
	}
	
	//ModelName:
	//	name=CAPSID;
	public ModelNameElements getModelNameAccess() {
		return pModelName;
	}
	
	public ParserRule getModelNameRule() {
		return getModelNameAccess().getRule();
	}
	
	//ConnectionItem:
	//	ConnectionOut
	//	| ConnectionIn
	//	| Encoding
	//	| Decoding;
	public ConnectionItemElements getConnectionItemAccess() {
		return pConnectionItem;
	}
	
	public ParserRule getConnectionItemRule() {
		return getConnectionItemAccess().getRule();
	}
	
	//ConnectionOut:
	//	'CHAN' 'OUT' channelsDecl=ChannelsDecl 'HOST' hostName=HostName 'PORT' portNumber=PortNumber;
	public ConnectionOutElements getConnectionOutAccess() {
		return pConnectionOut;
	}
	
	public ParserRule getConnectionOutRule() {
		return getConnectionOutAccess().getRule();
	}
	
	//ConnectionIn:
	//	'CHAN' 'IN' channelsDecl=ChannelsDecl 'HOST' hostName=HostName 'PORT' portNumber=PortNumber;
	public ConnectionInElements getConnectionInAccess() {
		return pConnectionIn;
	}
	
	public ParserRule getConnectionInRule() {
		return getConnectionInAccess().getRule();
	}
	
	//Encoding:
	//	'ENCODE' communication=Communication '->' channelOffer=ChannelOffer;
	public EncodingElements getEncodingAccess() {
		return pEncoding;
	}
	
	public ParserRule getEncodingRule() {
		return getEncodingAccess().getRule();
	}
	
	//Decoding:
	//	'DECODE' communication=Communication '<-' channelOffer=ChannelOffer;
	public DecodingElements getDecodingAccess() {
		return pDecoding;
	}
	
	public ParserRule getDecodingRule() {
		return getDecodingAccess().getRule();
	}
	
	//PortNumber:
	//	portNumber=INT;
	public PortNumberElements getPortNumberAccess() {
		return pPortNumber;
	}
	
	public ParserRule getPortNumberRule() {
		return getPortNumberAccess().getRule();
	}
	
	//HostName:
	//	name=STRING;
	public HostNameElements getHostNameAccess() {
		return pHostName;
	}
	
	public ParserRule getHostNameRule() {
		return getHostNameAccess().getRule();
	}
	
	//StautName:
	//	name=CAPSID;
	public StautNameElements getStautNameAccess() {
		return pStautName;
	}
	
	public ParserRule getStautNameRule() {
		return getStautNameAccess().getRule();
	}
	
	//ChannelDefName:
	//	name=CAPSID;
	public ChannelDefNameElements getChannelDefNameAccess() {
		return pChannelDefName;
	}
	
	public ParserRule getChannelDefNameRule() {
		return getChannelDefNameAccess().getRule();
	}
	
	//ProcName:
	//	name=SMALLID;
	public ProcNameElements getProcNameAccess() {
		return pProcName;
	}
	
	public ParserRule getProcNameRule() {
		return getProcNameAccess().getRule();
	}
	
	//CnectName:
	//	name=CAPSID;
	public CnectNameElements getCnectNameAccess() {
		return pCnectName;
	}
	
	public ParserRule getCnectNameRule() {
		return getCnectNameAccess().getRule();
	}
	
	//NeVarsDeclarationList:
	//	varsDeclarations+=VarsDeclaration (";" varsDeclarations+=VarsDeclaration)*;
	public NeVarsDeclarationListElements getNeVarsDeclarationListAccess() {
		return pNeVarsDeclarationList;
	}
	
	public ParserRule getNeVarsDeclarationListRule() {
		return getNeVarsDeclarationListAccess().getRule();
	}
	
	//VarsDeclaration:
	//	neVarNameList=NeVarNameList "::" typeName=TypeName;
	public VarsDeclarationElements getVarsDeclarationAccess() {
		return pVarsDeclaration;
	}
	
	public ParserRule getVarsDeclarationRule() {
		return getVarsDeclarationAccess().getRule();
	}
	
	//NeVarDeclList:
	//	varsDecls+=VarsDecl (";" varsDecls+=VarsDecl)*;
	public NeVarDeclListElements getNeVarDeclListAccess() {
		return pNeVarDeclList;
	}
	
	public ParserRule getNeVarDeclListRule() {
		return getNeVarDeclListAccess().getRule();
	}
	
	//VarsDecl:
	//	neVarNameList=NeVarNameList "::" typeName=TypeName;
	public VarsDeclElements getVarsDeclAccess() {
		return pVarsDecl;
	}
	
	public ParserRule getVarsDeclRule() {
		return getVarsDeclAccess().getRule();
	}
	
	//NeChannelsDeclList:
	//	channelsDecls+=ChannelsDecl (';' channelsDecls+=ChannelsDecl)*;
	public NeChannelsDeclListElements getNeChannelsDeclListAccess() {
		return pNeChannelsDeclList;
	}
	
	public ParserRule getNeChannelsDeclListRule() {
		return getNeChannelsDeclListAccess().getRule();
	}
	
	//ChannelsDecl:
	//	neChannelNameList=NeChannelNameList ('::' neTypeNameList=NeTypeNameList)?;
	public ChannelsDeclElements getChannelsDeclAccess() {
		return pChannelsDecl;
	}
	
	public ParserRule getChannelsDeclRule() {
		return getChannelsDeclAccess().getRule();
	}
	
	//NeTypeNameList:
	//	typeNames+=TypeName ("#" typeNames+=TypeName)*;
	public NeTypeNameListElements getNeTypeNameListAccess() {
		return pNeTypeNameList;
	}
	
	public ParserRule getNeTypeNameListRule() {
		return getNeTypeNameListAccess().getRule();
	}
	
	//TypeName:
	//	name=CAPSID;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//NeChannelNameList:
	//	channelNames+=ChannelName ("," channelNames+=ChannelName)*;
	public NeChannelNameListElements getNeChannelNameListAccess() {
		return pNeChannelNameList;
	}
	
	public ParserRule getNeChannelNameListRule() {
		return getNeChannelNameListAccess().getRule();
	}
	
	//NeIdNameList:
	//	idNames+=IdName ("," idNames+=IdName)*;
	public NeIdNameListElements getNeIdNameListAccess() {
		return pNeIdNameList;
	}
	
	public ParserRule getNeIdNameListRule() {
		return getNeIdNameListAccess().getRule();
	}
	
	//IdName:
	//	name=SMALLID
	//	| name=CAPSID;
	public IdNameElements getIdNameAccess() {
		return pIdName;
	}
	
	public ParserRule getIdNameRule() {
		return getIdNameAccess().getRule();
	}
	
	//ChannelName:
	//	name=CAPSID;
	public ChannelNameElements getChannelNameAccess() {
		return pChannelName;
	}
	
	public ParserRule getChannelNameRule() {
		return getChannelNameAccess().getRule();
	}
	
	//NeVarNameList:
	//	varNames+=VarName ("," varNames+=VarName)*;
	public NeVarNameListElements getNeVarNameListAccess() {
		return pNeVarNameList;
	}
	
	public ParserRule getNeVarNameListRule() {
		return getNeVarNameListAccess().getRule();
	}
	
	//VarName:
	//	name=SMALLID;
	public VarNameElements getVarNameAccess() {
		return pVarName;
	}
	
	public ParserRule getVarNameRule() {
		return getVarNameAccess().getRule();
	}
	
	//ProcessBehaviour:
	//	ProcessBehaviourLevel1;
	public ProcessBehaviourElements getProcessBehaviourAccess() {
		return pProcessBehaviour;
	}
	
	public ParserRule getProcessBehaviourRule() {
		return getProcessBehaviourAccess().getRule();
	}
	
	//ProcessBehaviourLevel1 ProcessBehaviour:
	//	ProcessBehaviourLevel2 ({ProcessBehaviourEnable.left=current} '>>>' right=ProcessBehaviourLevel2 |
	//	{ProcessBehaviourEnableAccept.left=current} '>>>' 'ACCEPT' ('?' (varDecls+=VarDecl | varNames+=VarName) | '!'
	//	valExprs+=ValExpr)* 'IN' right=ProcessBehaviourLevel2 'NI' | {ProcessBehaviourDisable.left=current} '[>>'
	//	right=ProcessBehaviourLevel2 | {ProcessBehaviourInterrupt.left=current} '[><' right=ProcessBehaviourLevel2)*
	public ProcessBehaviourLevel1Elements getProcessBehaviourLevel1Access() {
		return pProcessBehaviourLevel1;
	}
	
	public ParserRule getProcessBehaviourLevel1Rule() {
		return getProcessBehaviourLevel1Access().getRule();
	}
	
	//ProcessBehaviourLevel2 ProcessBehaviour:
	//	ProcessBehaviourLevel3 ({ProcessBehaviourSynchronized.left=current} '||' right=ProcessBehaviourLevel3 |
	//	{ProcessBehaviourParallel.left=current} '|||' right=ProcessBehaviourLevel3 |
	//	{ProcessBehaviourSynchronizeChannels.left=current} synchronizedChannels=SynchronizedChannels
	//	right=ProcessBehaviourLevel3)*
	public ProcessBehaviourLevel2Elements getProcessBehaviourLevel2Access() {
		return pProcessBehaviourLevel2;
	}
	
	public ParserRule getProcessBehaviourLevel2Rule() {
		return getProcessBehaviourLevel2Access().getRule();
	}
	
	//ProcessBehaviourLevel3 ProcessBehaviour:
	//	ProcessBehaviourLevel4 ({ProcessBehaviourChoice.left=current} '##' right=ProcessBehaviourLevel4)*
	public ProcessBehaviourLevel3Elements getProcessBehaviourLevel3Access() {
		return pProcessBehaviourLevel3;
	}
	
	public ParserRule getProcessBehaviourLevel3Rule() {
		return getProcessBehaviourLevel3Access().getRule();
	}
	
	//ProcessBehaviourLevel4 ProcessBehaviour:
	//	ProcessBehaviourGuarded
	//	| ProcessBehaviourStop
	//	| ProcessBehaviourSequence
	//	| ProcCall
	//	| ProcessBehaviourLet
	//	| ProcessBehaviourHide
	//	| ProcessBehaviourBracket
	public ProcessBehaviourLevel4Elements getProcessBehaviourLevel4Access() {
		return pProcessBehaviourLevel4;
	}
	
	public ParserRule getProcessBehaviourLevel4Rule() {
		return getProcessBehaviourLevel4Access().getRule();
	}
	
	//ProcCall:
	//	name=ProcName '[' neChannelNameList=NeChannelNameList? ']' '(' neValExprList=NeValExprList? ')';
	public ProcCallElements getProcCallAccess() {
		return pProcCall;
	}
	
	public ParserRule getProcCallRule() {
		return getProcCallAccess().getRule();
	}
	
	//NeValExprList:
	//	valExprs+=ValExpr (',' valExprs+=ValExpr)*;
	public NeValExprListElements getNeValExprListAccess() {
		return pNeValExprList;
	}
	
	public ParserRule getNeValExprListRule() {
		return getNeValExprListAccess().getRule();
	}
	
	//ProcessBehaviourBracket:
	//	'(' sub=ProcessBehaviourLevel1 ')';
	public ProcessBehaviourBracketElements getProcessBehaviourBracketAccess() {
		return pProcessBehaviourBracket;
	}
	
	public ParserRule getProcessBehaviourBracketRule() {
		return getProcessBehaviourBracketAccess().getRule();
	}
	
	//ProcessBehaviourHide:
	//	'HIDE' '[' neChannelsDeclList=NeChannelsDeclList? ']' 'IN' sub=ProcessBehaviourLevel1 'NI';
	public ProcessBehaviourHideElements getProcessBehaviourHideAccess() {
		return pProcessBehaviourHide;
	}
	
	public ParserRule getProcessBehaviourHideRule() {
		return getProcessBehaviourHideAccess().getRule();
	}
	
	//ProcessBehaviourLet:
	//	'LET' assignments+=Assignment (';' assignments+=Assignment)* 'IN' sub=ProcessBehaviourLevel1 'NI';
	public ProcessBehaviourLetElements getProcessBehaviourLetAccess() {
		return pProcessBehaviourLet;
	}
	
	public ParserRule getProcessBehaviourLetRule() {
		return getProcessBehaviourLetAccess().getRule();
	}
	
	//ProcessBehaviourSequence:
	//	conditionalCommunications=ConditionalCommunications ('>->' sub=ProcessBehaviourLevel4)?;
	public ProcessBehaviourSequenceElements getProcessBehaviourSequenceAccess() {
		return pProcessBehaviourSequence;
	}
	
	public ParserRule getProcessBehaviourSequenceRule() {
		return getProcessBehaviourSequenceAccess().getRule();
	}
	
	//ProcessBehaviourGuarded:
	//	condition=Condition '=>>' sub=ProcessBehaviourLevel4;
	public ProcessBehaviourGuardedElements getProcessBehaviourGuardedAccess() {
		return pProcessBehaviourGuarded;
	}
	
	public ParserRule getProcessBehaviourGuardedRule() {
		return getProcessBehaviourGuardedAccess().getRule();
	}
	
	//ProcessBehaviourStop:
	//	stop='STOP';
	public ProcessBehaviourStopElements getProcessBehaviourStopAccess() {
		return pProcessBehaviourStop;
	}
	
	public ParserRule getProcessBehaviourStopRule() {
		return getProcessBehaviourStopAccess().getRule();
	}
	
	//SynchronizedChannels:
	//	'|[' neChannelNameList=NeChannelNameList ']|';
	public SynchronizedChannelsElements getSynchronizedChannelsAccess() {
		return pSynchronizedChannels;
	}
	
	public ParserRule getSynchronizedChannelsRule() {
		return getSynchronizedChannelsAccess().getRule();
	}
	
	//ConditionalCommunications:
	//	{ConditionalCommunications} communications+=Communications condition=Condition?;
	public ConditionalCommunicationsElements getConditionalCommunicationsAccess() {
		return pConditionalCommunications;
	}
	
	public ParserRule getConditionalCommunicationsRule() {
		return getConditionalCommunicationsAccess().getRule();
	}
	
	//Communications:
	//	{Communications} communications+=Communication ('|' communications+=Communication)*;
	public CommunicationsElements getCommunicationsAccess() {
		return pCommunications;
	}
	
	public ParserRule getCommunicationsRule() {
		return getCommunicationsAccess().getRule();
	}
	
	//Communication:
	//	{Communication} ((channelName=ChannelName | exit='EXIT') channelOffers+=ChannelOffer*);
	public CommunicationElements getCommunicationAccess() {
		return pCommunication;
	}
	
	public ParserRule getCommunicationRule() {
		return getCommunicationAccess().getRule();
	}
	
	//ChannelOffer:
	//	'!' valExprs+=ValExpr | '?' (varDecls+=VarDecl | varNames+=VarName);
	public ChannelOfferElements getChannelOfferAccess() {
		return pChannelOffer;
	}
	
	public ParserRule getChannelOfferRule() {
		return getChannelOfferAccess().getRule();
	}
	
	//Condition:
	//	{Condition}
	//	'[[' valExpr=ValExpr ']]';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Assignment:
	//	(varDecl=VarDecl | varName=VarName) '=' valExpr=ValExpr;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//VarDecl:
	//	varName=VarName '::' typeName=TypeName;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//ValExpr:
	//	ValExpr1;
	public ValExprElements getValExprAccess() {
		return pValExpr;
	}
	
	public ParserRule getValExprRule() {
		return getValExprAccess().getRule();
	}
	
	//ValExpr1 ValExpr:
	//	ValExpr2 ({ValExprOperator.left=current} operator=OPERATOR right=ValExpr2 | {ValExprTest.left=current} '::'
	//	typeName=TypeName)*
	//	| ValExprLet
	//	| ValExprIte
	public ValExpr1Elements getValExpr1Access() {
		return pValExpr1;
	}
	
	public ParserRule getValExpr1Rule() {
		return getValExpr1Access().getRule();
	}
	
	//ValExpr2:
	//	SmallIdName // Temporarily solution for the conflict in the next two
	//	//		ValExprConst
	//	//	|	ValExprVar
	//	| ValExprUnaryOperator
	//	| ValExprFunctionCall
	//	| ValExprContructorCall
	//	| ValExprInteger
	//	| ValExprString
	//	| ValExprRegex
	//	| ValExprBracket
	//	| ValExprError;
	public ValExpr2Elements getValExpr2Access() {
		return pValExpr2;
	}
	
	public ParserRule getValExpr2Rule() {
		return getValExpr2Access().getRule();
	}
	
	//ValExprUnaryOperator:
	//	operator=OPERATOR valExpr=ValExpr2;
	public ValExprUnaryOperatorElements getValExprUnaryOperatorAccess() {
		return pValExprUnaryOperator;
	}
	
	public ParserRule getValExprUnaryOperatorRule() {
		return getValExprUnaryOperatorAccess().getRule();
	}
	
	//SmallIdName:
	//	name=SMALLID;
	public SmallIdNameElements getSmallIdNameAccess() {
		return pSmallIdName;
	}
	
	public ParserRule getSmallIdNameRule() {
		return getSmallIdNameAccess().getRule();
	}
	
	//ValExprError:
	//	'ERROR' error=STRING;
	public ValExprErrorElements getValExprErrorAccess() {
		return pValExprError;
	}
	
	public ParserRule getValExprErrorRule() {
		return getValExprErrorAccess().getRule();
	}
	
	//ValExprIte:
	//	'IF' conditionValExpr=ValExpr1 'THEN' thenValExpr=ValExpr1 'ELSE' elseValExpr=ValExpr1 'FI';
	public ValExprIteElements getValExprIteAccess() {
		return pValExprIte;
	}
	
	public ParserRule getValExprIteRule() {
		return getValExprIteAccess().getRule();
	}
	
	//ValExprLet:
	//	'LET' assignments+=Assignment (';' assignments+=Assignment)* 'IN' valExpr=ValExpr1 'NI';
	public ValExprLetElements getValExprLetAccess() {
		return pValExprLet;
	}
	
	public ParserRule getValExprLetRule() {
		return getValExprLetAccess().getRule();
	}
	
	//ValExprBracket:
	//	'(' valExpr=ValExpr ')';
	public ValExprBracketElements getValExprBracketAccess() {
		return pValExprBracket;
	}
	
	public ParserRule getValExprBracketRule() {
		return getValExprBracketAccess().getRule();
	}
	
	//ValExprRegex:
	//	'REGEX' '(' regex=STRING ')';
	public ValExprRegexElements getValExprRegexAccess() {
		return pValExprRegex;
	}
	
	public ParserRule getValExprRegexRule() {
		return getValExprRegexAccess().getRule();
	}
	
	//ValExprString:
	//	name=STRING;
	public ValExprStringElements getValExprStringAccess() {
		return pValExprString;
	}
	
	public ParserRule getValExprStringRule() {
		return getValExprStringAccess().getRule();
	}
	
	//ValExprInteger:
	//	name=BIG_INT;
	public ValExprIntegerElements getValExprIntegerAccess() {
		return pValExprInteger;
	}
	
	public ParserRule getValExprIntegerRule() {
		return getValExprIntegerAccess().getRule();
	}
	
	//ValExprContructorCall:
	//	name=ConstructorName ('(' neValExprList=NeValExprList ')')?;
	public ValExprContructorCallElements getValExprContructorCallAccess() {
		return pValExprContructorCall;
	}
	
	public ParserRule getValExprContructorCallRule() {
		return getValExprContructorCallAccess().getRule();
	}
	
	//ValExprFunctionCall:
	//	name=FuncName '(' neValExprList=NeValExprList? ')';
	public ValExprFunctionCallElements getValExprFunctionCallAccess() {
		return pValExprFunctionCall;
	}
	
	public ParserRule getValExprFunctionCallRule() {
		return getValExprFunctionCallAccess().getRule();
	}
	
	//ValExprVar:
	//	var=VarName;
	public ValExprVarElements getValExprVarAccess() {
		return pValExprVar;
	}
	
	public ParserRule getValExprVarRule() {
		return getValExprVarAccess().getRule();
	}
	
	//ValExprConst:
	//	const=ConstName;
	public ValExprConstElements getValExprConstAccess() {
		return pValExprConst;
	}
	
	public ParserRule getValExprConstRule() {
		return getValExprConstAccess().getRule();
	}
	
	//ConstructorName:
	//	name=CAPSID;
	public ConstructorNameElements getConstructorNameAccess() {
		return pConstructorName;
	}
	
	public ParserRule getConstructorNameRule() {
		return getConstructorNameAccess().getRule();
	}
	
	//FuncName:
	//	name=SMALLID;
	public FuncNameElements getFuncNameAccess() {
		return pFuncName;
	}
	
	public ParserRule getFuncNameRule() {
		return getFuncNameAccess().getRule();
	}
	
	//ConstName:
	//	name=SMALLID;
	public ConstNameElements getConstNameAccess() {
		return pConstName;
	}
	
	public ParserRule getConstNameRule() {
		return getConstNameAccess().getRule();
	}
	
	//terminal OPERATOR:
	//	'=' | '+' | '-' | '*' | '^' | '/' | '\\' | '<' | '>' | '@' | '|' | '&' | '%'+;
	public TerminalRule getOPERATORRule() {
		return tOPERATOR;
	}
	
	//terminal CAPSID:
	//	'A'..'Z' ('A'..'Z' | 'a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getCAPSIDRule() {
		return tCAPSID;
	}
	
	//terminal SMALLID:
	//	'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getSMALLIDRule() {
		return tSMALLID;
	}
	
	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ML_COMMENT:
	//	'{-'->'-}';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	////
	//BIG_INT ecore::EBigInteger:
	//	INT
	public BIG_INTElements getBIG_INTAccess() {
		return pBIG_INT;
	}
	
	public ParserRule getBIG_INTRule() {
		return getBIG_INTAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
