/**
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.torXakisDsl.util;

import nl.tno.torxakis.language.torXakisDsl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see nl.tno.torxakis.language.torXakisDsl.TorXakisDslPackage
 * @generated
 */
public class TorXakisDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TorXakisDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TorXakisDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = TorXakisDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case TorXakisDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.TYPE_DEFS:
      {
        TypeDefs typeDefs = (TypeDefs)theEObject;
        T result = caseTypeDefs(typeDefs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.TYPE_DEF:
      {
        TypeDef typeDef = (TypeDef)theEObject;
        T result = caseTypeDef(typeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.FUNC_DEFS:
      {
        FuncDefs funcDefs = (FuncDefs)theEObject;
        T result = caseFuncDefs(funcDefs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.FUNC_DEF:
      {
        FuncDef funcDef = (FuncDef)theEObject;
        T result = caseFuncDef(funcDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONST_DEFS:
      {
        ConstDefs constDefs = (ConstDefs)theEObject;
        T result = caseConstDefs(constDefs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONST_DEF:
      {
        ConstDef constDef = (ConstDef)theEObject;
        T result = caseConstDef(constDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROC_DEFS:
      {
        ProcDefs procDefs = (ProcDefs)theEObject;
        T result = caseProcDefs(procDefs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROC_DEF:
      {
        ProcDef procDef = (ProcDef)theEObject;
        T result = caseProcDef(procDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.STAUT_DEFS:
      {
        StautDefs stautDefs = (StautDefs)theEObject;
        T result = caseStautDefs(stautDefs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.STAUT_DEF:
      {
        StautDef stautDef = (StautDef)theEObject;
        T result = caseStautDef(stautDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CHANNEL_DEFS:
      {
        ChannelDefs channelDefs = (ChannelDefs)theEObject;
        T result = caseChannelDefs(channelDefs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CHANNEL_DEF:
      {
        ChannelDef channelDef = (ChannelDef)theEObject;
        T result = caseChannelDef(channelDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.MODEL_DEF:
      {
        ModelDef modelDef = (ModelDef)theEObject;
        T result = caseModelDef(modelDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.MAPPER_DEF:
      {
        MapperDef mapperDef = (MapperDef)theEObject;
        T result = caseMapperDef(mapperDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CNECT_DEF:
      {
        CnectDef cnectDef = (CnectDef)theEObject;
        T result = caseCnectDef(cnectDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.STAUT_ITEMS:
      {
        StautItems stautItems = (StautItems)theEObject;
        T result = caseStautItems(stautItems);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.STATE_ITEM:
      {
        StateItem stateItem = (StateItem)theEObject;
        T result = caseStateItem(stateItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAR_ITEM:
      {
        VarItem varItem = (VarItem)theEObject;
        T result = caseVarItem(varItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.INIT_ITEM:
      {
        InitItem initItem = (InitItem)theEObject;
        T result = caseInitItem(initItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.TRANS_ITEM:
      {
        TransItem transItem = (TransItem)theEObject;
        T result = caseTransItem(transItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.TRANSITION:
      {
        Transition transition = (Transition)theEObject;
        T result = caseTransition(transition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.UPDATE_LIST:
      {
        UpdateList updateList = (UpdateList)theEObject;
        T result = caseUpdateList(updateList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.UPDATE:
      {
        Update update = (Update)theEObject;
        T result = caseUpdate(update);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.MAPPER_NAME:
      {
        MapperName mapperName = (MapperName)theEObject;
        T result = caseMapperName(mapperName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_CONSTRUCTOR_LIST:
      {
        NeConstructorList neConstructorList = (NeConstructorList)theEObject;
        T result = caseNeConstructorList(neConstructorList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONSTRUCTOR:
      {
        Constructor constructor = (Constructor)theEObject;
        T result = caseConstructor(constructor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_FIELD_LIST:
      {
        NeFieldList neFieldList = (NeFieldList)theEObject;
        T result = caseNeFieldList(neFieldList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.FIELDS:
      {
        Fields fields = (Fields)theEObject;
        T result = caseFields(fields);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_FIELD_NAME_LIST:
      {
        NeFieldNameList neFieldNameList = (NeFieldNameList)theEObject;
        T result = caseNeFieldNameList(neFieldNameList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.FIELD_NAME:
      {
        FieldName fieldName = (FieldName)theEObject;
        T result = caseFieldName(fieldName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.EXIT_DECL:
      {
        ExitDecl exitDecl = (ExitDecl)theEObject;
        T result = caseExitDecl(exitDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.MODEL_NAME:
      {
        ModelName modelName = (ModelName)theEObject;
        T result = caseModelName(modelName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONNECTION_ITEM:
      {
        ConnectionItem connectionItem = (ConnectionItem)theEObject;
        T result = caseConnectionItem(connectionItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONNECTION_OUT:
      {
        ConnectionOut connectionOut = (ConnectionOut)theEObject;
        T result = caseConnectionOut(connectionOut);
        if (result == null) result = caseConnectionItem(connectionOut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONNECTION_IN:
      {
        ConnectionIn connectionIn = (ConnectionIn)theEObject;
        T result = caseConnectionIn(connectionIn);
        if (result == null) result = caseConnectionItem(connectionIn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.ENCODING:
      {
        Encoding encoding = (Encoding)theEObject;
        T result = caseEncoding(encoding);
        if (result == null) result = caseConnectionItem(encoding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.DECODING:
      {
        Decoding decoding = (Decoding)theEObject;
        T result = caseDecoding(decoding);
        if (result == null) result = caseConnectionItem(decoding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PORT_NUMBER:
      {
        PortNumber portNumber = (PortNumber)theEObject;
        T result = casePortNumber(portNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.HOST_NAME:
      {
        HostName hostName = (HostName)theEObject;
        T result = caseHostName(hostName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.STAUT_NAME:
      {
        StautName stautName = (StautName)theEObject;
        T result = caseStautName(stautName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CHANNEL_DEF_NAME:
      {
        ChannelDefName channelDefName = (ChannelDefName)theEObject;
        T result = caseChannelDefName(channelDefName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROC_NAME:
      {
        ProcName procName = (ProcName)theEObject;
        T result = caseProcName(procName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CNECT_NAME:
      {
        CnectName cnectName = (CnectName)theEObject;
        T result = caseCnectName(cnectName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_VARS_DECLARATION_LIST:
      {
        NeVarsDeclarationList neVarsDeclarationList = (NeVarsDeclarationList)theEObject;
        T result = caseNeVarsDeclarationList(neVarsDeclarationList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VARS_DECLARATION:
      {
        VarsDeclaration varsDeclaration = (VarsDeclaration)theEObject;
        T result = caseVarsDeclaration(varsDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_VAR_DECL_LIST:
      {
        NeVarDeclList neVarDeclList = (NeVarDeclList)theEObject;
        T result = caseNeVarDeclList(neVarDeclList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VARS_DECL:
      {
        VarsDecl varsDecl = (VarsDecl)theEObject;
        T result = caseVarsDecl(varsDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_CHANNELS_DECL_LIST:
      {
        NeChannelsDeclList neChannelsDeclList = (NeChannelsDeclList)theEObject;
        T result = caseNeChannelsDeclList(neChannelsDeclList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CHANNELS_DECL:
      {
        ChannelsDecl channelsDecl = (ChannelsDecl)theEObject;
        T result = caseChannelsDecl(channelsDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_TYPE_NAME_LIST:
      {
        NeTypeNameList neTypeNameList = (NeTypeNameList)theEObject;
        T result = caseNeTypeNameList(neTypeNameList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.TYPE_NAME:
      {
        TypeName typeName = (TypeName)theEObject;
        T result = caseTypeName(typeName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_CHANNEL_NAME_LIST:
      {
        NeChannelNameList neChannelNameList = (NeChannelNameList)theEObject;
        T result = caseNeChannelNameList(neChannelNameList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_ID_NAME_LIST:
      {
        NeIdNameList neIdNameList = (NeIdNameList)theEObject;
        T result = caseNeIdNameList(neIdNameList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.ID_NAME:
      {
        IdName idName = (IdName)theEObject;
        T result = caseIdName(idName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CHANNEL_NAME:
      {
        ChannelName channelName = (ChannelName)theEObject;
        T result = caseChannelName(channelName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_VAR_NAME_LIST:
      {
        NeVarNameList neVarNameList = (NeVarNameList)theEObject;
        T result = caseNeVarNameList(neVarNameList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAR_NAME:
      {
        VarName varName = (VarName)theEObject;
        T result = caseVarName(varName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR:
      {
        ProcessBehaviour processBehaviour = (ProcessBehaviour)theEObject;
        T result = caseProcessBehaviour(processBehaviour);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROC_CALL:
      {
        ProcCall procCall = (ProcCall)theEObject;
        T result = caseProcCall(procCall);
        if (result == null) result = caseProcessBehaviour(procCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.NE_VAL_EXPR_LIST:
      {
        NeValExprList neValExprList = (NeValExprList)theEObject;
        T result = caseNeValExprList(neValExprList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_BRACKET:
      {
        ProcessBehaviourBracket processBehaviourBracket = (ProcessBehaviourBracket)theEObject;
        T result = caseProcessBehaviourBracket(processBehaviourBracket);
        if (result == null) result = caseProcessBehaviour(processBehaviourBracket);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_HIDE:
      {
        ProcessBehaviourHide processBehaviourHide = (ProcessBehaviourHide)theEObject;
        T result = caseProcessBehaviourHide(processBehaviourHide);
        if (result == null) result = caseProcessBehaviour(processBehaviourHide);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_LET:
      {
        ProcessBehaviourLet processBehaviourLet = (ProcessBehaviourLet)theEObject;
        T result = caseProcessBehaviourLet(processBehaviourLet);
        if (result == null) result = caseProcessBehaviour(processBehaviourLet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_SEQUENCE:
      {
        ProcessBehaviourSequence processBehaviourSequence = (ProcessBehaviourSequence)theEObject;
        T result = caseProcessBehaviourSequence(processBehaviourSequence);
        if (result == null) result = caseProcessBehaviour(processBehaviourSequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_GUARDED:
      {
        ProcessBehaviourGuarded processBehaviourGuarded = (ProcessBehaviourGuarded)theEObject;
        T result = caseProcessBehaviourGuarded(processBehaviourGuarded);
        if (result == null) result = caseProcessBehaviour(processBehaviourGuarded);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_STOP:
      {
        ProcessBehaviourStop processBehaviourStop = (ProcessBehaviourStop)theEObject;
        T result = caseProcessBehaviourStop(processBehaviourStop);
        if (result == null) result = caseProcessBehaviour(processBehaviourStop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.SYNCHRONIZED_CHANNELS:
      {
        SynchronizedChannels synchronizedChannels = (SynchronizedChannels)theEObject;
        T result = caseSynchronizedChannels(synchronizedChannels);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONDITIONAL_COMMUNICATIONS:
      {
        ConditionalCommunications conditionalCommunications = (ConditionalCommunications)theEObject;
        T result = caseConditionalCommunications(conditionalCommunications);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.COMMUNICATIONS:
      {
        Communications communications = (Communications)theEObject;
        T result = caseCommunications(communications);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.COMMUNICATION:
      {
        Communication communication = (Communication)theEObject;
        T result = caseCommunication(communication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CHANNEL_OFFER:
      {
        ChannelOffer channelOffer = (ChannelOffer)theEObject;
        T result = caseChannelOffer(channelOffer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAR_DECL:
      {
        VarDecl varDecl = (VarDecl)theEObject;
        T result = caseVarDecl(varDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR:
      {
        ValExpr valExpr = (ValExpr)theEObject;
        T result = caseValExpr(valExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR2:
      {
        ValExpr2 valExpr2 = (ValExpr2)theEObject;
        T result = caseValExpr2(valExpr2);
        if (result == null) result = caseValExpr(valExpr2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_UNARY_OPERATOR:
      {
        ValExprUnaryOperator valExprUnaryOperator = (ValExprUnaryOperator)theEObject;
        T result = caseValExprUnaryOperator(valExprUnaryOperator);
        if (result == null) result = caseValExpr2(valExprUnaryOperator);
        if (result == null) result = caseValExpr(valExprUnaryOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.SMALL_ID_NAME:
      {
        SmallIdName smallIdName = (SmallIdName)theEObject;
        T result = caseSmallIdName(smallIdName);
        if (result == null) result = caseValExpr2(smallIdName);
        if (result == null) result = caseValExpr(smallIdName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_ERROR:
      {
        ValExprError valExprError = (ValExprError)theEObject;
        T result = caseValExprError(valExprError);
        if (result == null) result = caseValExpr2(valExprError);
        if (result == null) result = caseValExpr(valExprError);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_ITE:
      {
        ValExprIte valExprIte = (ValExprIte)theEObject;
        T result = caseValExprIte(valExprIte);
        if (result == null) result = caseValExpr(valExprIte);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_LET:
      {
        ValExprLet valExprLet = (ValExprLet)theEObject;
        T result = caseValExprLet(valExprLet);
        if (result == null) result = caseValExpr(valExprLet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_BRACKET:
      {
        ValExprBracket valExprBracket = (ValExprBracket)theEObject;
        T result = caseValExprBracket(valExprBracket);
        if (result == null) result = caseValExpr2(valExprBracket);
        if (result == null) result = caseValExpr(valExprBracket);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_REGEX:
      {
        ValExprRegex valExprRegex = (ValExprRegex)theEObject;
        T result = caseValExprRegex(valExprRegex);
        if (result == null) result = caseValExpr2(valExprRegex);
        if (result == null) result = caseValExpr(valExprRegex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_STRING:
      {
        ValExprString valExprString = (ValExprString)theEObject;
        T result = caseValExprString(valExprString);
        if (result == null) result = caseValExpr2(valExprString);
        if (result == null) result = caseValExpr(valExprString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_INTEGER:
      {
        ValExprInteger valExprInteger = (ValExprInteger)theEObject;
        T result = caseValExprInteger(valExprInteger);
        if (result == null) result = caseValExpr2(valExprInteger);
        if (result == null) result = caseValExpr(valExprInteger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_CONTRUCTOR_CALL:
      {
        ValExprContructorCall valExprContructorCall = (ValExprContructorCall)theEObject;
        T result = caseValExprContructorCall(valExprContructorCall);
        if (result == null) result = caseValExpr2(valExprContructorCall);
        if (result == null) result = caseValExpr(valExprContructorCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_FUNCTION_CALL:
      {
        ValExprFunctionCall valExprFunctionCall = (ValExprFunctionCall)theEObject;
        T result = caseValExprFunctionCall(valExprFunctionCall);
        if (result == null) result = caseValExpr2(valExprFunctionCall);
        if (result == null) result = caseValExpr(valExprFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_VAR:
      {
        ValExprVar valExprVar = (ValExprVar)theEObject;
        T result = caseValExprVar(valExprVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_CONST:
      {
        ValExprConst valExprConst = (ValExprConst)theEObject;
        T result = caseValExprConst(valExprConst);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONSTRUCTOR_NAME:
      {
        ConstructorName constructorName = (ConstructorName)theEObject;
        T result = caseConstructorName(constructorName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.FUNC_NAME:
      {
        FuncName funcName = (FuncName)theEObject;
        T result = caseFuncName(funcName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.CONST_NAME:
      {
        ConstName constName = (ConstName)theEObject;
        T result = caseConstName(constName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_ENABLE:
      {
        ProcessBehaviourEnable processBehaviourEnable = (ProcessBehaviourEnable)theEObject;
        T result = caseProcessBehaviourEnable(processBehaviourEnable);
        if (result == null) result = caseProcessBehaviour(processBehaviourEnable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_ENABLE_ACCEPT:
      {
        ProcessBehaviourEnableAccept processBehaviourEnableAccept = (ProcessBehaviourEnableAccept)theEObject;
        T result = caseProcessBehaviourEnableAccept(processBehaviourEnableAccept);
        if (result == null) result = caseProcessBehaviour(processBehaviourEnableAccept);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_DISABLE:
      {
        ProcessBehaviourDisable processBehaviourDisable = (ProcessBehaviourDisable)theEObject;
        T result = caseProcessBehaviourDisable(processBehaviourDisable);
        if (result == null) result = caseProcessBehaviour(processBehaviourDisable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_INTERRUPT:
      {
        ProcessBehaviourInterrupt processBehaviourInterrupt = (ProcessBehaviourInterrupt)theEObject;
        T result = caseProcessBehaviourInterrupt(processBehaviourInterrupt);
        if (result == null) result = caseProcessBehaviour(processBehaviourInterrupt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_SYNCHRONIZED:
      {
        ProcessBehaviourSynchronized processBehaviourSynchronized = (ProcessBehaviourSynchronized)theEObject;
        T result = caseProcessBehaviourSynchronized(processBehaviourSynchronized);
        if (result == null) result = caseProcessBehaviour(processBehaviourSynchronized);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_PARALLEL:
      {
        ProcessBehaviourParallel processBehaviourParallel = (ProcessBehaviourParallel)theEObject;
        T result = caseProcessBehaviourParallel(processBehaviourParallel);
        if (result == null) result = caseProcessBehaviour(processBehaviourParallel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_SYNCHRONIZE_CHANNELS:
      {
        ProcessBehaviourSynchronizeChannels processBehaviourSynchronizeChannels = (ProcessBehaviourSynchronizeChannels)theEObject;
        T result = caseProcessBehaviourSynchronizeChannels(processBehaviourSynchronizeChannels);
        if (result == null) result = caseProcessBehaviour(processBehaviourSynchronizeChannels);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.PROCESS_BEHAVIOUR_CHOICE:
      {
        ProcessBehaviourChoice processBehaviourChoice = (ProcessBehaviourChoice)theEObject;
        T result = caseProcessBehaviourChoice(processBehaviourChoice);
        if (result == null) result = caseProcessBehaviour(processBehaviourChoice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_OPERATOR:
      {
        ValExprOperator valExprOperator = (ValExprOperator)theEObject;
        T result = caseValExprOperator(valExprOperator);
        if (result == null) result = caseValExpr(valExprOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TorXakisDslPackage.VAL_EXPR_TEST:
      {
        ValExprTest valExprTest = (ValExprTest)theEObject;
        T result = caseValExprTest(valExprTest);
        if (result == null) result = caseValExpr(valExprTest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Defs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Defs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDefs(TypeDefs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDef(TypeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Defs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Defs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncDefs(FuncDefs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncDef(FuncDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Defs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Defs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstDefs(ConstDefs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstDef(ConstDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proc Defs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proc Defs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcDefs(ProcDefs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proc Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proc Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcDef(ProcDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Staut Defs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Staut Defs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStautDefs(StautDefs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Staut Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Staut Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStautDef(StautDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Defs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Defs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelDefs(ChannelDefs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelDef(ChannelDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelDef(ModelDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapper Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapper Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapperDef(MapperDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnect Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnect Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnectDef(CnectDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Staut Items</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Staut Items</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStautItems(StautItems object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateItem(StateItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarItem(VarItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Init Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Init Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitItem(InitItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trans Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trans Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransItem(TransItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransition(Transition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateList(UpdateList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdate(Update object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapper Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapper Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapperName(MapperName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Constructor List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Constructor List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeConstructorList(NeConstructorList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constructor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constructor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstructor(Constructor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Field List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Field List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeFieldList(NeFieldList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fields</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fields</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFields(Fields object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Field Name List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Field Name List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeFieldNameList(NeFieldNameList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldName(FieldName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exit Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exit Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExitDecl(ExitDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelName(ModelName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Connection Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Connection Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConnectionItem(ConnectionItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Connection Out</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Connection Out</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConnectionOut(ConnectionOut object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Connection In</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Connection In</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConnectionIn(ConnectionIn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Encoding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Encoding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEncoding(Encoding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Decoding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Decoding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDecoding(Decoding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePortNumber(PortNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Host Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Host Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHostName(HostName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Staut Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Staut Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStautName(StautName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Def Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Def Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelDefName(ChannelDefName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proc Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proc Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcName(ProcName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnect Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnect Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnectName(CnectName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Vars Declaration List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Vars Declaration List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeVarsDeclarationList(NeVarsDeclarationList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vars Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vars Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarsDeclaration(VarsDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Var Decl List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Var Decl List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeVarDeclList(NeVarDeclList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vars Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vars Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarsDecl(VarsDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Channels Decl List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Channels Decl List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeChannelsDeclList(NeChannelsDeclList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channels Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channels Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelsDecl(ChannelsDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Type Name List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Type Name List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeTypeNameList(NeTypeNameList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeName(TypeName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Channel Name List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Channel Name List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeChannelNameList(NeChannelNameList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Id Name List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Id Name List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeIdNameList(NeIdNameList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Id Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Id Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdName(IdName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelName(ChannelName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Var Name List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Var Name List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeVarNameList(NeVarNameList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarName(VarName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviour(ProcessBehaviour object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proc Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proc Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcCall(ProcCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ne Val Expr List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ne Val Expr List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeValExprList(NeValExprList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Bracket</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Bracket</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourBracket(ProcessBehaviourBracket object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Hide</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Hide</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourHide(ProcessBehaviourHide object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Let</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Let</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourLet(ProcessBehaviourLet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourSequence(ProcessBehaviourSequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Guarded</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Guarded</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourGuarded(ProcessBehaviourGuarded object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Stop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Stop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourStop(ProcessBehaviourStop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Synchronized Channels</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Synchronized Channels</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSynchronizedChannels(SynchronizedChannels object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Communications</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Communications</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalCommunications(ConditionalCommunications object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Communications</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Communications</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommunications(Communications object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Communication</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Communication</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommunication(Communication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Offer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Offer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelOffer(ChannelOffer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDecl(VarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExpr(ValExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExpr2(ValExpr2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Unary Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Unary Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprUnaryOperator(ValExprUnaryOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Small Id Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Small Id Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSmallIdName(SmallIdName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Error</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Error</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprError(ValExprError object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Ite</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Ite</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprIte(ValExprIte object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Let</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Let</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprLet(ValExprLet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Bracket</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Bracket</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprBracket(ValExprBracket object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Regex</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Regex</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprRegex(ValExprRegex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprString(ValExprString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprInteger(ValExprInteger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Contructor Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Contructor Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprContructorCall(ValExprContructorCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprFunctionCall(ValExprFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprVar(ValExprVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Const</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Const</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprConst(ValExprConst object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constructor Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constructor Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstructorName(ConstructorName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncName(FuncName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstName(ConstName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Enable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Enable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourEnable(ProcessBehaviourEnable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Enable Accept</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Enable Accept</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourEnableAccept(ProcessBehaviourEnableAccept object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Disable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Disable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourDisable(ProcessBehaviourDisable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Interrupt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Interrupt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourInterrupt(ProcessBehaviourInterrupt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Synchronized</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Synchronized</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourSynchronized(ProcessBehaviourSynchronized object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Parallel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Parallel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourParallel(ProcessBehaviourParallel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Synchronize Channels</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Synchronize Channels</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourSynchronizeChannels(ProcessBehaviourSynchronizeChannels object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviour Choice</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviour Choice</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviourChoice(ProcessBehaviourChoice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprOperator(ValExprOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val Expr Test</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val Expr Test</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValExprTest(ValExprTest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //TorXakisDslSwitch
