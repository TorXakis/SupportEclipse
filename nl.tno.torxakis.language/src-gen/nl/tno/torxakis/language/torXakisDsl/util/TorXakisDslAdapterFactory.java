/**
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.torXakisDsl.util;

import nl.tno.torxakis.language.torXakisDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see nl.tno.torxakis.language.torXakisDsl.TorXakisDslPackage
 * @generated
 */
public class TorXakisDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TorXakisDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TorXakisDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = TorXakisDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TorXakisDslSwitch<Adapter> modelSwitch =
    new TorXakisDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseTypeDefs(TypeDefs object)
      {
        return createTypeDefsAdapter();
      }
      @Override
      public Adapter caseTypeDef(TypeDef object)
      {
        return createTypeDefAdapter();
      }
      @Override
      public Adapter caseFuncDefs(FuncDefs object)
      {
        return createFuncDefsAdapter();
      }
      @Override
      public Adapter caseFuncDef(FuncDef object)
      {
        return createFuncDefAdapter();
      }
      @Override
      public Adapter caseConstDefs(ConstDefs object)
      {
        return createConstDefsAdapter();
      }
      @Override
      public Adapter caseConstDef(ConstDef object)
      {
        return createConstDefAdapter();
      }
      @Override
      public Adapter caseProcDefs(ProcDefs object)
      {
        return createProcDefsAdapter();
      }
      @Override
      public Adapter caseProcDef(ProcDef object)
      {
        return createProcDefAdapter();
      }
      @Override
      public Adapter caseStautDefs(StautDefs object)
      {
        return createStautDefsAdapter();
      }
      @Override
      public Adapter caseStautDef(StautDef object)
      {
        return createStautDefAdapter();
      }
      @Override
      public Adapter caseChannelDefs(ChannelDefs object)
      {
        return createChannelDefsAdapter();
      }
      @Override
      public Adapter caseChannelDef(ChannelDef object)
      {
        return createChannelDefAdapter();
      }
      @Override
      public Adapter caseModelDef(ModelDef object)
      {
        return createModelDefAdapter();
      }
      @Override
      public Adapter caseMapperDef(MapperDef object)
      {
        return createMapperDefAdapter();
      }
      @Override
      public Adapter caseCnectDef(CnectDef object)
      {
        return createCnectDefAdapter();
      }
      @Override
      public Adapter caseStautItems(StautItems object)
      {
        return createStautItemsAdapter();
      }
      @Override
      public Adapter caseStateItem(StateItem object)
      {
        return createStateItemAdapter();
      }
      @Override
      public Adapter caseVarItem(VarItem object)
      {
        return createVarItemAdapter();
      }
      @Override
      public Adapter caseInitItem(InitItem object)
      {
        return createInitItemAdapter();
      }
      @Override
      public Adapter caseTransItem(TransItem object)
      {
        return createTransItemAdapter();
      }
      @Override
      public Adapter caseTransition(Transition object)
      {
        return createTransitionAdapter();
      }
      @Override
      public Adapter caseUpdateList(UpdateList object)
      {
        return createUpdateListAdapter();
      }
      @Override
      public Adapter caseUpdate(Update object)
      {
        return createUpdateAdapter();
      }
      @Override
      public Adapter caseMapperName(MapperName object)
      {
        return createMapperNameAdapter();
      }
      @Override
      public Adapter caseNeConstructorList(NeConstructorList object)
      {
        return createNeConstructorListAdapter();
      }
      @Override
      public Adapter caseConstructor(Constructor object)
      {
        return createConstructorAdapter();
      }
      @Override
      public Adapter caseNeFieldList(NeFieldList object)
      {
        return createNeFieldListAdapter();
      }
      @Override
      public Adapter caseFields(Fields object)
      {
        return createFieldsAdapter();
      }
      @Override
      public Adapter caseNeFieldNameList(NeFieldNameList object)
      {
        return createNeFieldNameListAdapter();
      }
      @Override
      public Adapter caseFieldName(FieldName object)
      {
        return createFieldNameAdapter();
      }
      @Override
      public Adapter caseExitDecl(ExitDecl object)
      {
        return createExitDeclAdapter();
      }
      @Override
      public Adapter caseModelName(ModelName object)
      {
        return createModelNameAdapter();
      }
      @Override
      public Adapter caseConnectionItem(ConnectionItem object)
      {
        return createConnectionItemAdapter();
      }
      @Override
      public Adapter caseConnectionOut(ConnectionOut object)
      {
        return createConnectionOutAdapter();
      }
      @Override
      public Adapter caseConnectionIn(ConnectionIn object)
      {
        return createConnectionInAdapter();
      }
      @Override
      public Adapter caseEncoding(Encoding object)
      {
        return createEncodingAdapter();
      }
      @Override
      public Adapter caseDecoding(Decoding object)
      {
        return createDecodingAdapter();
      }
      @Override
      public Adapter casePortNumber(PortNumber object)
      {
        return createPortNumberAdapter();
      }
      @Override
      public Adapter caseHostName(HostName object)
      {
        return createHostNameAdapter();
      }
      @Override
      public Adapter caseStautName(StautName object)
      {
        return createStautNameAdapter();
      }
      @Override
      public Adapter caseChannelDefName(ChannelDefName object)
      {
        return createChannelDefNameAdapter();
      }
      @Override
      public Adapter caseProcName(ProcName object)
      {
        return createProcNameAdapter();
      }
      @Override
      public Adapter caseCnectName(CnectName object)
      {
        return createCnectNameAdapter();
      }
      @Override
      public Adapter caseNeVarsDeclarationList(NeVarsDeclarationList object)
      {
        return createNeVarsDeclarationListAdapter();
      }
      @Override
      public Adapter caseVarsDeclaration(VarsDeclaration object)
      {
        return createVarsDeclarationAdapter();
      }
      @Override
      public Adapter caseNeVarDeclList(NeVarDeclList object)
      {
        return createNeVarDeclListAdapter();
      }
      @Override
      public Adapter caseVarsDecl(VarsDecl object)
      {
        return createVarsDeclAdapter();
      }
      @Override
      public Adapter caseNeChannelsDeclList(NeChannelsDeclList object)
      {
        return createNeChannelsDeclListAdapter();
      }
      @Override
      public Adapter caseChannelsDecl(ChannelsDecl object)
      {
        return createChannelsDeclAdapter();
      }
      @Override
      public Adapter caseNeTypeNameList(NeTypeNameList object)
      {
        return createNeTypeNameListAdapter();
      }
      @Override
      public Adapter caseTypeName(TypeName object)
      {
        return createTypeNameAdapter();
      }
      @Override
      public Adapter caseNeChannelNameList(NeChannelNameList object)
      {
        return createNeChannelNameListAdapter();
      }
      @Override
      public Adapter caseNeIdNameList(NeIdNameList object)
      {
        return createNeIdNameListAdapter();
      }
      @Override
      public Adapter caseIdName(IdName object)
      {
        return createIdNameAdapter();
      }
      @Override
      public Adapter caseChannelName(ChannelName object)
      {
        return createChannelNameAdapter();
      }
      @Override
      public Adapter caseNeVarNameList(NeVarNameList object)
      {
        return createNeVarNameListAdapter();
      }
      @Override
      public Adapter caseVarName(VarName object)
      {
        return createVarNameAdapter();
      }
      @Override
      public Adapter caseProcessBehaviour(ProcessBehaviour object)
      {
        return createProcessBehaviourAdapter();
      }
      @Override
      public Adapter caseProcCall(ProcCall object)
      {
        return createProcCallAdapter();
      }
      @Override
      public Adapter caseNeValExprList(NeValExprList object)
      {
        return createNeValExprListAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourBracket(ProcessBehaviourBracket object)
      {
        return createProcessBehaviourBracketAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourHide(ProcessBehaviourHide object)
      {
        return createProcessBehaviourHideAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourLet(ProcessBehaviourLet object)
      {
        return createProcessBehaviourLetAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourSequence(ProcessBehaviourSequence object)
      {
        return createProcessBehaviourSequenceAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourGuarded(ProcessBehaviourGuarded object)
      {
        return createProcessBehaviourGuardedAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourStop(ProcessBehaviourStop object)
      {
        return createProcessBehaviourStopAdapter();
      }
      @Override
      public Adapter caseSynchronizedChannels(SynchronizedChannels object)
      {
        return createSynchronizedChannelsAdapter();
      }
      @Override
      public Adapter caseConditionalCommunications(ConditionalCommunications object)
      {
        return createConditionalCommunicationsAdapter();
      }
      @Override
      public Adapter caseCommunications(Communications object)
      {
        return createCommunicationsAdapter();
      }
      @Override
      public Adapter caseCommunication(Communication object)
      {
        return createCommunicationAdapter();
      }
      @Override
      public Adapter caseChannelOffer(ChannelOffer object)
      {
        return createChannelOfferAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseVarDecl(VarDecl object)
      {
        return createVarDeclAdapter();
      }
      @Override
      public Adapter caseValExpr(ValExpr object)
      {
        return createValExprAdapter();
      }
      @Override
      public Adapter caseValExpr2(ValExpr2 object)
      {
        return createValExpr2Adapter();
      }
      @Override
      public Adapter caseValExprUnaryOperator(ValExprUnaryOperator object)
      {
        return createValExprUnaryOperatorAdapter();
      }
      @Override
      public Adapter caseSmallIdName(SmallIdName object)
      {
        return createSmallIdNameAdapter();
      }
      @Override
      public Adapter caseValExprError(ValExprError object)
      {
        return createValExprErrorAdapter();
      }
      @Override
      public Adapter caseValExprIte(ValExprIte object)
      {
        return createValExprIteAdapter();
      }
      @Override
      public Adapter caseValExprLet(ValExprLet object)
      {
        return createValExprLetAdapter();
      }
      @Override
      public Adapter caseValExprBracket(ValExprBracket object)
      {
        return createValExprBracketAdapter();
      }
      @Override
      public Adapter caseValExprRegex(ValExprRegex object)
      {
        return createValExprRegexAdapter();
      }
      @Override
      public Adapter caseValExprString(ValExprString object)
      {
        return createValExprStringAdapter();
      }
      @Override
      public Adapter caseValExprInteger(ValExprInteger object)
      {
        return createValExprIntegerAdapter();
      }
      @Override
      public Adapter caseValExprContructorCall(ValExprContructorCall object)
      {
        return createValExprContructorCallAdapter();
      }
      @Override
      public Adapter caseValExprFunctionCall(ValExprFunctionCall object)
      {
        return createValExprFunctionCallAdapter();
      }
      @Override
      public Adapter caseValExprVar(ValExprVar object)
      {
        return createValExprVarAdapter();
      }
      @Override
      public Adapter caseValExprConst(ValExprConst object)
      {
        return createValExprConstAdapter();
      }
      @Override
      public Adapter caseConstructorName(ConstructorName object)
      {
        return createConstructorNameAdapter();
      }
      @Override
      public Adapter caseFuncName(FuncName object)
      {
        return createFuncNameAdapter();
      }
      @Override
      public Adapter caseConstName(ConstName object)
      {
        return createConstNameAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourEnable(ProcessBehaviourEnable object)
      {
        return createProcessBehaviourEnableAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourEnableAccept(ProcessBehaviourEnableAccept object)
      {
        return createProcessBehaviourEnableAcceptAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourDisable(ProcessBehaviourDisable object)
      {
        return createProcessBehaviourDisableAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourInterrupt(ProcessBehaviourInterrupt object)
      {
        return createProcessBehaviourInterruptAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourSynchronized(ProcessBehaviourSynchronized object)
      {
        return createProcessBehaviourSynchronizedAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourParallel(ProcessBehaviourParallel object)
      {
        return createProcessBehaviourParallelAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourSynchronizeChannels(ProcessBehaviourSynchronizeChannels object)
      {
        return createProcessBehaviourSynchronizeChannelsAdapter();
      }
      @Override
      public Adapter caseProcessBehaviourChoice(ProcessBehaviourChoice object)
      {
        return createProcessBehaviourChoiceAdapter();
      }
      @Override
      public Adapter caseValExprOperator(ValExprOperator object)
      {
        return createValExprOperatorAdapter();
      }
      @Override
      public Adapter caseValExprTest(ValExprTest object)
      {
        return createValExprTestAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.TypeDefs <em>Type Defs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.TypeDefs
   * @generated
   */
  public Adapter createTypeDefsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.TypeDef <em>Type Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.TypeDef
   * @generated
   */
  public Adapter createTypeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.FuncDefs <em>Func Defs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.FuncDefs
   * @generated
   */
  public Adapter createFuncDefsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.FuncDef <em>Func Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.FuncDef
   * @generated
   */
  public Adapter createFuncDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ConstDefs <em>Const Defs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ConstDefs
   * @generated
   */
  public Adapter createConstDefsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ConstDef <em>Const Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ConstDef
   * @generated
   */
  public Adapter createConstDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcDefs <em>Proc Defs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcDefs
   * @generated
   */
  public Adapter createProcDefsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcDef <em>Proc Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcDef
   * @generated
   */
  public Adapter createProcDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.StautDefs <em>Staut Defs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.StautDefs
   * @generated
   */
  public Adapter createStautDefsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.StautDef <em>Staut Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.StautDef
   * @generated
   */
  public Adapter createStautDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ChannelDefs <em>Channel Defs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ChannelDefs
   * @generated
   */
  public Adapter createChannelDefsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ChannelDef <em>Channel Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ChannelDef
   * @generated
   */
  public Adapter createChannelDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ModelDef <em>Model Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ModelDef
   * @generated
   */
  public Adapter createModelDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.MapperDef <em>Mapper Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.MapperDef
   * @generated
   */
  public Adapter createMapperDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.CnectDef <em>Cnect Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.CnectDef
   * @generated
   */
  public Adapter createCnectDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.StautItems <em>Staut Items</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.StautItems
   * @generated
   */
  public Adapter createStautItemsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.StateItem <em>State Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.StateItem
   * @generated
   */
  public Adapter createStateItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.VarItem <em>Var Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.VarItem
   * @generated
   */
  public Adapter createVarItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.InitItem <em>Init Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.InitItem
   * @generated
   */
  public Adapter createInitItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.TransItem <em>Trans Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.TransItem
   * @generated
   */
  public Adapter createTransItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Transition <em>Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Transition
   * @generated
   */
  public Adapter createTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.UpdateList <em>Update List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.UpdateList
   * @generated
   */
  public Adapter createUpdateListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Update <em>Update</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Update
   * @generated
   */
  public Adapter createUpdateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.MapperName <em>Mapper Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.MapperName
   * @generated
   */
  public Adapter createMapperNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeConstructorList <em>Ne Constructor List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeConstructorList
   * @generated
   */
  public Adapter createNeConstructorListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Constructor <em>Constructor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Constructor
   * @generated
   */
  public Adapter createConstructorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeFieldList <em>Ne Field List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeFieldList
   * @generated
   */
  public Adapter createNeFieldListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Fields <em>Fields</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Fields
   * @generated
   */
  public Adapter createFieldsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeFieldNameList <em>Ne Field Name List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeFieldNameList
   * @generated
   */
  public Adapter createNeFieldNameListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.FieldName <em>Field Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.FieldName
   * @generated
   */
  public Adapter createFieldNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ExitDecl <em>Exit Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ExitDecl
   * @generated
   */
  public Adapter createExitDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ModelName <em>Model Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ModelName
   * @generated
   */
  public Adapter createModelNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ConnectionItem <em>Connection Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ConnectionItem
   * @generated
   */
  public Adapter createConnectionItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ConnectionOut <em>Connection Out</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ConnectionOut
   * @generated
   */
  public Adapter createConnectionOutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ConnectionIn <em>Connection In</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ConnectionIn
   * @generated
   */
  public Adapter createConnectionInAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Encoding <em>Encoding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Encoding
   * @generated
   */
  public Adapter createEncodingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Decoding <em>Decoding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Decoding
   * @generated
   */
  public Adapter createDecodingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.PortNumber <em>Port Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.PortNumber
   * @generated
   */
  public Adapter createPortNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.HostName <em>Host Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.HostName
   * @generated
   */
  public Adapter createHostNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.StautName <em>Staut Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.StautName
   * @generated
   */
  public Adapter createStautNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ChannelDefName <em>Channel Def Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ChannelDefName
   * @generated
   */
  public Adapter createChannelDefNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcName <em>Proc Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcName
   * @generated
   */
  public Adapter createProcNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.CnectName <em>Cnect Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.CnectName
   * @generated
   */
  public Adapter createCnectNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeVarsDeclarationList <em>Ne Vars Declaration List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeVarsDeclarationList
   * @generated
   */
  public Adapter createNeVarsDeclarationListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.VarsDeclaration <em>Vars Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.VarsDeclaration
   * @generated
   */
  public Adapter createVarsDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeVarDeclList <em>Ne Var Decl List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeVarDeclList
   * @generated
   */
  public Adapter createNeVarDeclListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.VarsDecl <em>Vars Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.VarsDecl
   * @generated
   */
  public Adapter createVarsDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeChannelsDeclList <em>Ne Channels Decl List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeChannelsDeclList
   * @generated
   */
  public Adapter createNeChannelsDeclListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ChannelsDecl <em>Channels Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ChannelsDecl
   * @generated
   */
  public Adapter createChannelsDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeTypeNameList <em>Ne Type Name List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeTypeNameList
   * @generated
   */
  public Adapter createNeTypeNameListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.TypeName <em>Type Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.TypeName
   * @generated
   */
  public Adapter createTypeNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeChannelNameList <em>Ne Channel Name List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeChannelNameList
   * @generated
   */
  public Adapter createNeChannelNameListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeIdNameList <em>Ne Id Name List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeIdNameList
   * @generated
   */
  public Adapter createNeIdNameListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.IdName <em>Id Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.IdName
   * @generated
   */
  public Adapter createIdNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ChannelName <em>Channel Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ChannelName
   * @generated
   */
  public Adapter createChannelNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeVarNameList <em>Ne Var Name List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeVarNameList
   * @generated
   */
  public Adapter createNeVarNameListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.VarName <em>Var Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.VarName
   * @generated
   */
  public Adapter createVarNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviour <em>Process Behaviour</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviour
   * @generated
   */
  public Adapter createProcessBehaviourAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcCall <em>Proc Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcCall
   * @generated
   */
  public Adapter createProcCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.NeValExprList <em>Ne Val Expr List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.NeValExprList
   * @generated
   */
  public Adapter createNeValExprListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourBracket <em>Process Behaviour Bracket</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourBracket
   * @generated
   */
  public Adapter createProcessBehaviourBracketAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourHide <em>Process Behaviour Hide</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourHide
   * @generated
   */
  public Adapter createProcessBehaviourHideAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourLet <em>Process Behaviour Let</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourLet
   * @generated
   */
  public Adapter createProcessBehaviourLetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSequence <em>Process Behaviour Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSequence
   * @generated
   */
  public Adapter createProcessBehaviourSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourGuarded <em>Process Behaviour Guarded</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourGuarded
   * @generated
   */
  public Adapter createProcessBehaviourGuardedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourStop <em>Process Behaviour Stop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourStop
   * @generated
   */
  public Adapter createProcessBehaviourStopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.SynchronizedChannels <em>Synchronized Channels</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.SynchronizedChannels
   * @generated
   */
  public Adapter createSynchronizedChannelsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ConditionalCommunications <em>Conditional Communications</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ConditionalCommunications
   * @generated
   */
  public Adapter createConditionalCommunicationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Communications <em>Communications</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Communications
   * @generated
   */
  public Adapter createCommunicationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Communication <em>Communication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Communication
   * @generated
   */
  public Adapter createCommunicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ChannelOffer <em>Channel Offer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ChannelOffer
   * @generated
   */
  public Adapter createChannelOfferAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.VarDecl <em>Var Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.VarDecl
   * @generated
   */
  public Adapter createVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExpr <em>Val Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExpr
   * @generated
   */
  public Adapter createValExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExpr2 <em>Val Expr2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExpr2
   * @generated
   */
  public Adapter createValExpr2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprUnaryOperator <em>Val Expr Unary Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprUnaryOperator
   * @generated
   */
  public Adapter createValExprUnaryOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.SmallIdName <em>Small Id Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.SmallIdName
   * @generated
   */
  public Adapter createSmallIdNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprError <em>Val Expr Error</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprError
   * @generated
   */
  public Adapter createValExprErrorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprIte <em>Val Expr Ite</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprIte
   * @generated
   */
  public Adapter createValExprIteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprLet <em>Val Expr Let</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprLet
   * @generated
   */
  public Adapter createValExprLetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprBracket <em>Val Expr Bracket</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprBracket
   * @generated
   */
  public Adapter createValExprBracketAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprRegex <em>Val Expr Regex</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprRegex
   * @generated
   */
  public Adapter createValExprRegexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprString <em>Val Expr String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprString
   * @generated
   */
  public Adapter createValExprStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprInteger <em>Val Expr Integer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprInteger
   * @generated
   */
  public Adapter createValExprIntegerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprContructorCall <em>Val Expr Contructor Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprContructorCall
   * @generated
   */
  public Adapter createValExprContructorCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprFunctionCall <em>Val Expr Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprFunctionCall
   * @generated
   */
  public Adapter createValExprFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprVar <em>Val Expr Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprVar
   * @generated
   */
  public Adapter createValExprVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprConst <em>Val Expr Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprConst
   * @generated
   */
  public Adapter createValExprConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ConstructorName <em>Constructor Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ConstructorName
   * @generated
   */
  public Adapter createConstructorNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.FuncName <em>Func Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.FuncName
   * @generated
   */
  public Adapter createFuncNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ConstName <em>Const Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ConstName
   * @generated
   */
  public Adapter createConstNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourEnable <em>Process Behaviour Enable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourEnable
   * @generated
   */
  public Adapter createProcessBehaviourEnableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourEnableAccept <em>Process Behaviour Enable Accept</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourEnableAccept
   * @generated
   */
  public Adapter createProcessBehaviourEnableAcceptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourDisable <em>Process Behaviour Disable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourDisable
   * @generated
   */
  public Adapter createProcessBehaviourDisableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourInterrupt <em>Process Behaviour Interrupt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourInterrupt
   * @generated
   */
  public Adapter createProcessBehaviourInterruptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSynchronized <em>Process Behaviour Synchronized</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSynchronized
   * @generated
   */
  public Adapter createProcessBehaviourSynchronizedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourParallel <em>Process Behaviour Parallel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourParallel
   * @generated
   */
  public Adapter createProcessBehaviourParallelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSynchronizeChannels <em>Process Behaviour Synchronize Channels</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSynchronizeChannels
   * @generated
   */
  public Adapter createProcessBehaviourSynchronizeChannelsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourChoice <em>Process Behaviour Choice</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourChoice
   * @generated
   */
  public Adapter createProcessBehaviourChoiceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprOperator <em>Val Expr Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprOperator
   * @generated
   */
  public Adapter createValExprOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tno.torxakis.language.torXakisDsl.ValExprTest <em>Val Expr Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tno.torxakis.language.torXakisDsl.ValExprTest
   * @generated
   */
  public Adapter createValExprTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //TorXakisDslAdapterFactory
