/**
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.torXakisDsl.impl;

import nl.tno.torxakis.language.torXakisDsl.ChannelsDecl;
import nl.tno.torxakis.language.torXakisDsl.ConnectionOut;
import nl.tno.torxakis.language.torXakisDsl.HostName;
import nl.tno.torxakis.language.torXakisDsl.PortNumber;
import nl.tno.torxakis.language.torXakisDsl.TorXakisDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connection Out</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.ConnectionOutImpl#getChannelsDecl <em>Channels Decl</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.ConnectionOutImpl#getHostName <em>Host Name</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.ConnectionOutImpl#getPortNumber <em>Port Number</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConnectionOutImpl extends ConnectionItemImpl implements ConnectionOut
{
  /**
   * The cached value of the '{@link #getChannelsDecl() <em>Channels Decl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChannelsDecl()
   * @generated
   * @ordered
   */
  protected ChannelsDecl channelsDecl;

  /**
   * The cached value of the '{@link #getHostName() <em>Host Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHostName()
   * @generated
   * @ordered
   */
  protected HostName hostName;

  /**
   * The cached value of the '{@link #getPortNumber() <em>Port Number</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPortNumber()
   * @generated
   * @ordered
   */
  protected PortNumber portNumber;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectionOutImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TorXakisDslPackage.Literals.CONNECTION_OUT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChannelsDecl getChannelsDecl()
  {
    return channelsDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChannelsDecl(ChannelsDecl newChannelsDecl, NotificationChain msgs)
  {
    ChannelsDecl oldChannelsDecl = channelsDecl;
    channelsDecl = newChannelsDecl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL, oldChannelsDecl, newChannelsDecl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChannelsDecl(ChannelsDecl newChannelsDecl)
  {
    if (newChannelsDecl != channelsDecl)
    {
      NotificationChain msgs = null;
      if (channelsDecl != null)
        msgs = ((InternalEObject)channelsDecl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL, null, msgs);
      if (newChannelsDecl != null)
        msgs = ((InternalEObject)newChannelsDecl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL, null, msgs);
      msgs = basicSetChannelsDecl(newChannelsDecl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL, newChannelsDecl, newChannelsDecl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HostName getHostName()
  {
    return hostName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHostName(HostName newHostName, NotificationChain msgs)
  {
    HostName oldHostName = hostName;
    hostName = newHostName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CONNECTION_OUT__HOST_NAME, oldHostName, newHostName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHostName(HostName newHostName)
  {
    if (newHostName != hostName)
    {
      NotificationChain msgs = null;
      if (hostName != null)
        msgs = ((InternalEObject)hostName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CONNECTION_OUT__HOST_NAME, null, msgs);
      if (newHostName != null)
        msgs = ((InternalEObject)newHostName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CONNECTION_OUT__HOST_NAME, null, msgs);
      msgs = basicSetHostName(newHostName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CONNECTION_OUT__HOST_NAME, newHostName, newHostName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PortNumber getPortNumber()
  {
    return portNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPortNumber(PortNumber newPortNumber, NotificationChain msgs)
  {
    PortNumber oldPortNumber = portNumber;
    portNumber = newPortNumber;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER, oldPortNumber, newPortNumber);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPortNumber(PortNumber newPortNumber)
  {
    if (newPortNumber != portNumber)
    {
      NotificationChain msgs = null;
      if (portNumber != null)
        msgs = ((InternalEObject)portNumber).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER, null, msgs);
      if (newPortNumber != null)
        msgs = ((InternalEObject)newPortNumber).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER, null, msgs);
      msgs = basicSetPortNumber(newPortNumber, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER, newPortNumber, newPortNumber));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL:
        return basicSetChannelsDecl(null, msgs);
      case TorXakisDslPackage.CONNECTION_OUT__HOST_NAME:
        return basicSetHostName(null, msgs);
      case TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER:
        return basicSetPortNumber(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL:
        return getChannelsDecl();
      case TorXakisDslPackage.CONNECTION_OUT__HOST_NAME:
        return getHostName();
      case TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER:
        return getPortNumber();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL:
        setChannelsDecl((ChannelsDecl)newValue);
        return;
      case TorXakisDslPackage.CONNECTION_OUT__HOST_NAME:
        setHostName((HostName)newValue);
        return;
      case TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER:
        setPortNumber((PortNumber)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL:
        setChannelsDecl((ChannelsDecl)null);
        return;
      case TorXakisDslPackage.CONNECTION_OUT__HOST_NAME:
        setHostName((HostName)null);
        return;
      case TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER:
        setPortNumber((PortNumber)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CONNECTION_OUT__CHANNELS_DECL:
        return channelsDecl != null;
      case TorXakisDslPackage.CONNECTION_OUT__HOST_NAME:
        return hostName != null;
      case TorXakisDslPackage.CONNECTION_OUT__PORT_NUMBER:
        return portNumber != null;
    }
    return super.eIsSet(featureID);
  }

} //ConnectionOutImpl
