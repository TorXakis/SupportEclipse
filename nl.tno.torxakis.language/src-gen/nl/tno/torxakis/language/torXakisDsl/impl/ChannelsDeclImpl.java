/**
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.torXakisDsl.impl;

import nl.tno.torxakis.language.torXakisDsl.ChannelsDecl;
import nl.tno.torxakis.language.torXakisDsl.NeChannelNameList;
import nl.tno.torxakis.language.torXakisDsl.NeTypeNameList;
import nl.tno.torxakis.language.torXakisDsl.TorXakisDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Channels Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.ChannelsDeclImpl#getNeChannelNameList <em>Ne Channel Name List</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.ChannelsDeclImpl#getNeTypeNameList <em>Ne Type Name List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChannelsDeclImpl extends MinimalEObjectImpl.Container implements ChannelsDecl
{
  /**
   * The cached value of the '{@link #getNeChannelNameList() <em>Ne Channel Name List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeChannelNameList()
   * @generated
   * @ordered
   */
  protected NeChannelNameList neChannelNameList;

  /**
   * The cached value of the '{@link #getNeTypeNameList() <em>Ne Type Name List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeTypeNameList()
   * @generated
   * @ordered
   */
  protected NeTypeNameList neTypeNameList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChannelsDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TorXakisDslPackage.Literals.CHANNELS_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NeChannelNameList getNeChannelNameList()
  {
    return neChannelNameList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNeChannelNameList(NeChannelNameList newNeChannelNameList, NotificationChain msgs)
  {
    NeChannelNameList oldNeChannelNameList = neChannelNameList;
    neChannelNameList = newNeChannelNameList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST, oldNeChannelNameList, newNeChannelNameList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNeChannelNameList(NeChannelNameList newNeChannelNameList)
  {
    if (newNeChannelNameList != neChannelNameList)
    {
      NotificationChain msgs = null;
      if (neChannelNameList != null)
        msgs = ((InternalEObject)neChannelNameList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST, null, msgs);
      if (newNeChannelNameList != null)
        msgs = ((InternalEObject)newNeChannelNameList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST, null, msgs);
      msgs = basicSetNeChannelNameList(newNeChannelNameList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST, newNeChannelNameList, newNeChannelNameList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NeTypeNameList getNeTypeNameList()
  {
    return neTypeNameList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNeTypeNameList(NeTypeNameList newNeTypeNameList, NotificationChain msgs)
  {
    NeTypeNameList oldNeTypeNameList = neTypeNameList;
    neTypeNameList = newNeTypeNameList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST, oldNeTypeNameList, newNeTypeNameList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNeTypeNameList(NeTypeNameList newNeTypeNameList)
  {
    if (newNeTypeNameList != neTypeNameList)
    {
      NotificationChain msgs = null;
      if (neTypeNameList != null)
        msgs = ((InternalEObject)neTypeNameList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST, null, msgs);
      if (newNeTypeNameList != null)
        msgs = ((InternalEObject)newNeTypeNameList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST, null, msgs);
      msgs = basicSetNeTypeNameList(newNeTypeNameList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST, newNeTypeNameList, newNeTypeNameList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST:
        return basicSetNeChannelNameList(null, msgs);
      case TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST:
        return basicSetNeTypeNameList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST:
        return getNeChannelNameList();
      case TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST:
        return getNeTypeNameList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST:
        setNeChannelNameList((NeChannelNameList)newValue);
        return;
      case TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST:
        setNeTypeNameList((NeTypeNameList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST:
        setNeChannelNameList((NeChannelNameList)null);
        return;
      case TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST:
        setNeTypeNameList((NeTypeNameList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CHANNELS_DECL__NE_CHANNEL_NAME_LIST:
        return neChannelNameList != null;
      case TorXakisDslPackage.CHANNELS_DECL__NE_TYPE_NAME_LIST:
        return neTypeNameList != null;
    }
    return super.eIsSet(featureID);
  }

} //ChannelsDeclImpl
