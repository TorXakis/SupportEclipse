/**
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.torXakisDsl.impl;

import nl.tno.torxakis.language.torXakisDsl.MapperDef;
import nl.tno.torxakis.language.torXakisDsl.MapperName;
import nl.tno.torxakis.language.torXakisDsl.NeChannelsDeclList;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviour;
import nl.tno.torxakis.language.torXakisDsl.TorXakisDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mapper Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.MapperDefImpl#getMapperName <em>Mapper Name</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.MapperDefImpl#getChanInNeChannelsDeclList <em>Chan In Ne Channels Decl List</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.MapperDefImpl#getChanOutNeChannelsDeclList <em>Chan Out Ne Channels Decl List</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.MapperDefImpl#getProcessBehaviour <em>Process Behaviour</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MapperDefImpl extends MinimalEObjectImpl.Container implements MapperDef
{
  /**
   * The cached value of the '{@link #getMapperName() <em>Mapper Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMapperName()
   * @generated
   * @ordered
   */
  protected MapperName mapperName;

  /**
   * The cached value of the '{@link #getChanInNeChannelsDeclList() <em>Chan In Ne Channels Decl List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChanInNeChannelsDeclList()
   * @generated
   * @ordered
   */
  protected NeChannelsDeclList chanInNeChannelsDeclList;

  /**
   * The cached value of the '{@link #getChanOutNeChannelsDeclList() <em>Chan Out Ne Channels Decl List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChanOutNeChannelsDeclList()
   * @generated
   * @ordered
   */
  protected NeChannelsDeclList chanOutNeChannelsDeclList;

  /**
   * The cached value of the '{@link #getProcessBehaviour() <em>Process Behaviour</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcessBehaviour()
   * @generated
   * @ordered
   */
  protected ProcessBehaviour processBehaviour;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MapperDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TorXakisDslPackage.Literals.MAPPER_DEF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapperName getMapperName()
  {
    return mapperName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMapperName(MapperName newMapperName, NotificationChain msgs)
  {
    MapperName oldMapperName = mapperName;
    mapperName = newMapperName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME, oldMapperName, newMapperName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMapperName(MapperName newMapperName)
  {
    if (newMapperName != mapperName)
    {
      NotificationChain msgs = null;
      if (mapperName != null)
        msgs = ((InternalEObject)mapperName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME, null, msgs);
      if (newMapperName != null)
        msgs = ((InternalEObject)newMapperName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME, null, msgs);
      msgs = basicSetMapperName(newMapperName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME, newMapperName, newMapperName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NeChannelsDeclList getChanInNeChannelsDeclList()
  {
    return chanInNeChannelsDeclList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChanInNeChannelsDeclList(NeChannelsDeclList newChanInNeChannelsDeclList, NotificationChain msgs)
  {
    NeChannelsDeclList oldChanInNeChannelsDeclList = chanInNeChannelsDeclList;
    chanInNeChannelsDeclList = newChanInNeChannelsDeclList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST, oldChanInNeChannelsDeclList, newChanInNeChannelsDeclList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChanInNeChannelsDeclList(NeChannelsDeclList newChanInNeChannelsDeclList)
  {
    if (newChanInNeChannelsDeclList != chanInNeChannelsDeclList)
    {
      NotificationChain msgs = null;
      if (chanInNeChannelsDeclList != null)
        msgs = ((InternalEObject)chanInNeChannelsDeclList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST, null, msgs);
      if (newChanInNeChannelsDeclList != null)
        msgs = ((InternalEObject)newChanInNeChannelsDeclList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST, null, msgs);
      msgs = basicSetChanInNeChannelsDeclList(newChanInNeChannelsDeclList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST, newChanInNeChannelsDeclList, newChanInNeChannelsDeclList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NeChannelsDeclList getChanOutNeChannelsDeclList()
  {
    return chanOutNeChannelsDeclList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChanOutNeChannelsDeclList(NeChannelsDeclList newChanOutNeChannelsDeclList, NotificationChain msgs)
  {
    NeChannelsDeclList oldChanOutNeChannelsDeclList = chanOutNeChannelsDeclList;
    chanOutNeChannelsDeclList = newChanOutNeChannelsDeclList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST, oldChanOutNeChannelsDeclList, newChanOutNeChannelsDeclList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChanOutNeChannelsDeclList(NeChannelsDeclList newChanOutNeChannelsDeclList)
  {
    if (newChanOutNeChannelsDeclList != chanOutNeChannelsDeclList)
    {
      NotificationChain msgs = null;
      if (chanOutNeChannelsDeclList != null)
        msgs = ((InternalEObject)chanOutNeChannelsDeclList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST, null, msgs);
      if (newChanOutNeChannelsDeclList != null)
        msgs = ((InternalEObject)newChanOutNeChannelsDeclList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST, null, msgs);
      msgs = basicSetChanOutNeChannelsDeclList(newChanOutNeChannelsDeclList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST, newChanOutNeChannelsDeclList, newChanOutNeChannelsDeclList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessBehaviour getProcessBehaviour()
  {
    return processBehaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcessBehaviour(ProcessBehaviour newProcessBehaviour, NotificationChain msgs)
  {
    ProcessBehaviour oldProcessBehaviour = processBehaviour;
    processBehaviour = newProcessBehaviour;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR, oldProcessBehaviour, newProcessBehaviour);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProcessBehaviour(ProcessBehaviour newProcessBehaviour)
  {
    if (newProcessBehaviour != processBehaviour)
    {
      NotificationChain msgs = null;
      if (processBehaviour != null)
        msgs = ((InternalEObject)processBehaviour).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR, null, msgs);
      if (newProcessBehaviour != null)
        msgs = ((InternalEObject)newProcessBehaviour).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR, null, msgs);
      msgs = basicSetProcessBehaviour(newProcessBehaviour, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR, newProcessBehaviour, newProcessBehaviour));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME:
        return basicSetMapperName(null, msgs);
      case TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST:
        return basicSetChanInNeChannelsDeclList(null, msgs);
      case TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST:
        return basicSetChanOutNeChannelsDeclList(null, msgs);
      case TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR:
        return basicSetProcessBehaviour(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME:
        return getMapperName();
      case TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST:
        return getChanInNeChannelsDeclList();
      case TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST:
        return getChanOutNeChannelsDeclList();
      case TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR:
        return getProcessBehaviour();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME:
        setMapperName((MapperName)newValue);
        return;
      case TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST:
        setChanInNeChannelsDeclList((NeChannelsDeclList)newValue);
        return;
      case TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST:
        setChanOutNeChannelsDeclList((NeChannelsDeclList)newValue);
        return;
      case TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR:
        setProcessBehaviour((ProcessBehaviour)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME:
        setMapperName((MapperName)null);
        return;
      case TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST:
        setChanInNeChannelsDeclList((NeChannelsDeclList)null);
        return;
      case TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST:
        setChanOutNeChannelsDeclList((NeChannelsDeclList)null);
        return;
      case TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR:
        setProcessBehaviour((ProcessBehaviour)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.MAPPER_DEF__MAPPER_NAME:
        return mapperName != null;
      case TorXakisDslPackage.MAPPER_DEF__CHAN_IN_NE_CHANNELS_DECL_LIST:
        return chanInNeChannelsDeclList != null;
      case TorXakisDslPackage.MAPPER_DEF__CHAN_OUT_NE_CHANNELS_DECL_LIST:
        return chanOutNeChannelsDeclList != null;
      case TorXakisDslPackage.MAPPER_DEF__PROCESS_BEHAVIOUR:
        return processBehaviour != null;
    }
    return super.eIsSet(featureID);
  }

} //MapperDefImpl
