/**
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.torXakisDsl.impl;

import nl.tno.torxakis.language.torXakisDsl.ConditionalCommunications;
import nl.tno.torxakis.language.torXakisDsl.IdName;
import nl.tno.torxakis.language.torXakisDsl.TorXakisDslPackage;
import nl.tno.torxakis.language.torXakisDsl.Transition;
import nl.tno.torxakis.language.torXakisDsl.UpdateList;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Transition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.TransitionImpl#getFromName <em>From Name</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.TransitionImpl#getConditionalCommunications <em>Conditional Communications</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.TransitionImpl#getUpdateList <em>Update List</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.TransitionImpl#getToName <em>To Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TransitionImpl extends MinimalEObjectImpl.Container implements Transition
{
  /**
   * The cached value of the '{@link #getFromName() <em>From Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromName()
   * @generated
   * @ordered
   */
  protected IdName fromName;

  /**
   * The cached value of the '{@link #getConditionalCommunications() <em>Conditional Communications</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionalCommunications()
   * @generated
   * @ordered
   */
  protected ConditionalCommunications conditionalCommunications;

  /**
   * The cached value of the '{@link #getUpdateList() <em>Update List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdateList()
   * @generated
   * @ordered
   */
  protected UpdateList updateList;

  /**
   * The cached value of the '{@link #getToName() <em>To Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToName()
   * @generated
   * @ordered
   */
  protected IdName toName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TorXakisDslPackage.Literals.TRANSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdName getFromName()
  {
    return fromName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFromName(IdName newFromName, NotificationChain msgs)
  {
    IdName oldFromName = fromName;
    fromName = newFromName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.TRANSITION__FROM_NAME, oldFromName, newFromName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFromName(IdName newFromName)
  {
    if (newFromName != fromName)
    {
      NotificationChain msgs = null;
      if (fromName != null)
        msgs = ((InternalEObject)fromName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.TRANSITION__FROM_NAME, null, msgs);
      if (newFromName != null)
        msgs = ((InternalEObject)newFromName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.TRANSITION__FROM_NAME, null, msgs);
      msgs = basicSetFromName(newFromName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.TRANSITION__FROM_NAME, newFromName, newFromName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionalCommunications getConditionalCommunications()
  {
    return conditionalCommunications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionalCommunications(ConditionalCommunications newConditionalCommunications, NotificationChain msgs)
  {
    ConditionalCommunications oldConditionalCommunications = conditionalCommunications;
    conditionalCommunications = newConditionalCommunications;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS, oldConditionalCommunications, newConditionalCommunications);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConditionalCommunications(ConditionalCommunications newConditionalCommunications)
  {
    if (newConditionalCommunications != conditionalCommunications)
    {
      NotificationChain msgs = null;
      if (conditionalCommunications != null)
        msgs = ((InternalEObject)conditionalCommunications).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS, null, msgs);
      if (newConditionalCommunications != null)
        msgs = ((InternalEObject)newConditionalCommunications).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS, null, msgs);
      msgs = basicSetConditionalCommunications(newConditionalCommunications, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS, newConditionalCommunications, newConditionalCommunications));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpdateList getUpdateList()
  {
    return updateList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpdateList(UpdateList newUpdateList, NotificationChain msgs)
  {
    UpdateList oldUpdateList = updateList;
    updateList = newUpdateList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.TRANSITION__UPDATE_LIST, oldUpdateList, newUpdateList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUpdateList(UpdateList newUpdateList)
  {
    if (newUpdateList != updateList)
    {
      NotificationChain msgs = null;
      if (updateList != null)
        msgs = ((InternalEObject)updateList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.TRANSITION__UPDATE_LIST, null, msgs);
      if (newUpdateList != null)
        msgs = ((InternalEObject)newUpdateList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.TRANSITION__UPDATE_LIST, null, msgs);
      msgs = basicSetUpdateList(newUpdateList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.TRANSITION__UPDATE_LIST, newUpdateList, newUpdateList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdName getToName()
  {
    return toName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetToName(IdName newToName, NotificationChain msgs)
  {
    IdName oldToName = toName;
    toName = newToName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.TRANSITION__TO_NAME, oldToName, newToName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setToName(IdName newToName)
  {
    if (newToName != toName)
    {
      NotificationChain msgs = null;
      if (toName != null)
        msgs = ((InternalEObject)toName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.TRANSITION__TO_NAME, null, msgs);
      if (newToName != null)
        msgs = ((InternalEObject)newToName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.TRANSITION__TO_NAME, null, msgs);
      msgs = basicSetToName(newToName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.TRANSITION__TO_NAME, newToName, newToName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.TRANSITION__FROM_NAME:
        return basicSetFromName(null, msgs);
      case TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS:
        return basicSetConditionalCommunications(null, msgs);
      case TorXakisDslPackage.TRANSITION__UPDATE_LIST:
        return basicSetUpdateList(null, msgs);
      case TorXakisDslPackage.TRANSITION__TO_NAME:
        return basicSetToName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.TRANSITION__FROM_NAME:
        return getFromName();
      case TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS:
        return getConditionalCommunications();
      case TorXakisDslPackage.TRANSITION__UPDATE_LIST:
        return getUpdateList();
      case TorXakisDslPackage.TRANSITION__TO_NAME:
        return getToName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.TRANSITION__FROM_NAME:
        setFromName((IdName)newValue);
        return;
      case TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS:
        setConditionalCommunications((ConditionalCommunications)newValue);
        return;
      case TorXakisDslPackage.TRANSITION__UPDATE_LIST:
        setUpdateList((UpdateList)newValue);
        return;
      case TorXakisDslPackage.TRANSITION__TO_NAME:
        setToName((IdName)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.TRANSITION__FROM_NAME:
        setFromName((IdName)null);
        return;
      case TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS:
        setConditionalCommunications((ConditionalCommunications)null);
        return;
      case TorXakisDslPackage.TRANSITION__UPDATE_LIST:
        setUpdateList((UpdateList)null);
        return;
      case TorXakisDslPackage.TRANSITION__TO_NAME:
        setToName((IdName)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.TRANSITION__FROM_NAME:
        return fromName != null;
      case TorXakisDslPackage.TRANSITION__CONDITIONAL_COMMUNICATIONS:
        return conditionalCommunications != null;
      case TorXakisDslPackage.TRANSITION__UPDATE_LIST:
        return updateList != null;
      case TorXakisDslPackage.TRANSITION__TO_NAME:
        return toName != null;
    }
    return super.eIsSet(featureID);
  }

} //TransitionImpl
