/**
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.torXakisDsl.impl;

import java.util.Collection;

import nl.tno.torxakis.language.torXakisDsl.CnectDef;
import nl.tno.torxakis.language.torXakisDsl.CnectName;
import nl.tno.torxakis.language.torXakisDsl.ConnectionItem;
import nl.tno.torxakis.language.torXakisDsl.TorXakisDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cnect Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.CnectDefImpl#getCnectName <em>Cnect Name</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.CnectDefImpl#getCnectType <em>Cnect Type</em>}</li>
 *   <li>{@link nl.tno.torxakis.language.torXakisDsl.impl.CnectDefImpl#getConnectionItems <em>Connection Items</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CnectDefImpl extends MinimalEObjectImpl.Container implements CnectDef
{
  /**
   * The cached value of the '{@link #getCnectName() <em>Cnect Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCnectName()
   * @generated
   * @ordered
   */
  protected CnectName cnectName;

  /**
   * The default value of the '{@link #getCnectType() <em>Cnect Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCnectType()
   * @generated
   * @ordered
   */
  protected static final String CNECT_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCnectType() <em>Cnect Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCnectType()
   * @generated
   * @ordered
   */
  protected String cnectType = CNECT_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getConnectionItems() <em>Connection Items</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectionItems()
   * @generated
   * @ordered
   */
  protected EList<ConnectionItem> connectionItems;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CnectDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TorXakisDslPackage.Literals.CNECT_DEF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CnectName getCnectName()
  {
    return cnectName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCnectName(CnectName newCnectName, NotificationChain msgs)
  {
    CnectName oldCnectName = cnectName;
    cnectName = newCnectName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CNECT_DEF__CNECT_NAME, oldCnectName, newCnectName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCnectName(CnectName newCnectName)
  {
    if (newCnectName != cnectName)
    {
      NotificationChain msgs = null;
      if (cnectName != null)
        msgs = ((InternalEObject)cnectName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CNECT_DEF__CNECT_NAME, null, msgs);
      if (newCnectName != null)
        msgs = ((InternalEObject)newCnectName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TorXakisDslPackage.CNECT_DEF__CNECT_NAME, null, msgs);
      msgs = basicSetCnectName(newCnectName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CNECT_DEF__CNECT_NAME, newCnectName, newCnectName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCnectType()
  {
    return cnectType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCnectType(String newCnectType)
  {
    String oldCnectType = cnectType;
    cnectType = newCnectType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TorXakisDslPackage.CNECT_DEF__CNECT_TYPE, oldCnectType, cnectType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ConnectionItem> getConnectionItems()
  {
    if (connectionItems == null)
    {
      connectionItems = new EObjectContainmentEList<ConnectionItem>(ConnectionItem.class, this, TorXakisDslPackage.CNECT_DEF__CONNECTION_ITEMS);
    }
    return connectionItems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CNECT_DEF__CNECT_NAME:
        return basicSetCnectName(null, msgs);
      case TorXakisDslPackage.CNECT_DEF__CONNECTION_ITEMS:
        return ((InternalEList<?>)getConnectionItems()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CNECT_DEF__CNECT_NAME:
        return getCnectName();
      case TorXakisDslPackage.CNECT_DEF__CNECT_TYPE:
        return getCnectType();
      case TorXakisDslPackage.CNECT_DEF__CONNECTION_ITEMS:
        return getConnectionItems();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CNECT_DEF__CNECT_NAME:
        setCnectName((CnectName)newValue);
        return;
      case TorXakisDslPackage.CNECT_DEF__CNECT_TYPE:
        setCnectType((String)newValue);
        return;
      case TorXakisDslPackage.CNECT_DEF__CONNECTION_ITEMS:
        getConnectionItems().clear();
        getConnectionItems().addAll((Collection<? extends ConnectionItem>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CNECT_DEF__CNECT_NAME:
        setCnectName((CnectName)null);
        return;
      case TorXakisDslPackage.CNECT_DEF__CNECT_TYPE:
        setCnectType(CNECT_TYPE_EDEFAULT);
        return;
      case TorXakisDslPackage.CNECT_DEF__CONNECTION_ITEMS:
        getConnectionItems().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TorXakisDslPackage.CNECT_DEF__CNECT_NAME:
        return cnectName != null;
      case TorXakisDslPackage.CNECT_DEF__CNECT_TYPE:
        return CNECT_TYPE_EDEFAULT == null ? cnectType != null : !CNECT_TYPE_EDEFAULT.equals(cnectType);
      case TorXakisDslPackage.CNECT_DEF__CONNECTION_ITEMS:
        return connectionItems != null && !connectionItems.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (cnectType: ");
    result.append(cnectType);
    result.append(')');
    return result.toString();
  }

} //CnectDefImpl
