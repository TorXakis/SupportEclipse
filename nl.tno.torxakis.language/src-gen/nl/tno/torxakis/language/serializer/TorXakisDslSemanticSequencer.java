/*
 * generated by Xtext 2.10.0
 */
package nl.tno.torxakis.language.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.tno.torxakis.language.services.TorXakisDslGrammarAccess;
import nl.tno.torxakis.language.torXakisDsl.Assignment;
import nl.tno.torxakis.language.torXakisDsl.ChannelDef;
import nl.tno.torxakis.language.torXakisDsl.ChannelDefName;
import nl.tno.torxakis.language.torXakisDsl.ChannelDefs;
import nl.tno.torxakis.language.torXakisDsl.ChannelName;
import nl.tno.torxakis.language.torXakisDsl.ChannelOffer;
import nl.tno.torxakis.language.torXakisDsl.ChannelsDecl;
import nl.tno.torxakis.language.torXakisDsl.CnectDef;
import nl.tno.torxakis.language.torXakisDsl.CnectName;
import nl.tno.torxakis.language.torXakisDsl.Communication;
import nl.tno.torxakis.language.torXakisDsl.Communications;
import nl.tno.torxakis.language.torXakisDsl.Condition;
import nl.tno.torxakis.language.torXakisDsl.ConditionalCommunications;
import nl.tno.torxakis.language.torXakisDsl.ConnectionIn;
import nl.tno.torxakis.language.torXakisDsl.ConnectionOut;
import nl.tno.torxakis.language.torXakisDsl.ConstDef;
import nl.tno.torxakis.language.torXakisDsl.ConstDefs;
import nl.tno.torxakis.language.torXakisDsl.ConstName;
import nl.tno.torxakis.language.torXakisDsl.Constructor;
import nl.tno.torxakis.language.torXakisDsl.ConstructorName;
import nl.tno.torxakis.language.torXakisDsl.Decoding;
import nl.tno.torxakis.language.torXakisDsl.Encoding;
import nl.tno.torxakis.language.torXakisDsl.ExitDecl;
import nl.tno.torxakis.language.torXakisDsl.FieldName;
import nl.tno.torxakis.language.torXakisDsl.Fields;
import nl.tno.torxakis.language.torXakisDsl.FuncDef;
import nl.tno.torxakis.language.torXakisDsl.FuncDefs;
import nl.tno.torxakis.language.torXakisDsl.FuncName;
import nl.tno.torxakis.language.torXakisDsl.HostName;
import nl.tno.torxakis.language.torXakisDsl.IdName;
import nl.tno.torxakis.language.torXakisDsl.InitItem;
import nl.tno.torxakis.language.torXakisDsl.MapperDef;
import nl.tno.torxakis.language.torXakisDsl.MapperName;
import nl.tno.torxakis.language.torXakisDsl.Model;
import nl.tno.torxakis.language.torXakisDsl.ModelDef;
import nl.tno.torxakis.language.torXakisDsl.ModelName;
import nl.tno.torxakis.language.torXakisDsl.NeChannelNameList;
import nl.tno.torxakis.language.torXakisDsl.NeChannelsDeclList;
import nl.tno.torxakis.language.torXakisDsl.NeConstructorList;
import nl.tno.torxakis.language.torXakisDsl.NeFieldList;
import nl.tno.torxakis.language.torXakisDsl.NeFieldNameList;
import nl.tno.torxakis.language.torXakisDsl.NeIdNameList;
import nl.tno.torxakis.language.torXakisDsl.NeTypeNameList;
import nl.tno.torxakis.language.torXakisDsl.NeValExprList;
import nl.tno.torxakis.language.torXakisDsl.NeVarDeclList;
import nl.tno.torxakis.language.torXakisDsl.NeVarNameList;
import nl.tno.torxakis.language.torXakisDsl.NeVarsDeclarationList;
import nl.tno.torxakis.language.torXakisDsl.PortNumber;
import nl.tno.torxakis.language.torXakisDsl.ProcCall;
import nl.tno.torxakis.language.torXakisDsl.ProcDef;
import nl.tno.torxakis.language.torXakisDsl.ProcDefs;
import nl.tno.torxakis.language.torXakisDsl.ProcName;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourBracket;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourChoice;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourDisable;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourEnable;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourEnableAccept;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourGuarded;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourHide;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourInterrupt;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourLet;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourParallel;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSequence;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourStop;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSynchronizeChannels;
import nl.tno.torxakis.language.torXakisDsl.ProcessBehaviourSynchronized;
import nl.tno.torxakis.language.torXakisDsl.SmallIdName;
import nl.tno.torxakis.language.torXakisDsl.StateItem;
import nl.tno.torxakis.language.torXakisDsl.StautDef;
import nl.tno.torxakis.language.torXakisDsl.StautDefs;
import nl.tno.torxakis.language.torXakisDsl.StautItems;
import nl.tno.torxakis.language.torXakisDsl.StautName;
import nl.tno.torxakis.language.torXakisDsl.SynchronizedChannels;
import nl.tno.torxakis.language.torXakisDsl.TorXakisDslPackage;
import nl.tno.torxakis.language.torXakisDsl.TransItem;
import nl.tno.torxakis.language.torXakisDsl.Transition;
import nl.tno.torxakis.language.torXakisDsl.TypeDef;
import nl.tno.torxakis.language.torXakisDsl.TypeDefs;
import nl.tno.torxakis.language.torXakisDsl.TypeName;
import nl.tno.torxakis.language.torXakisDsl.Update;
import nl.tno.torxakis.language.torXakisDsl.UpdateList;
import nl.tno.torxakis.language.torXakisDsl.ValExprBracket;
import nl.tno.torxakis.language.torXakisDsl.ValExprConst;
import nl.tno.torxakis.language.torXakisDsl.ValExprContructorCall;
import nl.tno.torxakis.language.torXakisDsl.ValExprError;
import nl.tno.torxakis.language.torXakisDsl.ValExprFunctionCall;
import nl.tno.torxakis.language.torXakisDsl.ValExprInteger;
import nl.tno.torxakis.language.torXakisDsl.ValExprIte;
import nl.tno.torxakis.language.torXakisDsl.ValExprLet;
import nl.tno.torxakis.language.torXakisDsl.ValExprOperator;
import nl.tno.torxakis.language.torXakisDsl.ValExprRegex;
import nl.tno.torxakis.language.torXakisDsl.ValExprString;
import nl.tno.torxakis.language.torXakisDsl.ValExprTest;
import nl.tno.torxakis.language.torXakisDsl.ValExprUnaryOperator;
import nl.tno.torxakis.language.torXakisDsl.ValExprVar;
import nl.tno.torxakis.language.torXakisDsl.VarDecl;
import nl.tno.torxakis.language.torXakisDsl.VarItem;
import nl.tno.torxakis.language.torXakisDsl.VarName;
import nl.tno.torxakis.language.torXakisDsl.VarsDecl;
import nl.tno.torxakis.language.torXakisDsl.VarsDeclaration;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TorXakisDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TorXakisDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TorXakisDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TorXakisDslPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case TorXakisDslPackage.CHANNEL_DEF:
				sequence_ChannelDef(context, (ChannelDef) semanticObject); 
				return; 
			case TorXakisDslPackage.CHANNEL_DEF_NAME:
				sequence_ChannelDefName(context, (ChannelDefName) semanticObject); 
				return; 
			case TorXakisDslPackage.CHANNEL_DEFS:
				sequence_ChannelDefs(context, (ChannelDefs) semanticObject); 
				return; 
			case TorXakisDslPackage.CHANNEL_NAME:
				sequence_ChannelName(context, (ChannelName) semanticObject); 
				return; 
			case TorXakisDslPackage.CHANNEL_OFFER:
				sequence_ChannelOffer(context, (ChannelOffer) semanticObject); 
				return; 
			case TorXakisDslPackage.CHANNELS_DECL:
				sequence_ChannelsDecl(context, (ChannelsDecl) semanticObject); 
				return; 
			case TorXakisDslPackage.CNECT_DEF:
				sequence_CnectDef(context, (CnectDef) semanticObject); 
				return; 
			case TorXakisDslPackage.CNECT_NAME:
				sequence_CnectName(context, (CnectName) semanticObject); 
				return; 
			case TorXakisDslPackage.COMMUNICATION:
				sequence_Communication(context, (Communication) semanticObject); 
				return; 
			case TorXakisDslPackage.COMMUNICATIONS:
				sequence_Communications(context, (Communications) semanticObject); 
				return; 
			case TorXakisDslPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case TorXakisDslPackage.CONDITIONAL_COMMUNICATIONS:
				sequence_ConditionalCommunications(context, (ConditionalCommunications) semanticObject); 
				return; 
			case TorXakisDslPackage.CONNECTION_IN:
				sequence_ConnectionIn(context, (ConnectionIn) semanticObject); 
				return; 
			case TorXakisDslPackage.CONNECTION_OUT:
				sequence_ConnectionOut(context, (ConnectionOut) semanticObject); 
				return; 
			case TorXakisDslPackage.CONST_DEF:
				sequence_ConstDef(context, (ConstDef) semanticObject); 
				return; 
			case TorXakisDslPackage.CONST_DEFS:
				sequence_ConstDefs(context, (ConstDefs) semanticObject); 
				return; 
			case TorXakisDslPackage.CONST_NAME:
				sequence_ConstName(context, (ConstName) semanticObject); 
				return; 
			case TorXakisDslPackage.CONSTRUCTOR:
				sequence_Constructor(context, (Constructor) semanticObject); 
				return; 
			case TorXakisDslPackage.CONSTRUCTOR_NAME:
				sequence_ConstructorName(context, (ConstructorName) semanticObject); 
				return; 
			case TorXakisDslPackage.DECODING:
				sequence_Decoding(context, (Decoding) semanticObject); 
				return; 
			case TorXakisDslPackage.ENCODING:
				sequence_Encoding(context, (Encoding) semanticObject); 
				return; 
			case TorXakisDslPackage.EXIT_DECL:
				sequence_ExitDecl(context, (ExitDecl) semanticObject); 
				return; 
			case TorXakisDslPackage.FIELD_NAME:
				sequence_FieldName(context, (FieldName) semanticObject); 
				return; 
			case TorXakisDslPackage.FIELDS:
				sequence_Fields(context, (Fields) semanticObject); 
				return; 
			case TorXakisDslPackage.FUNC_DEF:
				sequence_FuncDef(context, (FuncDef) semanticObject); 
				return; 
			case TorXakisDslPackage.FUNC_DEFS:
				sequence_FuncDefs(context, (FuncDefs) semanticObject); 
				return; 
			case TorXakisDslPackage.FUNC_NAME:
				sequence_FuncName(context, (FuncName) semanticObject); 
				return; 
			case TorXakisDslPackage.HOST_NAME:
				sequence_HostName(context, (HostName) semanticObject); 
				return; 
			case TorXakisDslPackage.ID_NAME:
				sequence_IdName(context, (IdName) semanticObject); 
				return; 
			case TorXakisDslPackage.INIT_ITEM:
				sequence_InitItem(context, (InitItem) semanticObject); 
				return; 
			case TorXakisDslPackage.MAPPER_DEF:
				sequence_MapperDef(context, (MapperDef) semanticObject); 
				return; 
			case TorXakisDslPackage.MAPPER_NAME:
				sequence_MapperName(context, (MapperName) semanticObject); 
				return; 
			case TorXakisDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TorXakisDslPackage.MODEL_DEF:
				sequence_ModelDef(context, (ModelDef) semanticObject); 
				return; 
			case TorXakisDslPackage.MODEL_NAME:
				sequence_ModelName(context, (ModelName) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_CHANNEL_NAME_LIST:
				sequence_NeChannelNameList(context, (NeChannelNameList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_CHANNELS_DECL_LIST:
				sequence_NeChannelsDeclList(context, (NeChannelsDeclList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_CONSTRUCTOR_LIST:
				sequence_NeConstructorList(context, (NeConstructorList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_FIELD_LIST:
				sequence_NeFieldList(context, (NeFieldList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_FIELD_NAME_LIST:
				sequence_NeFieldNameList(context, (NeFieldNameList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_ID_NAME_LIST:
				sequence_NeIdNameList(context, (NeIdNameList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_TYPE_NAME_LIST:
				sequence_NeTypeNameList(context, (NeTypeNameList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_VAL_EXPR_LIST:
				sequence_NeValExprList(context, (NeValExprList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_VAR_DECL_LIST:
				sequence_NeVarDeclList(context, (NeVarDeclList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_VAR_NAME_LIST:
				sequence_NeVarNameList(context, (NeVarNameList) semanticObject); 
				return; 
			case TorXakisDslPackage.NE_VARS_DECLARATION_LIST:
				sequence_NeVarsDeclarationList(context, (NeVarsDeclarationList) semanticObject); 
				return; 
			case TorXakisDslPackage.PORT_NUMBER:
				sequence_PortNumber(context, (PortNumber) semanticObject); 
				return; 
			case TorXakisDslPackage.PROC_CALL:
				sequence_ProcCall(context, (ProcCall) semanticObject); 
				return; 
			case TorXakisDslPackage.PROC_DEF:
				sequence_ProcDef(context, (ProcDef) semanticObject); 
				return; 
			case TorXakisDslPackage.PROC_DEFS:
				sequence_ProcDefs(context, (ProcDefs) semanticObject); 
				return; 
			case TorXakisDslPackage.PROC_NAME:
				sequence_ProcName(context, (ProcName) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_BRACKET:
				sequence_ProcessBehaviourBracket(context, (ProcessBehaviourBracket) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_CHOICE:
				sequence_ProcessBehaviourLevel3(context, (ProcessBehaviourChoice) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_DISABLE:
				sequence_ProcessBehaviourLevel1(context, (ProcessBehaviourDisable) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_ENABLE:
				sequence_ProcessBehaviourLevel1(context, (ProcessBehaviourEnable) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_ENABLE_ACCEPT:
				sequence_ProcessBehaviourLevel1(context, (ProcessBehaviourEnableAccept) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_GUARDED:
				sequence_ProcessBehaviourGuarded(context, (ProcessBehaviourGuarded) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_HIDE:
				sequence_ProcessBehaviourHide(context, (ProcessBehaviourHide) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_INTERRUPT:
				sequence_ProcessBehaviourLevel1(context, (ProcessBehaviourInterrupt) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_LET:
				sequence_ProcessBehaviourLet(context, (ProcessBehaviourLet) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_PARALLEL:
				sequence_ProcessBehaviourLevel2(context, (ProcessBehaviourParallel) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_SEQUENCE:
				sequence_ProcessBehaviourSequence(context, (ProcessBehaviourSequence) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_STOP:
				sequence_ProcessBehaviourStop(context, (ProcessBehaviourStop) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_SYNCHRONIZE_CHANNELS:
				sequence_ProcessBehaviourLevel2(context, (ProcessBehaviourSynchronizeChannels) semanticObject); 
				return; 
			case TorXakisDslPackage.PROCESS_BEHAVIOUR_SYNCHRONIZED:
				sequence_ProcessBehaviourLevel2(context, (ProcessBehaviourSynchronized) semanticObject); 
				return; 
			case TorXakisDslPackage.SMALL_ID_NAME:
				sequence_SmallIdName(context, (SmallIdName) semanticObject); 
				return; 
			case TorXakisDslPackage.STATE_ITEM:
				sequence_StateItem(context, (StateItem) semanticObject); 
				return; 
			case TorXakisDslPackage.STAUT_DEF:
				sequence_StautDef(context, (StautDef) semanticObject); 
				return; 
			case TorXakisDslPackage.STAUT_DEFS:
				sequence_StautDefs(context, (StautDefs) semanticObject); 
				return; 
			case TorXakisDslPackage.STAUT_ITEMS:
				sequence_StautItems(context, (StautItems) semanticObject); 
				return; 
			case TorXakisDslPackage.STAUT_NAME:
				sequence_StautName(context, (StautName) semanticObject); 
				return; 
			case TorXakisDslPackage.SYNCHRONIZED_CHANNELS:
				sequence_SynchronizedChannels(context, (SynchronizedChannels) semanticObject); 
				return; 
			case TorXakisDslPackage.TRANS_ITEM:
				sequence_TransItem(context, (TransItem) semanticObject); 
				return; 
			case TorXakisDslPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case TorXakisDslPackage.TYPE_DEF:
				sequence_TypeDef(context, (TypeDef) semanticObject); 
				return; 
			case TorXakisDslPackage.TYPE_DEFS:
				sequence_TypeDefs(context, (TypeDefs) semanticObject); 
				return; 
			case TorXakisDslPackage.TYPE_NAME:
				sequence_TypeName(context, (TypeName) semanticObject); 
				return; 
			case TorXakisDslPackage.UPDATE:
				sequence_Update(context, (Update) semanticObject); 
				return; 
			case TorXakisDslPackage.UPDATE_LIST:
				sequence_UpdateList(context, (UpdateList) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_BRACKET:
				sequence_ValExprBracket(context, (ValExprBracket) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_CONST:
				sequence_ValExprConst(context, (ValExprConst) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_CONTRUCTOR_CALL:
				sequence_ValExprContructorCall(context, (ValExprContructorCall) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_ERROR:
				sequence_ValExprError(context, (ValExprError) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_FUNCTION_CALL:
				sequence_ValExprFunctionCall(context, (ValExprFunctionCall) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_INTEGER:
				sequence_ValExprInteger(context, (ValExprInteger) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_ITE:
				sequence_ValExprIte(context, (ValExprIte) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_LET:
				sequence_ValExprLet(context, (ValExprLet) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_OPERATOR:
				sequence_ValExpr1(context, (ValExprOperator) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_REGEX:
				sequence_ValExprRegex(context, (ValExprRegex) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_STRING:
				sequence_ValExprString(context, (ValExprString) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_TEST:
				sequence_ValExpr1(context, (ValExprTest) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_UNARY_OPERATOR:
				sequence_ValExprUnaryOperator(context, (ValExprUnaryOperator) semanticObject); 
				return; 
			case TorXakisDslPackage.VAL_EXPR_VAR:
				sequence_ValExprVar(context, (ValExprVar) semanticObject); 
				return; 
			case TorXakisDslPackage.VAR_DECL:
				sequence_VarDecl(context, (VarDecl) semanticObject); 
				return; 
			case TorXakisDslPackage.VAR_ITEM:
				sequence_VarItem(context, (VarItem) semanticObject); 
				return; 
			case TorXakisDslPackage.VAR_NAME:
				sequence_VarName(context, (VarName) semanticObject); 
				return; 
			case TorXakisDslPackage.VARS_DECL:
				sequence_VarsDecl(context, (VarsDecl) semanticObject); 
				return; 
			case TorXakisDslPackage.VARS_DECLARATION:
				sequence_VarsDeclaration(context, (VarsDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     ((varDecl=VarDecl | varName=VarName) valExpr=ValExpr)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChannelDefName returns ChannelDefName
	 *
	 * Constraint:
	 *     name=CAPSID
	 */
	protected void sequence_ChannelDefName(ISerializationContext context, ChannelDefName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CHANNEL_DEF_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CHANNEL_DEF_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChannelDefNameAccess().getNameCAPSIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChannelDef returns ChannelDef
	 *
	 * Constraint:
	 *     (name=ChannelDefName neChannelDeclList=NeChannelsDeclList)
	 */
	protected void sequence_ChannelDef(ISerializationContext context, ChannelDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CHANNEL_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CHANNEL_DEF__NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CHANNEL_DEF__NE_CHANNEL_DECL_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CHANNEL_DEF__NE_CHANNEL_DECL_LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChannelDefAccess().getNameChannelDefNameParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getChannelDefAccess().getNeChannelDeclListNeChannelsDeclListParserRuleCall_2_0(), semanticObject.getNeChannelDeclList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChannelDefs returns ChannelDefs
	 *
	 * Constraint:
	 *     ChannelDefs+=ChannelDef
	 */
	protected void sequence_ChannelDefs(ISerializationContext context, ChannelDefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChannelName returns ChannelName
	 *
	 * Constraint:
	 *     name=CAPSID
	 */
	protected void sequence_ChannelName(ISerializationContext context, ChannelName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CHANNEL_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CHANNEL_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChannelNameAccess().getNameCAPSIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChannelOffer returns ChannelOffer
	 *
	 * Constraint:
	 *     (valExprs+=ValExpr | varDecls+=VarDecl | varNames+=VarName)
	 */
	protected void sequence_ChannelOffer(ISerializationContext context, ChannelOffer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChannelsDecl returns ChannelsDecl
	 *
	 * Constraint:
	 *     (neChannelNameList=NeChannelNameList neTypeNameList=NeTypeNameList?)
	 */
	protected void sequence_ChannelsDecl(ISerializationContext context, ChannelsDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CnectDef returns CnectDef
	 *
	 * Constraint:
	 *     (cnectName=CnectName (cnectType='CLIENTSOCK' | cnectType='SERVERSOCK') connectionItems+=ConnectionItem*)
	 */
	protected void sequence_CnectDef(ISerializationContext context, CnectDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CnectName returns CnectName
	 *
	 * Constraint:
	 *     name=CAPSID
	 */
	protected void sequence_CnectName(ISerializationContext context, CnectName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CNECT_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CNECT_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCnectNameAccess().getNameCAPSIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Communication returns Communication
	 *
	 * Constraint:
	 *     ((channelName=ChannelName | exit='EXIT') channelOffers+=ChannelOffer*)
	 */
	protected void sequence_Communication(ISerializationContext context, Communication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Communications returns Communications
	 *
	 * Constraint:
	 *     (communications+=Communication communications+=Communication*)
	 */
	protected void sequence_Communications(ISerializationContext context, Communications semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     valExpr=ValExpr
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONDITION__VAL_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONDITION__VAL_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getValExprValExprParserRuleCall_2_0(), semanticObject.getValExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConditionalCommunications returns ConditionalCommunications
	 *
	 * Constraint:
	 *     (communications+=Communications condition=Condition?)
	 */
	protected void sequence_ConditionalCommunications(ISerializationContext context, ConditionalCommunications semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectionItem returns ConnectionIn
	 *     ConnectionIn returns ConnectionIn
	 *
	 * Constraint:
	 *     (channelsDecl=ChannelsDecl hostName=HostName portNumber=PortNumber)
	 */
	protected void sequence_ConnectionIn(ISerializationContext context, ConnectionIn semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONNECTION_IN__CHANNELS_DECL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONNECTION_IN__CHANNELS_DECL));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONNECTION_IN__HOST_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONNECTION_IN__HOST_NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONNECTION_IN__PORT_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONNECTION_IN__PORT_NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnectionInAccess().getChannelsDeclChannelsDeclParserRuleCall_2_0(), semanticObject.getChannelsDecl());
		feeder.accept(grammarAccess.getConnectionInAccess().getHostNameHostNameParserRuleCall_4_0(), semanticObject.getHostName());
		feeder.accept(grammarAccess.getConnectionInAccess().getPortNumberPortNumberParserRuleCall_6_0(), semanticObject.getPortNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConnectionItem returns ConnectionOut
	 *     ConnectionOut returns ConnectionOut
	 *
	 * Constraint:
	 *     (channelsDecl=ChannelsDecl hostName=HostName portNumber=PortNumber)
	 */
	protected void sequence_ConnectionOut(ISerializationContext context, ConnectionOut semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONNECTION_OUT__CHANNELS_DECL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONNECTION_OUT__CHANNELS_DECL));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONNECTION_OUT__HOST_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONNECTION_OUT__HOST_NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONNECTION_OUT__PORT_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONNECTION_OUT__PORT_NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnectionOutAccess().getChannelsDeclChannelsDeclParserRuleCall_2_0(), semanticObject.getChannelsDecl());
		feeder.accept(grammarAccess.getConnectionOutAccess().getHostNameHostNameParserRuleCall_4_0(), semanticObject.getHostName());
		feeder.accept(grammarAccess.getConnectionOutAccess().getPortNumberPortNumberParserRuleCall_6_0(), semanticObject.getPortNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstDef returns ConstDef
	 *
	 * Constraint:
	 *     (name=ConstName typeName=TypeName valExpr=ValExpr)
	 */
	protected void sequence_ConstDef(ISerializationContext context, ConstDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONST_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONST_DEF__NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONST_DEF__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONST_DEF__TYPE_NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONST_DEF__VAL_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONST_DEF__VAL_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstDefAccess().getNameConstNameParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConstDefAccess().getTypeNameTypeNameParserRuleCall_2_0(), semanticObject.getTypeName());
		feeder.accept(grammarAccess.getConstDefAccess().getValExprValExprParserRuleCall_4_0(), semanticObject.getValExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstDefs returns ConstDefs
	 *
	 * Constraint:
	 *     (constDefs+=ConstDef constDefs+=ConstDef*)
	 */
	protected void sequence_ConstDefs(ISerializationContext context, ConstDefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstName returns ConstName
	 *
	 * Constraint:
	 *     name=SMALLID
	 */
	protected void sequence_ConstName(ISerializationContext context, ConstName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONST_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONST_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstNameAccess().getNameSMALLIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstructorName returns ConstructorName
	 *
	 * Constraint:
	 *     name=CAPSID
	 */
	protected void sequence_ConstructorName(ISerializationContext context, ConstructorName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.CONSTRUCTOR_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.CONSTRUCTOR_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstructorNameAccess().getNameCAPSIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Constructor returns Constructor
	 *
	 * Constraint:
	 *     (name=ConstructorName neFieldsList=NeFieldList?)
	 */
	protected void sequence_Constructor(ISerializationContext context, Constructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectionItem returns Decoding
	 *     Decoding returns Decoding
	 *
	 * Constraint:
	 *     (communication=Communication channelOffer=ChannelOffer)
	 */
	protected void sequence_Decoding(ISerializationContext context, Decoding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.DECODING__COMMUNICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.DECODING__COMMUNICATION));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.DECODING__CHANNEL_OFFER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.DECODING__CHANNEL_OFFER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDecodingAccess().getCommunicationCommunicationParserRuleCall_1_0(), semanticObject.getCommunication());
		feeder.accept(grammarAccess.getDecodingAccess().getChannelOfferChannelOfferParserRuleCall_3_0(), semanticObject.getChannelOffer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConnectionItem returns Encoding
	 *     Encoding returns Encoding
	 *
	 * Constraint:
	 *     (communication=Communication channelOffer=ChannelOffer)
	 */
	protected void sequence_Encoding(ISerializationContext context, Encoding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.ENCODING__COMMUNICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.ENCODING__COMMUNICATION));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.ENCODING__CHANNEL_OFFER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.ENCODING__CHANNEL_OFFER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEncodingAccess().getCommunicationCommunicationParserRuleCall_1_0(), semanticObject.getCommunication());
		feeder.accept(grammarAccess.getEncodingAccess().getChannelOfferChannelOfferParserRuleCall_3_0(), semanticObject.getChannelOffer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExitDecl returns ExitDecl
	 *
	 * Constraint:
	 *     (exit='EXIT' neTypeNameList=NeTypeNameList?)
	 */
	protected void sequence_ExitDecl(ISerializationContext context, ExitDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldName returns FieldName
	 *
	 * Constraint:
	 *     name=SMALLID
	 */
	protected void sequence_FieldName(ISerializationContext context, FieldName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.FIELD_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.FIELD_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldNameAccess().getNameSMALLIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Fields returns Fields
	 *
	 * Constraint:
	 *     (neFieldNameList=NeFieldNameList typeName=TypeName)
	 */
	protected void sequence_Fields(ISerializationContext context, Fields semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.FIELDS__NE_FIELD_NAME_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.FIELDS__NE_FIELD_NAME_LIST));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.FIELDS__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.FIELDS__TYPE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldsAccess().getNeFieldNameListNeFieldNameListParserRuleCall_0_0(), semanticObject.getNeFieldNameList());
		feeder.accept(grammarAccess.getFieldsAccess().getTypeNameTypeNameParserRuleCall_2_0(), semanticObject.getTypeName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FuncDef returns FuncDef
	 *
	 * Constraint:
	 *     (funcName=FuncName neVarsDelarationList=NeVarsDeclarationList typeName=TypeName valExpr=ValExpr)
	 */
	protected void sequence_FuncDef(ISerializationContext context, FuncDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.FUNC_DEF__FUNC_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.FUNC_DEF__FUNC_NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.FUNC_DEF__NE_VARS_DELARATION_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.FUNC_DEF__NE_VARS_DELARATION_LIST));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.FUNC_DEF__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.FUNC_DEF__TYPE_NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.FUNC_DEF__VAL_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.FUNC_DEF__VAL_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncDefAccess().getFuncNameFuncNameParserRuleCall_0_0(), semanticObject.getFuncName());
		feeder.accept(grammarAccess.getFuncDefAccess().getNeVarsDelarationListNeVarsDeclarationListParserRuleCall_2_0(), semanticObject.getNeVarsDelarationList());
		feeder.accept(grammarAccess.getFuncDefAccess().getTypeNameTypeNameParserRuleCall_5_0(), semanticObject.getTypeName());
		feeder.accept(grammarAccess.getFuncDefAccess().getValExprValExprParserRuleCall_7_0(), semanticObject.getValExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FuncDefs returns FuncDefs
	 *
	 * Constraint:
	 *     (funcDefs+=FuncDef funcDefs+=FuncDef*)
	 */
	protected void sequence_FuncDefs(ISerializationContext context, FuncDefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FuncName returns FuncName
	 *
	 * Constraint:
	 *     name=SMALLID
	 */
	protected void sequence_FuncName(ISerializationContext context, FuncName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.FUNC_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.FUNC_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncNameAccess().getNameSMALLIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HostName returns HostName
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_HostName(ISerializationContext context, HostName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.HOST_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.HOST_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHostNameAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IdName returns IdName
	 *
	 * Constraint:
	 *     (name=SMALLID | name=CAPSID)
	 */
	protected void sequence_IdName(ISerializationContext context, IdName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitItem returns InitItem
	 *
	 * Constraint:
	 *     (idName=IdName updateList=UpdateList?)
	 */
	protected void sequence_InitItem(ISerializationContext context, InitItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MapperDef returns MapperDef
	 *
	 * Constraint:
	 *     (
	 *         mapperName=MapperName 
	 *         chanInNeChannelsDeclList=NeChannelsDeclList? 
	 *         chanOutNeChannelsDeclList=NeChannelsDeclList? 
	 *         processBehaviour=ProcessBehaviour
	 *     )
	 */
	protected void sequence_MapperDef(ISerializationContext context, MapperDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MapperName returns MapperName
	 *
	 * Constraint:
	 *     name=CAPSID
	 */
	protected void sequence_MapperName(ISerializationContext context, MapperName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.MAPPER_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.MAPPER_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMapperNameAccess().getNameCAPSIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelDef returns ModelDef
	 *
	 * Constraint:
	 *     (modelName=ModelName neInputChannelNameList=NeChannelNameList? neOutputChannelNameList=NeChannelNameList? processBehaviour=ProcessBehaviour)
	 */
	protected void sequence_ModelDef(ISerializationContext context, ModelDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelName returns ModelName
	 *
	 * Constraint:
	 *     name=CAPSID
	 */
	protected void sequence_ModelName(ISerializationContext context, ModelName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.MODEL_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.MODEL_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelNameAccess().getNameCAPSIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         typeDefs+=TypeDefs | 
	 *         funcDefs+=FuncDefs | 
	 *         constDefs+=ConstDefs | 
	 *         procDefs+=ProcDefs | 
	 *         stautDefs+=StautDefs | 
	 *         channelDefs+=ChannelDefs | 
	 *         modelDef+=ModelDef | 
	 *         mapperDef+=MapperDef | 
	 *         cnectDef+=CnectDef
	 *     )+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeChannelNameList returns NeChannelNameList
	 *
	 * Constraint:
	 *     (channelNames+=ChannelName channelNames+=ChannelName*)
	 */
	protected void sequence_NeChannelNameList(ISerializationContext context, NeChannelNameList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeChannelsDeclList returns NeChannelsDeclList
	 *
	 * Constraint:
	 *     (channelsDecls+=ChannelsDecl channelsDecls+=ChannelsDecl*)
	 */
	protected void sequence_NeChannelsDeclList(ISerializationContext context, NeChannelsDeclList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeConstructorList returns NeConstructorList
	 *
	 * Constraint:
	 *     (constructors+=Constructor constructor+=Constructor*)
	 */
	protected void sequence_NeConstructorList(ISerializationContext context, NeConstructorList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeFieldList returns NeFieldList
	 *
	 * Constraint:
	 *     (fields+=Fields fields+=Fields*)
	 */
	protected void sequence_NeFieldList(ISerializationContext context, NeFieldList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeFieldNameList returns NeFieldNameList
	 *
	 * Constraint:
	 *     (fieldNames+=FieldName fieldNames+=FieldName*)
	 */
	protected void sequence_NeFieldNameList(ISerializationContext context, NeFieldNameList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeIdNameList returns NeIdNameList
	 *
	 * Constraint:
	 *     (idNames+=IdName idNames+=IdName*)
	 */
	protected void sequence_NeIdNameList(ISerializationContext context, NeIdNameList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeTypeNameList returns NeTypeNameList
	 *
	 * Constraint:
	 *     (typeNames+=TypeName typeNames+=TypeName*)
	 */
	protected void sequence_NeTypeNameList(ISerializationContext context, NeTypeNameList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeValExprList returns NeValExprList
	 *
	 * Constraint:
	 *     (valExprs+=ValExpr valExprs+=ValExpr*)
	 */
	protected void sequence_NeValExprList(ISerializationContext context, NeValExprList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeVarDeclList returns NeVarDeclList
	 *
	 * Constraint:
	 *     (varsDecls+=VarsDecl varsDecls+=VarsDecl*)
	 */
	protected void sequence_NeVarDeclList(ISerializationContext context, NeVarDeclList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeVarNameList returns NeVarNameList
	 *
	 * Constraint:
	 *     (varNames+=VarName varNames+=VarName*)
	 */
	protected void sequence_NeVarNameList(ISerializationContext context, NeVarNameList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NeVarsDeclarationList returns NeVarsDeclarationList
	 *
	 * Constraint:
	 *     (varsDeclarations+=VarsDeclaration varsDeclarations+=VarsDeclaration*)
	 */
	protected void sequence_NeVarsDeclarationList(ISerializationContext context, NeVarsDeclarationList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortNumber returns PortNumber
	 *
	 * Constraint:
	 *     portNumber=INT
	 */
	protected void sequence_PortNumber(ISerializationContext context, PortNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PORT_NUMBER__PORT_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PORT_NUMBER__PORT_NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPortNumberAccess().getPortNumberINTTerminalRuleCall_0(), semanticObject.getPortNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcCall
	 *     ProcessBehaviourLevel1 returns ProcCall
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcCall
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcCall
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcCall
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcCall
	 *     ProcessBehaviourLevel2 returns ProcCall
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcCall
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcCall
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcCall
	 *     ProcessBehaviourLevel3 returns ProcCall
	 *     ProcessBehaviourLevel3.ProcessBehaviourChoice_1_0 returns ProcCall
	 *     ProcessBehaviourLevel4 returns ProcCall
	 *     ProcCall returns ProcCall
	 *
	 * Constraint:
	 *     (name=ProcName neChannelNameList=NeChannelNameList? neValExprList=NeValExprList?)
	 */
	protected void sequence_ProcCall(ISerializationContext context, ProcCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcDef returns ProcDef
	 *
	 * Constraint:
	 *     (name=ProcName neChannelDeclList=NeChannelsDeclList? neVarDeclList=NeVarDeclList? exitDecl=ExitDecl? processBehaviour=ProcessBehaviour)
	 */
	protected void sequence_ProcDef(ISerializationContext context, ProcDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcDefs returns ProcDefs
	 *
	 * Constraint:
	 *     (procDefs+=ProcDef procDefs+=ProcDef*)
	 */
	protected void sequence_ProcDefs(ISerializationContext context, ProcDefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcName returns ProcName
	 *
	 * Constraint:
	 *     name=SMALLID
	 */
	protected void sequence_ProcName(ISerializationContext context, ProcName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROC_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROC_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcNameAccess().getNameSMALLIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel3 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel3.ProcessBehaviourChoice_1_0 returns ProcessBehaviourBracket
	 *     ProcessBehaviourLevel4 returns ProcessBehaviourBracket
	 *     ProcessBehaviourBracket returns ProcessBehaviourBracket
	 *
	 * Constraint:
	 *     sub=ProcessBehaviourLevel1
	 */
	protected void sequence_ProcessBehaviourBracket(ISerializationContext context, ProcessBehaviourBracket semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_BRACKET__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_BRACKET__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourBracketAccess().getSubProcessBehaviourLevel1ParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel3 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel3.ProcessBehaviourChoice_1_0 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourLevel4 returns ProcessBehaviourGuarded
	 *     ProcessBehaviourGuarded returns ProcessBehaviourGuarded
	 *
	 * Constraint:
	 *     (condition=Condition sub=ProcessBehaviourLevel4)
	 */
	protected void sequence_ProcessBehaviourGuarded(ISerializationContext context, ProcessBehaviourGuarded semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_GUARDED__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_GUARDED__CONDITION));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_GUARDED__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_GUARDED__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourGuardedAccess().getConditionConditionParserRuleCall_0_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getProcessBehaviourGuardedAccess().getSubProcessBehaviourLevel4ParserRuleCall_2_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel3 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel3.ProcessBehaviourChoice_1_0 returns ProcessBehaviourHide
	 *     ProcessBehaviourLevel4 returns ProcessBehaviourHide
	 *     ProcessBehaviourHide returns ProcessBehaviourHide
	 *
	 * Constraint:
	 *     (neChannelsDeclList=NeChannelsDeclList? sub=ProcessBehaviourLevel1)
	 */
	protected void sequence_ProcessBehaviourHide(ISerializationContext context, ProcessBehaviourHide semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel3 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel3.ProcessBehaviourChoice_1_0 returns ProcessBehaviourLet
	 *     ProcessBehaviourLevel4 returns ProcessBehaviourLet
	 *     ProcessBehaviourLet returns ProcessBehaviourLet
	 *
	 * Constraint:
	 *     (assignments+=Assignment assignments+=Assignment* sub=ProcessBehaviourLevel1)
	 */
	protected void sequence_ProcessBehaviourLet(ISerializationContext context, ProcessBehaviourLet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourDisable
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourDisable
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourDisable
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourDisable
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourDisable
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourDisable
	 *
	 * Constraint:
	 *     (left=ProcessBehaviourLevel1_ProcessBehaviourDisable_1_2_0 right=ProcessBehaviourLevel2)
	 */
	protected void sequence_ProcessBehaviourLevel1(ISerializationContext context, ProcessBehaviourDisable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_DISABLE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_DISABLE__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_DISABLE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_DISABLE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourLevel1Access().getProcessBehaviourDisableLeftAction_1_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProcessBehaviourLevel1Access().getRightProcessBehaviourLevel2ParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourEnable
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourEnable
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourEnable
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourEnable
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourEnable
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourEnable
	 *
	 * Constraint:
	 *     (left=ProcessBehaviourLevel1_ProcessBehaviourEnable_1_0_0 right=ProcessBehaviourLevel2)
	 */
	protected void sequence_ProcessBehaviourLevel1(ISerializationContext context, ProcessBehaviourEnable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_ENABLE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_ENABLE__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_ENABLE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_ENABLE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourLevel1Access().getProcessBehaviourEnableLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProcessBehaviourLevel1Access().getRightProcessBehaviourLevel2ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourEnableAccept
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourEnableAccept
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourEnableAccept
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourEnableAccept
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourEnableAccept
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourEnableAccept
	 *
	 * Constraint:
	 *     (
	 *         left=ProcessBehaviourLevel1_ProcessBehaviourEnableAccept_1_1_0 
	 *         (varDecls+=VarDecl | varNames+=VarName | valExprs+=ValExpr)* 
	 *         right=ProcessBehaviourLevel2
	 *     )
	 */
	protected void sequence_ProcessBehaviourLevel1(ISerializationContext context, ProcessBehaviourEnableAccept semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourInterrupt
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourInterrupt
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourInterrupt
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourInterrupt
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourInterrupt
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourInterrupt
	 *
	 * Constraint:
	 *     (left=ProcessBehaviourLevel1_ProcessBehaviourInterrupt_1_3_0 right=ProcessBehaviourLevel2)
	 */
	protected void sequence_ProcessBehaviourLevel1(ISerializationContext context, ProcessBehaviourInterrupt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_INTERRUPT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_INTERRUPT__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_INTERRUPT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_INTERRUPT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourLevel1Access().getProcessBehaviourInterruptLeftAction_1_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProcessBehaviourLevel1Access().getRightProcessBehaviourLevel2ParserRuleCall_1_3_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourParallel
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourParallel
	 *
	 * Constraint:
	 *     (left=ProcessBehaviourLevel2_ProcessBehaviourParallel_1_1_0 right=ProcessBehaviourLevel3)
	 */
	protected void sequence_ProcessBehaviourLevel2(ISerializationContext context, ProcessBehaviourParallel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_PARALLEL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_PARALLEL__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_PARALLEL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_PARALLEL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourLevel2Access().getProcessBehaviourParallelLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProcessBehaviourLevel2Access().getRightProcessBehaviourLevel3ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourSynchronizeChannels
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourSynchronizeChannels
	 *
	 * Constraint:
	 *     (left=ProcessBehaviourLevel2_ProcessBehaviourSynchronizeChannels_1_2_0 synchronizedChannels=SynchronizedChannels right=ProcessBehaviourLevel3)
	 */
	protected void sequence_ProcessBehaviourLevel2(ISerializationContext context, ProcessBehaviourSynchronizeChannels semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZE_CHANNELS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZE_CHANNELS__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZE_CHANNELS__SYNCHRONIZED_CHANNELS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZE_CHANNELS__SYNCHRONIZED_CHANNELS));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZE_CHANNELS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZE_CHANNELS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourLevel2Access().getProcessBehaviourSynchronizeChannelsLeftAction_1_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProcessBehaviourLevel2Access().getSynchronizedChannelsSynchronizedChannelsParserRuleCall_1_2_1_0(), semanticObject.getSynchronizedChannels());
		feeder.accept(grammarAccess.getProcessBehaviourLevel2Access().getRightProcessBehaviourLevel3ParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourSynchronized
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourSynchronized
	 *
	 * Constraint:
	 *     (left=ProcessBehaviourLevel2_ProcessBehaviourSynchronized_1_0_0 right=ProcessBehaviourLevel3)
	 */
	protected void sequence_ProcessBehaviourLevel2(ISerializationContext context, ProcessBehaviourSynchronized semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZED__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZED__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZED__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_SYNCHRONIZED__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourLevel2Access().getProcessBehaviourSynchronizedLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProcessBehaviourLevel2Access().getRightProcessBehaviourLevel3ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel3 returns ProcessBehaviourChoice
	 *     ProcessBehaviourLevel3.ProcessBehaviourChoice_1_0 returns ProcessBehaviourChoice
	 *
	 * Constraint:
	 *     (left=ProcessBehaviourLevel3_ProcessBehaviourChoice_1_0 right=ProcessBehaviourLevel4)
	 */
	protected void sequence_ProcessBehaviourLevel3(ISerializationContext context, ProcessBehaviourChoice semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_CHOICE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_CHOICE__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_CHOICE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_CHOICE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourLevel3Access().getProcessBehaviourChoiceLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProcessBehaviourLevel3Access().getRightProcessBehaviourLevel4ParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel3 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel3.ProcessBehaviourChoice_1_0 returns ProcessBehaviourSequence
	 *     ProcessBehaviourLevel4 returns ProcessBehaviourSequence
	 *     ProcessBehaviourSequence returns ProcessBehaviourSequence
	 *
	 * Constraint:
	 *     (conditionalCommunications=ConditionalCommunications sub=ProcessBehaviourLevel4?)
	 */
	protected void sequence_ProcessBehaviourSequence(ISerializationContext context, ProcessBehaviourSequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcessBehaviour returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel1 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnable_1_0_0 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel1.ProcessBehaviourEnableAccept_1_1_0 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel1.ProcessBehaviourDisable_1_2_0 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel1.ProcessBehaviourInterrupt_1_3_0 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel2 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronized_1_0_0 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel2.ProcessBehaviourParallel_1_1_0 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel2.ProcessBehaviourSynchronizeChannels_1_2_0 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel3 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel3.ProcessBehaviourChoice_1_0 returns ProcessBehaviourStop
	 *     ProcessBehaviourLevel4 returns ProcessBehaviourStop
	 *     ProcessBehaviourStop returns ProcessBehaviourStop
	 *
	 * Constraint:
	 *     stop='STOP'
	 */
	protected void sequence_ProcessBehaviourStop(ISerializationContext context, ProcessBehaviourStop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_STOP__STOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.PROCESS_BEHAVIOUR_STOP__STOP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessBehaviourStopAccess().getStopSTOPKeyword_0(), semanticObject.getStop());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns SmallIdName
	 *     ValExpr1 returns SmallIdName
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns SmallIdName
	 *     ValExpr1.ValExprTest_0_1_1_0 returns SmallIdName
	 *     ValExpr2 returns SmallIdName
	 *     SmallIdName returns SmallIdName
	 *
	 * Constraint:
	 *     name=SMALLID
	 */
	protected void sequence_SmallIdName(ISerializationContext context, SmallIdName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.SMALL_ID_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.SMALL_ID_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSmallIdNameAccess().getNameSMALLIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateItem returns StateItem
	 *
	 * Constraint:
	 *     list=NeIdNameList
	 */
	protected void sequence_StateItem(ISerializationContext context, StateItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.STATE_ITEM__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.STATE_ITEM__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateItemAccess().getListNeIdNameListParserRuleCall_1_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StautDef returns StautDef
	 *
	 * Constraint:
	 *     (name=StautName neChannelDeclList=NeChannelsDeclList? neVarDeclList=NeVarDeclList? exitDecl=ExitDecl? stautItems=StautItems)
	 */
	protected void sequence_StautDef(ISerializationContext context, StautDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StautDefs returns StautDefs
	 *
	 * Constraint:
	 *     (stautDefs+=StautDef stautDefs+=StautDef*)
	 */
	protected void sequence_StautDefs(ISerializationContext context, StautDefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StautItems returns StautItems
	 *
	 * Constraint:
	 *     (stateItems+=StateItem | varItems+=VarItem | initItems+=InitItem | transItems+=TransItem)*
	 */
	protected void sequence_StautItems(ISerializationContext context, StautItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StautName returns StautName
	 *
	 * Constraint:
	 *     name=CAPSID
	 */
	protected void sequence_StautName(ISerializationContext context, StautName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.STAUT_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.STAUT_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStautNameAccess().getNameCAPSIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SynchronizedChannels returns SynchronizedChannels
	 *
	 * Constraint:
	 *     neChannelNameList=NeChannelNameList
	 */
	protected void sequence_SynchronizedChannels(ISerializationContext context, SynchronizedChannels semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.SYNCHRONIZED_CHANNELS__NE_CHANNEL_NAME_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.SYNCHRONIZED_CHANNELS__NE_CHANNEL_NAME_LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSynchronizedChannelsAccess().getNeChannelNameListNeChannelNameListParserRuleCall_1_0(), semanticObject.getNeChannelNameList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransItem returns TransItem
	 *
	 * Constraint:
	 *     (transitions+=Transition transitions+=Transition*)
	 */
	protected void sequence_TransItem(ISerializationContext context, TransItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (fromName=IdName conditionalCommunications=ConditionalCommunications updateList=UpdateList? toName=IdName)
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDef returns TypeDef
	 *
	 * Constraint:
	 *     (name=TypeName neConstructorList=NeConstructorList)
	 */
	protected void sequence_TypeDef(ISerializationContext context, TypeDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.TYPE_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.TYPE_DEF__NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.TYPE_DEF__NE_CONSTRUCTOR_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.TYPE_DEF__NE_CONSTRUCTOR_LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeDefAccess().getNameTypeNameParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTypeDefAccess().getNeConstructorListNeConstructorListParserRuleCall_2_0(), semanticObject.getNeConstructorList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeDefs returns TypeDefs
	 *
	 * Constraint:
	 *     (typeDefs+=TypeDef typeDefs+=TypeDef*)
	 */
	protected void sequence_TypeDefs(ISerializationContext context, TypeDefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeName returns TypeName
	 *
	 * Constraint:
	 *     name=CAPSID
	 */
	protected void sequence_TypeName(ISerializationContext context, TypeName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.TYPE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.TYPE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeNameAccess().getNameCAPSIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UpdateList returns UpdateList
	 *
	 * Constraint:
	 *     (updates+=Update updates+=Update*)
	 */
	protected void sequence_UpdateList(ISerializationContext context, UpdateList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Update returns Update
	 *
	 * Constraint:
	 *     (varName+=VarName valExpr+=ValExpr)
	 */
	protected void sequence_Update(ISerializationContext context, Update semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprOperator
	 *     ValExpr1 returns ValExprOperator
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprOperator
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprOperator
	 *
	 * Constraint:
	 *     (left=ValExpr1_ValExprOperator_0_1_0_0 operator=OPERATOR right=ValExpr2)
	 */
	protected void sequence_ValExpr1(ISerializationContext context, ValExprOperator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_OPERATOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_OPERATOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_OPERATOR__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_OPERATOR__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_OPERATOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_OPERATOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExpr1Access().getValExprOperatorLeftAction_0_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getValExpr1Access().getOperatorOPERATORTerminalRuleCall_0_1_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getValExpr1Access().getRightValExpr2ParserRuleCall_0_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprTest
	 *     ValExpr1 returns ValExprTest
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprTest
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprTest
	 *
	 * Constraint:
	 *     (left=ValExpr1_ValExprTest_0_1_1_0 typeName=TypeName)
	 */
	protected void sequence_ValExpr1(ISerializationContext context, ValExprTest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_TEST__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_TEST__LEFT));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_TEST__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_TEST__TYPE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExpr1Access().getValExprTestLeftAction_0_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getValExpr1Access().getTypeNameTypeNameParserRuleCall_0_1_1_2_0(), semanticObject.getTypeName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprBracket
	 *     ValExpr1 returns ValExprBracket
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprBracket
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprBracket
	 *     ValExpr2 returns ValExprBracket
	 *     ValExprBracket returns ValExprBracket
	 *
	 * Constraint:
	 *     valExpr=ValExpr
	 */
	protected void sequence_ValExprBracket(ISerializationContext context, ValExprBracket semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_BRACKET__VAL_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_BRACKET__VAL_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprBracketAccess().getValExprValExprParserRuleCall_1_0(), semanticObject.getValExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExprConst returns ValExprConst
	 *
	 * Constraint:
	 *     const=ConstName
	 */
	protected void sequence_ValExprConst(ISerializationContext context, ValExprConst semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_CONST__CONST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_CONST__CONST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprConstAccess().getConstConstNameParserRuleCall_0(), semanticObject.getConst());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprContructorCall
	 *     ValExpr1 returns ValExprContructorCall
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprContructorCall
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprContructorCall
	 *     ValExpr2 returns ValExprContructorCall
	 *     ValExprContructorCall returns ValExprContructorCall
	 *
	 * Constraint:
	 *     (name=ConstructorName neValExprList=NeValExprList?)
	 */
	protected void sequence_ValExprContructorCall(ISerializationContext context, ValExprContructorCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprError
	 *     ValExpr1 returns ValExprError
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprError
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprError
	 *     ValExpr2 returns ValExprError
	 *     ValExprError returns ValExprError
	 *
	 * Constraint:
	 *     error=STRING
	 */
	protected void sequence_ValExprError(ISerializationContext context, ValExprError semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_ERROR__ERROR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_ERROR__ERROR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprErrorAccess().getErrorSTRINGTerminalRuleCall_1_0(), semanticObject.getError());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprFunctionCall
	 *     ValExpr1 returns ValExprFunctionCall
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprFunctionCall
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprFunctionCall
	 *     ValExpr2 returns ValExprFunctionCall
	 *     ValExprFunctionCall returns ValExprFunctionCall
	 *
	 * Constraint:
	 *     (name=FuncName neValExprList=NeValExprList?)
	 */
	protected void sequence_ValExprFunctionCall(ISerializationContext context, ValExprFunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprInteger
	 *     ValExpr1 returns ValExprInteger
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprInteger
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprInteger
	 *     ValExpr2 returns ValExprInteger
	 *     ValExprInteger returns ValExprInteger
	 *
	 * Constraint:
	 *     name=BIG_INT
	 */
	protected void sequence_ValExprInteger(ISerializationContext context, ValExprInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_INTEGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_INTEGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprIntegerAccess().getNameBIG_INTParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprIte
	 *     ValExpr1 returns ValExprIte
	 *     ValExprIte returns ValExprIte
	 *
	 * Constraint:
	 *     (conditionValExpr=ValExpr1 thenValExpr=ValExpr1 elseValExpr=ValExpr1)
	 */
	protected void sequence_ValExprIte(ISerializationContext context, ValExprIte semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_ITE__CONDITION_VAL_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_ITE__CONDITION_VAL_EXPR));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_ITE__THEN_VAL_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_ITE__THEN_VAL_EXPR));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_ITE__ELSE_VAL_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_ITE__ELSE_VAL_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprIteAccess().getConditionValExprValExpr1ParserRuleCall_1_0(), semanticObject.getConditionValExpr());
		feeder.accept(grammarAccess.getValExprIteAccess().getThenValExprValExpr1ParserRuleCall_3_0(), semanticObject.getThenValExpr());
		feeder.accept(grammarAccess.getValExprIteAccess().getElseValExprValExpr1ParserRuleCall_5_0(), semanticObject.getElseValExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprLet
	 *     ValExpr1 returns ValExprLet
	 *     ValExprLet returns ValExprLet
	 *
	 * Constraint:
	 *     (assignments+=Assignment assignments+=Assignment* valExpr=ValExpr1)
	 */
	protected void sequence_ValExprLet(ISerializationContext context, ValExprLet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprRegex
	 *     ValExpr1 returns ValExprRegex
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprRegex
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprRegex
	 *     ValExpr2 returns ValExprRegex
	 *     ValExprRegex returns ValExprRegex
	 *
	 * Constraint:
	 *     regex=STRING
	 */
	protected void sequence_ValExprRegex(ISerializationContext context, ValExprRegex semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_REGEX__REGEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_REGEX__REGEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprRegexAccess().getRegexSTRINGTerminalRuleCall_2_0(), semanticObject.getRegex());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprString
	 *     ValExpr1 returns ValExprString
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprString
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprString
	 *     ValExpr2 returns ValExprString
	 *     ValExprString returns ValExprString
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_ValExprString(ISerializationContext context, ValExprString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_STRING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_STRING__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprStringAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExpr returns ValExprUnaryOperator
	 *     ValExpr1 returns ValExprUnaryOperator
	 *     ValExpr1.ValExprOperator_0_1_0_0 returns ValExprUnaryOperator
	 *     ValExpr1.ValExprTest_0_1_1_0 returns ValExprUnaryOperator
	 *     ValExpr2 returns ValExprUnaryOperator
	 *     ValExprUnaryOperator returns ValExprUnaryOperator
	 *
	 * Constraint:
	 *     (operator=OPERATOR valExpr=ValExpr2)
	 */
	protected void sequence_ValExprUnaryOperator(ISerializationContext context, ValExprUnaryOperator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_UNARY_OPERATOR__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_UNARY_OPERATOR__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_UNARY_OPERATOR__VAL_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_UNARY_OPERATOR__VAL_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprUnaryOperatorAccess().getOperatorOPERATORTerminalRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getValExprUnaryOperatorAccess().getValExprValExpr2ParserRuleCall_1_0(), semanticObject.getValExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValExprVar returns ValExprVar
	 *
	 * Constraint:
	 *     var=VarName
	 */
	protected void sequence_ValExprVar(ISerializationContext context, ValExprVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_VAR__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAL_EXPR_VAR__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValExprVarAccess().getVarVarNameParserRuleCall_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VarDecl returns VarDecl
	 *
	 * Constraint:
	 *     (varName=VarName typeName=TypeName)
	 */
	protected void sequence_VarDecl(ISerializationContext context, VarDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAR_DECL__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAR_DECL__VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAR_DECL__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAR_DECL__TYPE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarDeclAccess().getVarNameVarNameParserRuleCall_0_0(), semanticObject.getVarName());
		feeder.accept(grammarAccess.getVarDeclAccess().getTypeNameTypeNameParserRuleCall_2_0(), semanticObject.getTypeName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VarItem returns VarItem
	 *
	 * Constraint:
	 *     neVarsDelarationList=NeVarsDeclarationList?
	 */
	protected void sequence_VarItem(ISerializationContext context, VarItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarName returns VarName
	 *
	 * Constraint:
	 *     name=SMALLID
	 */
	protected void sequence_VarName(ISerializationContext context, VarName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VAR_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VAR_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarNameAccess().getNameSMALLIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VarsDecl returns VarsDecl
	 *
	 * Constraint:
	 *     (neVarNameList=NeVarNameList typeName=TypeName)
	 */
	protected void sequence_VarsDecl(ISerializationContext context, VarsDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VARS_DECL__NE_VAR_NAME_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VARS_DECL__NE_VAR_NAME_LIST));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VARS_DECL__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VARS_DECL__TYPE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarsDeclAccess().getNeVarNameListNeVarNameListParserRuleCall_0_0(), semanticObject.getNeVarNameList());
		feeder.accept(grammarAccess.getVarsDeclAccess().getTypeNameTypeNameParserRuleCall_2_0(), semanticObject.getTypeName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VarsDeclaration returns VarsDeclaration
	 *
	 * Constraint:
	 *     (neVarNameList=NeVarNameList typeName=TypeName)
	 */
	protected void sequence_VarsDeclaration(ISerializationContext context, VarsDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VARS_DECLARATION__NE_VAR_NAME_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VARS_DECLARATION__NE_VAR_NAME_LIST));
			if (transientValues.isValueTransient(semanticObject, TorXakisDslPackage.Literals.VARS_DECLARATION__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TorXakisDslPackage.Literals.VARS_DECLARATION__TYPE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarsDeclarationAccess().getNeVarNameListNeVarNameListParserRuleCall_0_0(), semanticObject.getNeVarNameList());
		feeder.accept(grammarAccess.getVarsDeclarationAccess().getTypeNameTypeNameParserRuleCall_2_0(), semanticObject.getTypeName());
		feeder.finish();
	}
	
	
}
